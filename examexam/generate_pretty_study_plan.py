"""md2readable
=================

Turn Markdown into beautiful, *highly readable* HTML using a Jinja template
with builtâ€‘in accessibility and readerâ€‘mode features (dark mode, font/size
controls, max-width, line-height, TOC/sidebar, keyboard shortcuts, and more).

Requirements
------------
- Python 3.9+
- `jinja2` (templating)
- `markdown` (a.k.a. `Markdown` package) with common extensions
  - Optional but recommended: `pygments` (for code highlighting via `codehilite`)

Install:
    pip install jinja2 markdown pygments

Quickstart (CLI)
----------------
Render `input.md` to `output.html`:
    python -m md2readable input.md -o output.html

Or just:
    python -m md2readable input.md  # writes alongside as input.readable.html

Library usage
-------------
```python
from pathlib import Path
from md2readable import render_file_to_html

html = render_file_to_html(Path("notes.md"))
Path("notes.html").write_text(html, encoding="utf-8")
```

Notes:
-----
- Uses Markdown extensions: tables, fenced_code, toc, footnotes, admonition,
  attr_list, sane_lists, nl2br, smarty, codehilite (if pygments installed).
- Jinja template can be overridden by passing your own Template or template text.
- Ships with a coherent CSS system and a small JS controller for readability
  controls (font size, line height, width, theme), sticky TOC, and scroll spy.

"""
from __future__ import annotations

from dataclasses import dataclass
from pathlib import Path
from collections.abc import Iterable
import json
import textwrap
import argparse

import markdown as _markdown

from jinja2 import Environment


# -------------------------
# Built-in Jinja2 template
# -------------------------
_DEFAULT_TEMPLATE: str = textwrap.dedent(
    r"""
    <!doctype html>
    <html lang="en" data-theme="{{ theme }}">
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <meta name="color-scheme" content="light dark">
      <title>{{ title|e }}</title>
      <style>
      {{ css }}
      </style>
    </head>
    <body>
      <a class="skip-link" href="#content">Skip to content</a>
      <header class="site-header" role="banner">
        <div class="header-inner">
          <h1 class="title">{{ title }}</h1>
          <div class="controls" aria-label="Reader controls">
            <button id="themeToggle" class="btn" title="Toggle theme (T)">ðŸŒ“</button>
            <button id="fontDec" class="btn" title="Smaller text (A-)">Aâˆ’</button>
            <button id="fontInc" class="btn" title="Larger text (A+)">A+</button>
            <button id="widthToggle" class="btn" title="Toggle page width (W)">â†”</button>
            <button id="lineToggle" class="btn" title="Toggle line height (L)">â‰£</button>
          </div>
        </div>
      </header>

      <main class="layout">
        <aside class="sidebar" aria-label="On this page">
          <nav id="toc" class="toc">
            <h2>Contents</h2>
            {{ toc|safe }}
          </nav>
        </aside>
        <article id="content" class="content" role="main">
          {{ content|safe }}
        </article>
      </main>

      <footer class="site-footer">
        <div class="footer-inner">
          <p>Generated by md2readable Â· <a href="#" id="resetPrefs">Reset preferences</a></p>
        </div>
      </footer>

      <script>
      const MD2R_PREF_KEY = 'md2readable:prefs:v1';
      const DEFAULT_PREFS = { fontScale: 1.0, wide: false, loose: true, theme: '{{ theme|e }}' };
      {{ js }}
      </script>
    </body>
    </html>
    """
)


# -------------------------
# CSS (minimal, elegant, responsive, readable)
# -------------------------
_DEFAULT_CSS: str = textwrap.dedent(
    r"""
    :root{
      --bg:#ffffff; --fg:#111; --muted:#555; --accent:#2f6feb;
      --code-bg:#f6f8fa; --border:#e6e6e6; --kbd-bg:#eee; --kbd-fg:#333;
      --shadow:0 1px 2px rgba(0,0,0,.05),0 4px 12px rgba(0,0,0,.05);
      --content-max: 72ch; /* default reading width */
      --font: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
      --font-sans: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
      --mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
      --line: 1.7;
    }
    [data-theme="dark"]{
      --bg:#0b0c0f; --fg:#e6e6e6; --muted:#9aa0a6; --accent:#8ab4f8;
      --code-bg:#0f1116; --border:#202124; --kbd-bg:#222; --kbd-fg:#ddd;
      --shadow: none;
    }

    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; background:var(--bg); color:var(--fg); font: 17px/var(--line) var(--font-sans);
      text-rendering:optimizeLegibility; -webkit-font-smoothing:antialiased;
    }
    .skip-link{ position:absolute; left:-9999px; top:auto; width:1px; height:1px; overflow:hidden; }
    .skip-link:focus{ position:static; width:auto; height:auto; padding:.5rem 1rem; background:var(--accent); color:#fff; }

    .site-header{ position:sticky; top:0; z-index:10; backdrop-filter:saturate(150%) blur(8px);
      background: color-mix(in srgb, var(--bg) 85%, transparent); border-bottom:1px solid var(--border);
    }
    .header-inner{ max-width:min(1200px, 95vw); margin:0 auto; display:flex; align-items:center; gap:1rem; padding:.6rem 1rem; }
    .title{ font-size:clamp(1.2rem, 2vw + .6rem, 1.8rem); margin:0; font-weight:700 }
    .controls{ margin-left:auto; display:flex; gap:.4rem }
    .btn{ border:1px solid var(--border); background:transparent; color:var(--fg); padding:.35rem .55rem; border-radius:.6rem; cursor:pointer }
    .btn:hover{ background:color-mix(in srgb, var(--accent) 10%, transparent) }

    .layout{ max-width:min(1200px, 95vw); margin:1rem auto; display:grid; grid-template-columns: 260px 1fr; gap:1.2rem }
    @media (max-width: 900px){ .layout{ grid-template-columns: 1fr } .sidebar{ order:2 } }

    .sidebar{ position:sticky; top:4.5rem; height:calc(100dvh - 5.5rem); overflow:auto; padding:.75rem; border:1px solid var(--border); border-radius:1rem; box-shadow:var(--shadow) }
    .toc{ font-size:.95rem }
    .toc h2{ margin-top:0 }
    .toc a{ color:var(--fg); text-decoration:none }
    .toc a:hover{ text-decoration:underline }
    .toc ul{ list-style:none; padding-left:0 }
    .toc ul ul{ padding-left:1rem; border-left:1px dashed var(--border); margin:.25rem 0 }
    .toc .active>a{ font-weight:700; color:var(--accent) }

    .content{ max-width:var(--content-max); margin:0 auto; padding:1rem 1.2rem; border:1px solid var(--border); border-radius:1rem; box-shadow:var(--shadow); background:color-mix(in srgb, var(--bg) 98%, transparent) }
    .content.wide{ max-width: 100% }

    .content h1,.content h2,.content h3,.content h4{ font-family:var(--font); line-height:1.25; margin:1.6em 0 .6em }
    .content h1{ font-size:clamp(1.8rem, 1.2rem + 2.5vw, 2.6rem) }
    .content h2{ font-size:clamp(1.4rem, 1rem + 1.6vw, 2rem) }
    .content h3{ font-size:clamp(1.2rem, .9rem + 1.2vw, 1.5rem) }
    .content p, .content li{ line-height:var(--line) }

    .content code, pre{ font-family:var(--mono) }
    pre{ background:var(--code-bg); padding:1rem; border-radius:.8rem; overflow:auto; border:1px solid var(--border) }
    code{ background:color-mix(in srgb, var(--code-bg) 85%, transparent); padding:.1rem .35rem; border-radius:.4rem }

    table{ border-collapse:collapse; width:100%; margin:1rem 0; font-size:.95rem }
    th, td{ border:1px solid var(--border); padding:.5rem .6rem; vertical-align:top }
    thead th{ background:color-mix(in srgb, var(--code-bg) 70%, transparent) }

    blockquote{ border-left:4px solid var(--accent); margin:1rem 0; padding:.5rem 1rem; color:var(--muted); background:color-mix(in srgb, var(--code-bg) 60%, transparent) }
    hr{ border:none; border-top:1px solid var(--border); margin:2rem 0 }

    kbd{ background:var(--kbd-bg); color:var(--kbd-fg); padding:.15rem .35rem; border-radius:.3rem; border:1px solid var(--border); box-shadow:inset 0 -1px 0 rgba(0,0,0,.1) }

    .site-footer{ margin:2rem 0 3rem }
    .footer-inner{ max-width:min(1200px, 95vw); margin:0 auto; padding:0 1rem; color:var(--muted) }

    .loose{ --line: 1.9 }
    .tight{ --line: 1.5 }
    """
)


# -------------------------
# JS controller for reader prefs, theme, width, line-height, TOC scrollspy
# -------------------------
_DEFAULT_JS: str = textwrap.dedent(
    r"""
    function readPrefs(){
      try{ return JSON.parse(localStorage.getItem(MD2R_PREF_KEY)) || DEFAULT_PREFS; }catch{ return DEFAULT_PREFS; }
    }
    function savePrefs(p){ localStorage.setItem(MD2R_PREF_KEY, JSON.stringify(p)); }

    const state = readPrefs();
    const root = document.documentElement;
    const body = document.body;

    // Apply initial
    function apply(){
      body.style.fontSize = (state.fontScale * 1).toFixed(2) + 'rem';
      document.querySelector('.content')?.classList.toggle('wide', !!state.wide);
      body.classList.toggle('loose', !!state.loose);
      body.classList.toggle('tight', !state.loose);
      root.setAttribute('data-theme', state.theme);
    }
    apply();

    // Controls
    const $ = (sel)=>document.querySelector(sel);
    $('#themeToggle')?.addEventListener('click', ()=>{
      state.theme = (state.theme === 'dark') ? 'light' : 'dark';
      apply(); savePrefs(state);
    });
    $('#fontInc')?.addEventListener('click', ()=>{ state.fontScale = Math.min(1.6, state.fontScale + 0.05); apply(); savePrefs(state); });
    $('#fontDec')?.addEventListener('click', ()=>{ state.fontScale = Math.max(0.8, state.fontScale - 0.05); apply(); savePrefs(state); });
    $('#widthToggle')?.addEventListener('click', ()=>{ state.wide = !state.wide; apply(); savePrefs(state); });
    $('#lineToggle')?.addEventListener('click', ()=>{ state.loose = !state.loose; apply(); savePrefs(state); });
    $('#resetPrefs')?.addEventListener('click', (e)=>{ e.preventDefault(); Object.assign(state, DEFAULT_PREFS); apply(); savePrefs(state); });

    // Keyboard shortcuts
    window.addEventListener('keydown', (e)=>{
      if (['INPUT','TEXTAREA'].includes(document.activeElement.tagName)) return;
      if (e.key==='t' || e.key==='T'){ $('#themeToggle')?.click(); }
      if (e.key==='+'){ $('#fontInc')?.click(); }
      if (e.key==='-'){ $('#fontDec')?.click(); }
      if (e.key==='w' || e.key==='W'){ $('#widthToggle')?.click(); }
      if (e.key==='l' || e.key==='L'){ $('#lineToggle')?.click(); }
    });

    // TOC scroll spy: highlight current section link
    const headings = Array.from(document.querySelectorAll('.content h1, .content h2, .content h3'));
    const tocLinks = Array.from(document.querySelectorAll('#toc a[href^="#"]'));
    const byId = Object.fromEntries(tocLinks.map(a=>[decodeURIComponent(a.getAttribute('href')||'').slice(1), a]));

    const obs = new IntersectionObserver((entries)=>{
      entries.forEach(entry=>{
        const id = entry.target.id;
        const link = byId[id];
        if (!link) return;
        const li = link.parentElement;
        if (entry.isIntersecting){ li?.classList.add('active'); }
        else { li?.classList.remove('active'); }
      });
    }, { rootMargin: '0px 0px -70% 0px', threshold: 0.01 });

    headings.forEach(h=>{ if (!h.id) h.id = h.textContent.trim().toLowerCase().replace(/[^a-z0-9]+/g,'-'); obs.observe(h); });
    """
)


@dataclass
class RenderOptions:
    """Configuration for Markdown â†’ HTML rendering."""
    title: str | None = None
    theme: str = "light"  # "light" | "dark"
    css: str | None = None
    js: str | None = None
    jinja_template: str | None = None  # override entire template text
    additional_extensions: Iterable[str] | None = None
    extension_configs: dict | None = None


def _make_markdown(extensions: Iterable[str] | None = None, extension_configs: dict | None = None):
    exts = [
        "toc",
        "tables",
        "fenced_code",
        "footnotes",
        "admonition",
        "attr_list",
        "sane_lists",
        "nl2br",
        "smarty",
    ]
    if extensions:
        for e in extensions:
            if e not in exts:
                exts.append(e)
    # Try enabling codehilite if pygments is installed
    try:
        import pygments  # noqa: F401
        exts.append("codehilite")
    except Exception:
        pass

    return _markdown.Markdown(extensions=exts, extension_configs=extension_configs or {})


def render_markdown_to_html(md_text: str, options: RenderOptions | None = None) -> str:
    """Convert Markdown text to a full HTML page using the built-in Jinja template.

    Parameters
    ----------
    md_text : str
        Markdown source text.
    options : RenderOptions | None
        Rendering configuration (title, theme, assets, template, etc.).

    Returns:
    -------
    str
        Complete HTML document as a string.
    """
    opts = options or RenderOptions()

    md = _make_markdown(
        extensions=opts.additional_extensions,
        extension_configs=(opts.extension_configs or {"toc": {"permalink": True}}),
    )
    content_html = md.convert(md_text)

    # Extract auto-generated TOC (Markdown's 'toc' extension stores it on md)
    toc_html = getattr(md, "toc", "")

    env = Environment(autoescape=True)
    template = env.from_string(opts.jinja_template or _DEFAULT_TEMPLATE)

    html = template.render(
        title=opts.title or _infer_title(md_text) or "Document",
        content=content_html,
        toc=toc_html,
        css=opts.css or _DEFAULT_CSS,
        js=opts.js or _DEFAULT_JS,
        theme=opts.theme,
    )
    return html


def render_file_to_html(path: Path, *, options: RenderOptions | None = None, encoding: str = "utf-8") -> str:
    """Render a Markdown file to an HTML string.

    Parameters
    ----------
    path : Path
        Path to a Markdown file.
    options : RenderOptions | None
        Rendering configuration.
    encoding : str
        File encoding (default utf-8).
    """
    md_text = path.read_text(encoding=encoding)
    opts = options or RenderOptions()
    if not opts.title:
        opts = RenderOptions(
            **{**opts.__dict__, "title": path.stem.replace("-", " ").replace("_", " ").title()}
        )
    return render_markdown_to_html(md_text, opts)


def _infer_title(md_text: str) -> str | None:
    for line in md_text.splitlines():
        s = line.strip()
        if s.startswith("# ") and len(s) > 2:
            return s[2:].strip()
    return None


# -------------------------
# CLI Entrypoint
# -------------------------

def _cli(argv: list[str] | None = None) -> int:
    parser = argparse.ArgumentParser(
        prog="md2readable",
        description="Render Markdown to beautiful, readable HTML with a Jinja template.",
    )
    parser.add_argument("input", type=Path, help="Input Markdown file")
    parser.add_argument("-o", "--output", type=Path, help="Output HTML file")
    parser.add_argument("--dark", action="store_true", help="Start in dark mode")
    parser.add_argument(
        "--template", type=Path, help="Path to custom Jinja2 template (overrides built-in)"
    )
    parser.add_argument(
        "--assets-json",
        type=Path,
        help="JSON file with keys 'css' and/or 'js' to override built-in assets",
    )
    args = parser.parse_args(argv)

    if not args.input.exists():
        parser.error(f"Input file not found: {args.input}")

    css = js = jinja_template = None
    if args.assets_json:
        data = json.loads(args.assets_json.read_text(encoding="utf-8"))
        css = data.get("css")
        js = data.get("js")
    if args.template:
        jinja_template = args.template.read_text(encoding="utf-8")

    options = RenderOptions(
        theme="dark" if args.dark else "light",
        css=css,
        js=js,
        jinja_template=jinja_template,
    )

    html = render_file_to_html(args.input, options=options)

    out_path = args.output or args.input.with_suffix(".readable.html")
    out_path.write_text(html, encoding="utf-8")
    print(f"Wrote: {out_path}")
    return 0


def main() -> None:
    """Console entry-point for `python -m md2readable`"""
    raise SystemExit(_cli())


if __name__ == "__main__":  # pragma: no cover
    main()
