[[questions]]
id = "ed03a36c-2ad4-4bc5-8b37-59fd8e43e188"
question = "What are two valid use cases for Amazon OpenSearch Service? (Select 2)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Log analytics", "Relational database management", "Data warehousing", "Full-text search", "This is a bad question and does not have an objective answer."]
explanation = ["Log analytics is a valid use case because OpenSearch can handle large volumes of log data efficiently.", "Relational database management is wrong because OpenSearch is not designed for managing relational databases.", "Data warehousing is wrong because Amazon Redshift is the preferred service for data warehousing.", "Full-text search is valid since OpenSearch is optimized for quick retrieval of text data."]
answers = ["Log analytics", "Full-text search"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "9fc8b5d1-26f9-42bd-a88c-6c9b18400949"
question = "Which feature of Amazon OpenSearch Service allows you to visualize and analyze your data? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon QuickSight", "OpenSearch Dashboards", "AWS Lambda", "Amazon Athena", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon QuickSight is for BI visualization but not specifically tied to OpenSearch.", "OpenSearch Dashboards is correct because it is a visualization tool integrated with OpenSearch.", "AWS Lambda is a serverless compute service, unrelated to data visualization.", "Amazon Athena is a query service over S3 data and does not visualize OpenSearch data."]
answers = ["OpenSearch Dashboards"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "13426a4b-6370-416f-acb5-b5fa02af9650"
question = "Which of the following is a key benefit of using Amazon OpenSearch Service over self-managed OpenSearch? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Immediate access to the latest OpenSearch features", "End-to-end encryption by default", "Automatic scaling according to load", "No need for an AWS account", "This is a bad question and does not have an objective answer."]
explanation = ["Immediate access to the latest OpenSearch features is incorrect as self-managed OpenSearch can also be upgraded.", "End-to-end encryption by default is correct since Amazon OpenSearch Service ensures data encryption both at rest and in transit.", "Automatic scaling according to load is not explicitly stated as a feature of OpenSearch but is managed under AWS's other services.", "No need for an AWS account is wrong because using Amazon OpenSearch Service requires an AWS account."]
answers = ["Automatic scaling according to load"]
alternative_answers = ["Immediate access to the latest OpenSearch features"]
claude_answers = ["Immediate access to the latest OpenSearch features"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3fef2ff2-f744-40a0-8ff3-ab019bfe9969"
question = "What is the primary purpose of the Amazon OpenSearch Service's Index? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To group documents for monitoring", "To optimize data access and retrieval", "To store raw data before processing", "To encrypt sensitive information", "This is a bad question and does not have an objective answer."]
explanation = ["To group documents for monitoring is incorrect; indices are not specifically for monitoring.", "To optimize data access and retrieval is correct because indices are structured for efficient querying.", "To store raw data before processing is incorrect; that would be more related to data lakes.", "To encrypt sensitive information is wrong; indices do not inherently encrypt data."]
answers = ["To optimize data access and retrieval"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d6926250-aaca-4691-981f-6498107d37f8"
question = "Which strategy can enhance the query performance of your OpenSearch cluster? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Consolidating your indices", "Increasing the instance type size", "Adding more data nodes", "Limiting the number of shards per index", "This is a bad question and does not have an objective answer."]
explanation = ["Consolidating your indices can degrade performance if done improperly; it may cause slower queries if there are too many documents.", "Increasing the instance type size can help but is not always necessary; optimal sizing depends on load.", "Adding more data nodes is correct, as it can distribute load and enhance performance.", "Limiting the number of shards per index is wrong; it could hinder performance if the index has insufficient shards for its size."]
answers = ["Adding more data nodes"]
claude_answers = ["Limiting the number of shards per index"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "cda8b85e-371d-45de-b9e7-070ba3a2797c"
question = "What monitoring tool is specifically integrated with Amazon OpenSearch Service? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudTrail", "Amazon CloudWatch", "AWS X-Ray", "Amazon Inspector", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail tracks API calls but does not specifically monitor OpenSearch Service.", "Amazon CloudWatch is correct for monitoring metrics, logs, and alarms related to OpenSearch Service.", "AWS X-Ray is used for tracing requests but does not monitor OpenSearch Service specifically.", "Amazon Inspector is for security assessments and does not integrate directly with OpenSearch."]
answers = ["Amazon CloudWatch"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "15995f70-6b65-4b91-bcd3-c880e60e636d"
question = "Which access control model can be implemented to manage user permissions in Amazon OpenSearch Service? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Identity and Access Management (IAM) policies", "AWS Organizations service control policies", "Amazon CloudFront signed URLs", "AWS Shield advanced settings", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Identity and Access Management (IAM) policies are correct, allowing you to manage permissions based on users and roles.", "AWS Organizations service control policies apply at an organizational level and do not explicitly manage OpenSearch user permissions.", "Amazon CloudFront signed URLs are for distributing content securely, not related to OpenSearch permissions.", "AWS Shield advanced settings are for DDoS protection and do not pertain to user permissions."]
answers = ["AWS Identity and Access Management (IAM) policies"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "41844a47-ac87-49bf-a4e7-04d8fa3b7f77"
question = "How can you ensure high availability of your Amazon OpenSearch Service cluster? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Deploy in multiple availability zones", "Regularly backup your indices", "Increase the number of replicas", "Change the instance type frequently", "This is a bad question and does not have an objective answer."]
explanation = ["Deploy in multiple availability zones is correct as this distributes your cluster across different physical locations.", "Regularly backup your indices is important for data restoration but does not directly affect availability.", "Increase the number of replicas is correct as it ensures data is still accessible if one node fails.", "Change the instance type frequently is wrong since stability is more important than frequent changes."]
answers = ["Deploy in multiple availability zones", "Increase the number of replicas"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b57565c3-0f85-4851-af99-af9ddcf12463"
question = "Which type of query can be executed on Amazon OpenSearch Service to retrieve specific documents based on multiple fields? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Match query", "Bool query", "Range query", "Term query", "This is a bad question and does not have an objective answer."]
explanation = ["Match query retrieves documents based on full-text search but not multiple fields directly.", "Bool query is correct as it allows combination of multiple query conditions for complex searches.", "Range query focuses on numeric ranges and cannot combine multiple fields in the same manner.", "Term query is for exact matches on specific fields, but does not work with multiple conditions as effectively."]
answers = ["Bool query"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "59623403-3980-4a76-b96e-edcb4ad4c858"
question = "What is the default number of primary shards created when you create an index in Amazon OpenSearch Service? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["1", "2", "3", "5", "This is a bad question and does not have an objective answer."]
explanation = ["1 is incorrect; while it's a common misunderstanding, the default is not always this low.", "2 is wrong; however, it's close to the standard but not universally applicable.", "3 is not the default for all scenarios; it can depend on user configuration.", "5 is correct because OpenSearch defaults to 5 primary shards on a standard index creation."]
answers = ["5"]
alternative_answers = ["1"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "2157c6bf-4d99-47e8-8edc-a4a3423e78a3"
question = "Which of the following are use cases for Amazon EventBridge? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Building event-driven applications", "Centralizing logs from multiple accounts", "Managing stateful applications", "Creating RESTful APIs", "This is a bad question and does not have an objective answer."]
explanation = ["Building event-driven applications is correct because EventBridge facilitates the creation of scalable event-driven architectures.", "Centralizing logs from multiple accounts is incorrect because EventBridge is not primarily designed for logging purposes.", "Managing stateful applications is incorrect as EventBridge is more suited for event-driven rather than stateful architectures.", "Creating RESTful APIs is wrong because EventBridge does not directly help in creating APIs."]
answers = ["Building event-driven applications"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ba414e7b-552d-4392-bb25-7fb80c770caa"
question = "What is a primary advantage of using Amazon EventBridge? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Decoupling application components", "Synchronous execution of events", "Real-time data warehousing", "User interface customization", "This is a bad question and does not have an objective answer."]
explanation = ["Decoupling application components is correct as EventBridge allows different components to communicate without being tightly coupled, enhancing microservices architecture.", "Synchronous execution of events is incorrect because EventBridge is designed for asynchronous event processing.", "Real-time data warehousing is incorrect since EventBridge does not function as a data warehouse.", "User interface customization is not a feature of EventBridge."]
answers = ["Decoupling application components"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "44d87a82-7ea9-40ba-b0ff-a3a7edc12e13"
question = "What type of event can you publish to Amazon EventBridge? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Custom events", "API Gateway events", "HTTP events", "CloudFormation stack events", "This is a bad question and does not have an objective answer."]
explanation = ["Custom events are correct because EventBridge can process and route user-defined events.", "API Gateway events are incorrect as they do not represent the custom events that can be sent to EventBridge.", "HTTP events are not a specific type of event for EventBridge.", "CloudFormation stack events do not publish directly to EventBridge."]
answers = ["Custom events"]
claude_answers = ["Custom events", "API Gateway events", "CloudFormation stack events"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "55fe4ee9-8737-497f-bfe1-4eaa6c8b015c"
question = "When utilizing Amazon EventBridge, what is a useful feature for event filtering? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Event Pattern", "Retry Policy", "CloudWatch Metrics", "Cross-Region Events", "This is a bad question and does not have an objective answer."]
explanation = ["Event Pattern is correct because it enables filtering of events based on rules, determining which events should trigger specific targets.", "Retry Policy is incorrect as it relates to how EventBridge handles failed event delivery, not filtering.", "CloudWatch Metrics does not pertain to filtering events in EventBridge.", "Cross-Region Events is incorrect because it deals with event routing across regions, rather than filtering."]
answers = ["Event Pattern"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "00101b96-b8d0-48d1-a13a-db803ccd65b2"
question = "Which of the following best describes the role of targets in Amazon EventBridge? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["They define the source of events.", "They are responsible for processing the events.", "They determine the rules for event matching.", "They generate events on behalf of applications.", "This is a bad question and does not have an objective answer."]
explanation = ["They are responsible for processing the events is correct because targets in EventBridge are invoked based on event matches and do the work of handling them.", "They define the source of events is incorrect as sources are separate from targets.", "They determine the rules for event matching is wrong since this function is performed by event rules, not targets.", "They generate events on behalf of applications is incorrect because event generation is done by the services or applications themselves."]
answers = ["They are responsible for processing the events."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8880d646-0824-4765-8b04-2a94200dace3"
question = "Which AWS service can publish events to EventBridge without additional configuration? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Lambda", "AWS CloudTrail", "Amazon S3", "AWS Step Functions", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail is correct as it automatically sends API activity events to EventBridge without requiring additional setups.", "AWS Lambda does not automatically send events; it must be explicitly triggered.", "Amazon S3 sends events but requires additional configuration or triggers.", "AWS Step Functions need to be integrated specifically and do not have automatic publishing."]
answers = ["AWS CloudTrail"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f7dec726-0362-43f0-ba69-8a3ff494af59"
question = "What feature does Amazon EventBridge offer that helps in archiving events? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Event Archiving", "Event Replay", "Event Filtering", "Dead Letter Queue", "This is a bad question and does not have an objective answer."]
explanation = ["Event Archiving is correct because EventBridge can be configured to archive events after a defined time for future reference.", "Event Replay is incorrect since it is related to resending events rather than archiving them.", "Event Filtering does not relate to archiving but to managing which events to process.", "Dead Letter Queue is used for handling failed events rather than archiving."]
answers = ["Event Archiving"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "bf201d1a-b7ca-4c43-b5da-2af359b9ebd4"
question = "Which of the following are valid use cases for Amazon SNS? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Sending notifications to mobile devices", "Storing data in a database", "Sending messages between microservices", "Processing large datasets", "This is a bad question and does not have an objective answer."]
explanation = ["Sending notifications to mobile devices is correct because SNS can deliver messages directly to mobile endpoints.", "Storing data in a database is wrong because SNS is a messaging service, not a data storage solution.", "Sending messages between microservices is correct as SNS enables communication between services through pub/sub messaging.", "Processing large datasets is wrong as SNS is not designed for data processing."]
answers = ["Sending notifications to mobile devices", "Sending messages between microservices"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "36edefad-a6d6-40f9-ad46-a8281d2974a8"
question = "What features does Amazon SNS provide to ensure message delivery?"
good_bad_why = "Answers: [1,2]\n"
options = ["Automatic retries on message failure", "Message filtering", "Delivery to endpoints in a single region only", "Message encryption during transit", "This is a bad question and does not have an objective answer."]
explanation = ["Automatic retries on message failure is correct as SNS tries to deliver messages multiple times.", "Message filtering is correct as SNS allows you to filter messages based on attributes.", "Delivery to endpoints in a single region only is wrong since SNS supports cross-region message delivery.", "Message encryption during transit is correct as SNS secures messages sent over HTTPS."]
answers = ["Automatic retries on message failure", "Message filtering", "Message encryption during transit"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "cb12997a-a9f1-4b3e-91b7-838765b9e144"
question = "Which of the following endpoints can you subscribe to an Amazon SNS topic? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Lambda function", "Amazon SQS queue", "Amazon RDS database", "HTTP/S endpoints", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Lambda function is correct as you can invoke Lambda functions through SNS subscriptions.", "Amazon SQS queue is correct because you can send messages to SQS via SNS.", "Amazon RDS database is wrong since RDS is not a message endpoint for SNS.", "HTTP/S endpoints are correct as SNS can send messages to any HTTP/S endpoint."]
answers = ["AWS Lambda function", "Amazon SQS queue", "HTTP/S endpoints"]
claude_answers = ["HTTP/S endpoints", "AWS Lambda function"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c3226527-1945-42d2-8777-f3a316c8cd05"
question = "Which policy allows an Amazon SNS topic to send messages to an SQS queue?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Identity and Access Management (IAM) policy", "SQS access policy", "SNS access policy", "Lambda permissions", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Identity and Access Management (IAM) policy is incorrect as the specific policy for SQS is needed.", "SQS access policy is correct because it grants permissions to SNS from the SQS queue side.", "SNS access policy is wrong since SNS handles its own policies at the topic level.", "Lambda permissions are not directly related to sending messages to SQS."]
answers = ["SQS access policy"]
alternative_answers = ["SNS access policy", "SQS access policy"]
claude_answers = ["SNS access policy"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "22e7c76c-0e1d-47d0-84a1-1cb534f35399"
question = "What is the maximum message size for a message published to an Amazon SNS topic?"
good_bad_why = "Answers: [1,2]\n"
options = ["256 KB", "512 KB", "1 MB", "10 MB", "This is a bad question and does not have an objective answer."]
explanation = ["256 KB is correct as the maximum size limit for an SNS message is 256 KB.", "512 KB is wrong because it exceeds the maximum limit allowed.", "1 MB is also wrong due to the same reason.", "10 MB is incorrect as it greatly exceeds the limit."]
answers = ["256 KB"]
claude_answers = ["1 MB", "512 KB", "10 MB", "256 KB"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "4fd1d836-958c-4936-bd45-17b3e17995ab"
question = "Which of the following is a feature of Amazon SNS message delivery?"
good_bad_why = "Answers: [1,2]\n"
options = ["At-least-once delivery", "Ordered message delivery", "Message deduplication", "Guaranteed delivery", "This is a bad question and does not have an objective answer."]
explanation = ["At-least-once delivery is correct because SNS attempts to deliver messages multiple times if failures occur.", "Ordered message delivery is wrong since SNS does not guarantee the order of message delivery.", "Message deduplication is incorrect as SNS does not support it for standard topics.", "Guaranteed delivery is incorrect as there is no absolute guarantee for message delivery."]
answers = ["At-least-once delivery"]
alternative_answers = ["At-least-once delivery", "Guaranteed delivery"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0644a3e3-c1b0-473c-91de-0073106cbe89"
question = "What type of notification does Amazon SNS use for Mobile Push services?"
good_bad_why = "Answers: [1,2]\n"
options = ["Platform Application", "Notification Endpoint", "Message Queue", "Consumer Group", "This is a bad question and does not have an objective answer."]
explanation = ["Platform Application is correct because it represents the integration with mobile push services like APNS and FCM.", "Notification Endpoint is wrong as it refers to specific user devices rather than a push service integration.", "Message Queue is wrong as it is unrelated to mobile push notifications.", "Consumer Group is incorrect as it is a term used in streaming services like Kinesis."]
answers = ["Platform Application"]
alternative_answers = ["Platform Application", "Notification Endpoint"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8370b90b-a3dc-48fd-8831-d341d89dc0f6"
question = "In Amazon SNS, what is a benefit of using message filtering?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Reduce the number of messages sent to subscribers", "Ensure message integrity", "Increase message size", "Improve message visibility", "This is a bad question and does not have an objective answer."]
explanation = ["Reduce the number of messages sent to subscribers is correct as filtering helps only relevant messages reach subscribers.", "Ensure message integrity is incorrect since filtering does not guarantee data integrity.", "Increase message size is wrong as filtering does not affect message size.", "Improve message visibility is not applicable as filtering focuses on delivery rather than visibility."]
answers = ["Reduce the number of messages sent to subscribers"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "09d834a9-43cb-4d34-8cae-2f85c4dfc126"
question = "How can a user receive SMS notifications via Amazon SNS?"
good_bad_why = "Answers: [1,2]\n"
options = ["By subscribing an email endpoint", "By using a direct SMS endpoint", "By subscribing a phone number", "By connecting to an SNS API", "This is a bad question and does not have an objective answer."]
explanation = ["By subscribing a phone number is correct as users can directly subscribe their phone numbers to receive SMS notifications.", "By subscribing an email endpoint is wrong since emails do not translate to SMS notifications.", "By using a direct SMS endpoint is incorrect as the correct method involves phone number subscriptions.", "By connecting to an SNS API does not specifically lead to SMS notifications without a phone number subscription."]
answers = ["By subscribing a phone number"]
alternative_answers = ["By using a direct SMS endpoint", "By subscribing a phone number"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "dbf34527-5bb9-4361-86f7-9fcae35afbed"
question = "What is the primary difference between standard and FIFO (First-In-First-Out) SNS topics?"
good_bad_why = "Answers: [1,2]\n"
options = ["Messaging protocol", "Reliability of delivery", "Ordering of messages", "Message filtering capability", "This is a bad question and does not have an objective answer."]
explanation = ["Messaging protocol is incorrect as both use the same underlying protocol.", "Reliability of delivery is wrong as both types ensure at-least-once delivery.", "Ordering of messages is correct as FIFO topics maintain the order of messages.", "Message filtering capability is wrong as both types support filtering."]
answers = ["Ordering of messages"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ccc26d16-afa4-455f-81c4-8b3d16251255"
question = "Which of the following are benefits of using Amazon SQS? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Message durability", "Real-time processing", "Decoupling of application components", "Increased latency", "This is a bad question and does not have an objective answer."]
explanation = ["Message durability is correct because SQS stores messages redundantly across multiple Availability Zones.", "Real-time processing is wrong because SQS is designed for asynchronous message processing.", "Decoupling of application components is correct because SQS allows different services to communicate without being directly connected.", "Increased latency is wrong because SQS is designed to provide low-latency message delivery."]
answers = ["Message durability", "Decoupling of application components"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "cef4b4e9-6f6b-41c7-8079-f1a49e948739"
question = "What is the maximum message size allowed by Amazon SQS?"
good_bad_why = "Answers: [1,2]\n"
options = ["256 KB", "2 MB", "512 KB", "1 MB", "This is a bad question and does not have an objective answer."]
explanation = ["256 KB is correct as this is the maximum size for a single message in SQS.", "2 MB is wrong as it exceeds the message size limit.", "512 KB is wrong because it falls below the actual limit.", "1 MB is wrong since it is also below the set size."]
answers = ["256 KB"]
claude_answers = ["1 MB", "512 KB", "2 MB", "256 KB"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "515129c1-e82b-426f-b392-d2ea5600ad26"
question = "How can you ensure messages are consumed in a strictly ordered manner in Amazon SQS?"
good_bad_why = "Answers: [1,2]\n"
options = ["Using standard queues", "Using FIFO queues", "Using the delay queue feature", "Increased polling", "This is a bad question and does not have an objective answer."]
explanation = ["Using standard queues is wrong since they do not guarantee order.", "Using FIFO queues is correct as they maintain the exact order of message processing.", "Using the delay queue feature is wrong because it only delays the visibility of messages, not their order.", "Increased polling is wrong since it doesn't affect the ordering guarantee."]
answers = ["Using FIFO queues"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f5a8f568-ee87-4b2f-85dd-d67ea7b33e64"
question = "Which of the following options allows you to avoid message duplication in Amazon SQS? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Using message groups", "Setting delay seconds to zero", "Defining a maximum message size", "Implementing message deduplication ID", "This is a bad question and does not have an objective answer."]
explanation = ["Using message groups is wrong because they only preserve order, not deduplication.", "Setting delay seconds to zero does not prevent duplication.", "Defining a maximum message size is unrelated to duplication.", "Implementing message deduplication ID is correct since it helps in avoiding duplicates in FIFO queues."]
answers = ["Using message groups", "Implementing message deduplication ID"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c2768176-8177-4a2f-9541-93c2c9f2f652"
question = "Which Amazon SQS feature helps you to manage retry logic for message processing?"
good_bad_why = "Answers: [1,2]\n"
options = ["Long polling", "Dead-letter queues", "Visibility timeout", "Message retention period", "This is a bad question and does not have an objective answer."]
explanation = ["Long polling is wrong as it only affects how messages are retrieved.", "Dead-letter queues are correct because they allow you to handle failed message processing attempts.", "Visibility timeout is incorrect as it determines how long a message remains invisible after being retrieved.", "Message retention period is wrong since it defines how long messages are stored before being deleted."]
answers = ["Dead-letter queues"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8e8ce950-4157-42c2-807d-55342de9a23e"
question = "What kind of queue allows for multiple consumers to process messages without concerns about message order?"
good_bad_why = "Answers: [1,2]\n"
options = ["FIFO Queue", "Standard Queue", "Delay Queue", "Scheduled Queue", "This is a bad question and does not have an objective answer."]
explanation = ["FIFO Queue is wrong as it guarantees strict message order.", "Standard Queue is correct because it allows multiple consumers to process messages independently.", "Delay Queue is incorrect since it only delays message visibility.", "Scheduled Queue is not a type of queue offered by Amazon SQS."]
answers = ["Standard Queue"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e8f5f3cc-a3ff-4514-9eb5-43a3f73080b1"
question = "What happens when the visibility timeout of a message expires in Amazon SQS?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["The message is deleted from the queue", "The message becomes visible again for processing", "The message is sent to a dead-letter queue", "The message is permanently archived", "This is a bad question and does not have an objective answer."]
explanation = ["The message is deleted from the queue is incorrect because expiration means the message will reappear if not processed.", "The message becomes visible again for processing is correct because it allows for another attempt at processing.", "The message is sent to a dead-letter queue is incorrect unless configured specifically for failures.", "The message is permanently archived is wrong because SQS does not archive messages."]
answers = ["The message becomes visible again for processing"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "91a92060-99ed-4ebc-a21b-d555c2b0492d"
question = "What's the primary use case for Amazon SQS?"
good_bad_why = "Answers: [1,2]\n"
options = ["Real-time data processing", "Microservices communication", "Database transactions", "File storage", "This is a bad question and does not have an objective answer."]
explanation = ["Real-time data processing is wrong as SQS is asynchronous.", "Microservices communication is correct because SQS is ideal for loosely-coupled services to communicate.", "Database transactions are incorrect since SQS does not handle such processes.", "File storage is incorrect as SQS is not designed for file storage."]
answers = ["Microservices communication"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "be2cc840-f40f-443c-b148-413b4fac6fc7"
question = "What will happen if a message is not deleted from the queue after processing in Amazon SQS?"
good_bad_why = "Answers: [1,2]\n"
options = ["The message will be lost", "The message will remain in the queue indefinitely", "The message will trigger an alert", "The message will be sent to a dead-letter queue", "This is a bad question and does not have an objective answer."]
explanation = ["The message will be lost is incorrect because it remains in the queue.", "The message will remain in the queue indefinitely is correct unless the retention period is reached.", "The message will trigger an alert is wrong as SQS does not provide that functionality.", "The message will be sent to a dead-letter queue is incorrect unless specifically configured after multiple failed attempts."]
answers = ["The message will remain in the queue indefinitely"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "353be2f7-a892-4c08-b394-bc88968584f0"
question = "Which Amazon SQS feature allows you to control how long the message is retained in the queue?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Max message size", "Visibility timeout", "Message retention period", "Long polling", "This is a bad question and does not have an objective answer."]
explanation = ["Max message size is incorrect since it only controls the size of individual messages.", "Visibility timeout is wrong as it affects message visibility duration, not retention.", "Message retention period is correct because it specifies how long messages can stay in the queue before deletion.", "Long polling does not apply to retention and is intended for message retrieval."]
answers = ["Message retention period"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "e87d232f-547a-4201-bea6-7a6e734d8e32"
question = "Which of the following are true about AWS Cost and Usage Reports? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["They provide a detailed breakdown of spending down to the resource level.", "They only include costs associated with Amazon EC2 and Amazon S3.", "They can be configured to be delivered to an Amazon S3 bucket daily or monthly.", "They cannot be modified once created.", "This is a bad question and does not have an objective answer."]
explanation = ["They only include costs associated with Amazon EC2 and Amazon S3 is wrong because the reports include costs from all AWS services.", "They can be configured to be delivered to an Amazon S3 bucket daily or monthly is correct as you can set the delivery frequency during configuration.", "They cannot be modified once created is incorrect because reports can be updated to include additional resources or changes."]
answers = ["They provide a detailed breakdown of spending down to the resource level.", "They can be configured to be delivered to an Amazon S3 bucket daily or monthly."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "809dbb34-2924-426d-818e-2b7128eaa106"
question = "What is the maximum retention period for AWS Cost and Usage Reports stored in Amazon S3?"
good_bad_why = "Answers: [1,2]\n"
options = ["18 months", "12 months", "24 months", "36 months", "This is a bad question and does not have an objective answer."]
explanation = ["12 months is incorrect because the retention period is longer than that.", "24 months is incorrect because the maximum is 18 months as per AWS documentation.", "36 months is incorrect; AWS does not provide such long retention for these reports."]
answers = ["18 months"]
alternative_answers = ["36 months"]
claude_answers = ["36 months"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ce4d9294-e305-435b-8d1b-b1b5f80208ab"
question = "Which service can be used in conjunction with AWS Cost and Usage Reports to visualize spending patterns?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudTrail", "Amazon QuickSight", "AWS Config", "AWS Lambda", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail is incorrect as it is focused on tracking API calls.", "AWS Config is not designed for cost visualization.", "AWS Lambda does not provide visualization capabilities."]
answers = ["Amazon QuickSight"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "4afe0f6d-2d1e-487b-823c-fab45f12b6f5"
question = "What format are AWS Cost and Usage Reports delivered in by default?"
good_bad_why = "Answers: [1,2]\n"
options = ["JSON", "CSV", "XML", "Parquet", "This is a bad question and does not have an objective answer."]
explanation = ["JSON is incorrect as reports are not delivered in this format.", "CSV is correct; it is the default format for AWS Cost and Usage Reports.", "XML is wrong because this is not one of the default supported formats.", "Parquet is available but not the default."]
answers = ["CSV"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "afcdfe53-508b-49ed-ab41-3c98134ca8d9"
question = "Which IAM permissions are required to access AWS Cost and Usage Reports?"
good_bad_why = "Answers: [1,2]\n"
options = ["Read access to the S3 bucket where reports are stored", "Write access to the S3 bucket", "No permissions required", "S3 delete permissions", "This is a bad question and does not have an objective answer."]
explanation = ["Write access to the S3 bucket is incorrect; only read access is needed.", "No permissions required is inaccurate; access to reports requires certain permissions.", "S3 delete permissions are not necessary for simply accessing reports."]
answers = ["Read access to the S3 bucket where reports are stored"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c5300663-2c84-4ecb-9a4b-6c9bdc4316c8"
question = "When configuring an AWS Cost and Usage Report, which of the following attributes can you specify?"
good_bad_why = "Answers: [1,2]\n"
options = ["The time granularity of the data", "The specific regions to include", "The users to include", "Integration with AWS Budgets", "This is a bad question and does not have an objective answer."]
explanation = ["The specific regions to include is incorrect as the report covers all regions by default.", "The users to include is not a configurable attribute.", "Integration with AWS Budgets is not a configuration option within the report service."]
answers = ["The time granularity of the data"]
alternative_answers = ["The time granularity of the data", "The specific regions to include", "Integration with AWS Budgets"]
claude_answers = ["The time granularity of the data", "The specific regions to include", "The users to include", "Integration with AWS Budgets"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d8a65fd7-613d-469a-933e-cb0a9972104b"
question = "Which of the following is a benefit of using AWS Cost and Usage Reports over AWS Billing Dashboard?"
good_bad_why = "Answers: [1,2]\n"
options = ["In-depth analysis over longer periods", "Real-time cost management", "Simplified billing with one click", "Automatic cost notifications", "This is a bad question and does not have an objective answer."]
explanation = ["Real-time cost management is incorrect as reports are not real-time.", "Simplified billing with one click is not a feature of Cost and Usage Reports.", "Automatic cost notifications are not directly related to the report feature."]
answers = ["In-depth analysis over longer periods"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1afe438b-c213-4cd8-9741-7df1989e1892"
question = "How frequently can you set up the delivery of AWS Cost and Usage Reports to your S3 bucket?"
good_bad_why = "Answers: [1,2]\n"
options = ["Hourly", "Daily", "Weekly", "Monthly", "This is a bad question and does not have an objective answer."]
explanation = ["Hourly is incorrect as you cannot set that frequency.", "Weekly is also not an option; AWS provides daily or monthly frequency."]
answers = ["Daily", "Monthly"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9d5ee2c6-fc95-4b3c-bbda-5957d708e55f"
question = "Which method can be used to analyze AWS Cost and Usage Reports for cost optimization?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Trusted Advisor", "AWS Support Center", "AWS Glue", "Amazon Athena", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Trusted Advisor provides recommendations but is not used for direct analysis.", "AWS Support Center is for support tasks, not analysis.", "AWS Glue is for ETL tasks but does not directly analyze reports."]
answers = ["Amazon Athena"]
alternative_answers = ["Amazon Athena", "AWS Trusted Advisor"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ab60e07c-ee88-4fd6-9a21-3ffed4d85abe"
question = "If you need to calculate your total AWS spend for the month using Cost and Usage Reports, which action should you take?"
good_bad_why = "Answers: [1,2]\n"
options = ["Manually calculate using spreadsheet tools", "Use Amazon QuickSight for analysis", "Export to AWS Glue for further processing", "Use a custom SQL query with Amazon Athena", "This is a bad question and does not have an objective answer."]
explanation = ["Manually calculate using spreadsheet tools can be accurate but is not the most efficient.", "Use Amazon QuickSight for analysis is valid, but using Athena is more direct for SQL actions.", "Export to AWS Glue is unnecessary if you directly query the data."]
answers = ["Use a custom SQL query with Amazon Athena"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1ee9012b-34c8-42da-9884-0f063eaf2b82"
question = "Which two features of AWS Cost Explorer can help identify cost trends over time? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Cost and Usage Reports", "Forecasting", "Budget alerts", "Cost allocation tags", "This is a bad question and does not have an objective answer."]
explanation = ["Cost and Usage Reports is wrong because it provides detailed billing but doesn't show trends in the UI.", "Forecasting is correct because it allows you to predict future costs based on historical data.", "Budget alerts is wrong because it notifies you but doesn't directly provide cost trends.", "Cost allocation tags is correct because it helps you categorize and view costs by tags, allowing for analysis of trends based on resource usage."]
answers = ["Forecasting", "Cost allocation tags"]
alternative_answers = ["Cost and Usage Reports", "Forecasting"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5f7fd12a-a154-4b6b-94c7-a8893a1a9958"
question = "How can you analyze the cost of specific services using AWS Cost Explorer?"
good_bad_why = "Answers: [1,2]\n"
options = ["By selecting filters for service in the Cost Explorer", "By exporting data to Excel", "By using AWS Budgets", "By analyzing the tags applied to EC2 instances", "This is a bad question and does not have an objective answer."]
explanation = ["By selecting filters for service in the Cost Explorer is correct because it allows you to isolate costs for particular services.", "By exporting data to Excel is wrong because while it can help you analyze costs, it doesn't isolate services in the Cost Explorer.", "By using AWS Budgets is wrong because it is designed for tracking costs and use against set budgets, not specific analysis.", "By analyzing the tags applied to EC2 instances is wrong because it refers to resource identification rather than cost analysis in Cost Explorer."]
answers = ["By selecting filters for service in the Cost Explorer"]
alternative_answers = ["By selecting filters for service in the Cost Explorer", "By exporting data to Excel"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "eed2e09e-66f4-4529-83e6-25626f511dc5"
question = "What feature in AWS Cost Explorer enables you to see your usage patterns and understand where you can optimize costs?"
good_bad_why = "Answers: [1,2]\n"
options = ["Cost anomaly detection", "Usage reports", "Forecasting", "Daily and monthly cost breakdowns", "This is a bad question and does not have an objective answer."]
explanation = ["Cost anomaly detection is wrong because it alerts about unexpected usage, not detailed patterns.", "Usage reports are correct as they provide detailed views of your service usage over time.", "Forecasting is wrong as it predicts future costs but doesn't necessarily show usage patterns.", "Daily and monthly cost breakdowns is correct as it allows you to see how usage impacts costs over time."]
answers = ["Usage reports", "Daily and monthly cost breakdowns"]
claude_answers = ["Usage reports", "Forecasting"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d12f724b-f998-4672-81df-4a2aad640f94"
question = "What can you do within AWS Cost Explorer to compare monthly spending across different accounts in an organization?"
good_bad_why = "Answers: [1,2]\n"
options = ["Use AWS Budgets", "Use the 'Linked Accounts' filter", "Review Cost Allocation Tags", "Set up a consolidated billing report", "This is a bad question and does not have an objective answer."]
explanation = ["Use AWS Budgets is wrong because while it tracks costs, it doesn't inherently compare across accounts in Cost Explorer.", "Use the 'Linked Accounts' filter is correct because it allows you to analyze costs for each linked account.", "Review Cost Allocation Tags is wrong because tags help categorize costs but don't enable direct comparison across accounts in Cost Explorer.", "Set up a consolidated billing report is wrong because it tracks total costs but isn't part of Cost Explorer directly."]
answers = ["Use the 'Linked Accounts' filter"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ee364832-f5ed-4279-959f-d9b7508874fa"
question = "In AWS Cost Explorer, which function would you use to predict future costs based on historical data?"
good_bad_why = "Answers: [1,2]\n"
options = ["Forecasting", "Cost Allocation Tags", "Anomaly Detection", "Usage Patterns", "This is a bad question and does not have an objective answer."]
explanation = ["Forecasting is correct because it provides predictions based on existing data.", "Cost Allocation Tags is wrong because it categorizes costs but doesn't predict future behavior.", "Anomaly Detection is wrong as it highlights unexpected spending, not forecasting.", "Usage Patterns provides detailed insights but does not predict future costs."]
answers = ["Forecasting"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e1ac9166-b74f-47c7-bb3a-2fffc2b0d275"
question = "When using AWS Cost Explorer, what does a cost anomaly indicate?"
good_bad_why = "Answers: [1,2]\n"
options = ["Unexpected increase in spending", "Decrease in reserved instance usage", "Increase in service usage", "Unutilized resources detected", "This is a bad question and does not have an objective answer."]
explanation = ["Unexpected increase in spending is correct as it suggests an unusual change in your cost behavior.", "Decrease in reserved instance usage is wrong because it's not indicated directly by cost anomalies.", "Increase in service usage is wrong because it doesn't necessarily mean a cost anomaly if it's expected.", "Unutilized resources detected is wrong as it doesn't represent a monetary anomaly in Cost Explorer."]
answers = ["Unexpected increase in spending"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "34596e67-5129-47ee-bbba-1aef24cb1780"
question = "Which AWS Cost Explorer feature helps create visual representations of cost data?"
good_bad_why = "Answers: [1,2]\n"
options = ["Charts and graphs", "Detailed Billing Reports", "Cost allocation tags", "AWS Budgets", "This is a bad question and does not have an objective answer."]
explanation = ["Charts and graphs is correct as it allows you to visualize spending trends.", "Detailed Billing Reports is wrong because it provides a raw data format, not visualizations.", "Cost allocation tags is wrong because they help in categorizing costs, not visual representation.", "AWS Budgets is wrong as it provides notifications rather than visualization of costs."]
answers = ["Charts and graphs"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f6c28916-4194-4dab-b493-744dde929b42"
question = "What is one benefit of enabling Cost Explorer's 'Cost Allocation Tags' feature?"
good_bad_why = "Answers: [1,2]\n"
options = ["It allows for automatic reporting", "It helps in more granular cost analysis", "It reduces overall AWS costs", "It minimizes CloudFormation template complexities", "This is a bad question and does not have an objective answer."]
explanation = ["It allows for automatic reporting is wrong because Cost Allocation Tags assist with categorization, not automation.", "It helps in more granular cost analysis is correct as it enables specific reporting on tagged resources.", "It reduces overall AWS costs is wrong because tagging doesn't inherently lower costs.", "It minimizes CloudFormation template complexities is wrong as tags are unrelated to CloudFormation."]
answers = ["It helps in more granular cost analysis"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a46df8fd-55f3-4f39-a98f-86f9bf3370ff"
question = "What type of data visualization does AWS Cost Explorer provide to track spending trends?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Heat maps", "Line and bar charts", "Pie charts", "3D graphs", "This is a bad question and does not have an objective answer."]
explanation = ["Heat maps is wrong as AWS Cost Explorer does not use this type of visualization.", "Line and bar charts is correct as it visualizes spending over time, very effectively.", "Pie charts is wrong as AWS Cost Explorer does not rely on this format.", "3D graphs is wrong because AWS Cost Explorer focuses on simplicity rather than complex visualizations."]
answers = ["Line and bar charts"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "a006e913-1b05-4342-9140-a6219137b497"
question = "What would be the first step to identify unexpected costs using AWS Cost Explorer?"
good_bad_why = "Answers: [1,2]\n"
options = ["Review AWS Budgets", "Set up a custom report", "Use cost anomaly detection", "Examine monthly budgets", "This is a bad question and does not have an objective answer."]
explanation = ["Review AWS Budgets is wrong because it shows budgeted versus actual but not unexpected anomalies directly.", "Set up a custom report is wrong as it will not specifically identify unexpected costs without first detecting anomalies.", "Use cost anomaly detection is correct as it highlights costs that deviate from expected trends.", "Examine monthly budgets is wrong because it provides insights into spending but not anomaly detection."]
answers = ["Use cost anomaly detection"]
claude_answers = ["Set up a custom report"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b3dd5962-e79a-4d98-8ef0-c8ccdbabb24b"
question = "Which of the following are benefits of using AWS Savings Plans? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Cost savings compared to on-demand pricing", "Increased data transfer speeds", "Flexibility to change usage types without losing discount", "Automatic scaling of reserved instances", "This is a bad question and does not have an objective answer."]
explanation = ["Increased data transfer speeds is wrong because Savings Plans do not directly affect data transfer speeds.", "Automatic scaling of reserved instances is incorrect as Savings Plans provide a flexible pricing model but do not automatically scale any instances."]
answers = ["Cost savings compared to on-demand pricing", "Flexibility to change usage types without losing discount"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "fc60b4e4-4258-4633-a7f6-bedc9456dda9"
question = "Which Savings Plans provide the greatest flexibility in terms of instance types? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Compute Savings Plans", "EC2 Instance Savings Plans", "Standard Savings Plans", "Reserved Instance Savings Plans", "This is a bad question and does not have an objective answer."]
explanation = ["EC2 Instance Savings Plans are specific to instance families within a region, thus offering less flexibility.", "Standard Savings Plans are misunderstood; they do not provide the maximum flexibility compared to Compute Savings Plans."]
answers = ["Compute Savings Plans"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "20675d72-d9cd-4db7-90e2-81e3369c0363"
question = "When should you consider using Savings Plans over reserved instances? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["When you require flexibility in changing instance types", "When you have a very stable usage pattern", "When you want to lock in pricing for a specific instance", "When using only EC2 instances", "This is a bad question and does not have an objective answer."]
explanation = ["When using only EC2 instances is a limitation since Savings Plans can be beneficial beyond just EC2.", "When you have a very stable usage pattern is not accurate, as reserved instances serve that purpose better."]
answers = ["When you require flexibility in changing instance types"]
claude_answers = ["When you have a very stable usage pattern"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "24b255f4-e5ae-4750-a29e-54ad2798d32b"
question = "Which of the following scenarios would best benefit from EC2 Instance Savings Plans? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["A startup with unpredictable workloads", "A company with predictable usage of a specific instance family", "An organization using multiple AWS services", "A development team frequently changing instance types", "This is a bad question and does not have an objective answer."]
explanation = ["A development team frequently changing instance types would benefit from Compute Savings Plans, not EC2 Instance Savings Plans.", "A startup with unpredictable workloads is not ideal for a commitment-based approach like Savings Plans."]
answers = ["A company with predictable usage of a specific instance family"]
claude_answers = ["B", "A company with predictable usage of a specific instance family"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "13421cbd-16b8-4b20-be73-cec59b62d1b1"
question = "What is the minimum commitment period for AWS Savings Plans? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["1 month", "1 year", "3 years", "5 years", "This is a bad question and does not have an objective answer."]
explanation = ["1 month is incorrect as Savings Plans require a minimum commitment period.", "5 years is also not an option; the maximum commitment is three years."]
answers = ["1 year"]
claude_answers = ["1 year", "3 years"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "31ac5e4a-2899-4bb8-a189-c9078f9a9a56"
question = "How does the capacity reservation work with EC2 Instance Savings Plans? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["It automatically reserves capacity for all resources", "It guarantees capacity for a specified instance type", "It does not provide capacity reservation", "It is only applicable when using on-demand instances", "This is a bad question and does not have an objective answer."]
explanation = ["It automatically reserves capacity for all resources is incorrect because that is not how capacity works.", "It is only applicable when using on-demand instances is misleading, as Savings Plans can apply to both on-demand and reserved instances."]
answers = ["It does not provide capacity reservation"]
alternative_answers = ["It guarantees capacity for a specified instance type"]
claude_answers = ["It guarantees capacity for a specified instance type"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6d1d6176-ee4e-464c-b439-ebe48e33711c"
question = "Which statement is true when using AWS Savings Plans? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["You cannot switch from a standard to a compute savings plan", "You can apply any reserved instance discount to Savings Plans", "Savings Plans automatically adjust cost to match your usage", "You can combine savings plans and reserved instances for additional discounts", "This is a bad question and does not have an objective answer."]
explanation = ["You can apply any reserved instance discount to Savings Plans is incorrect; they are separate mechanisms.", "You cannot switch from a standard to a compute savings plan is misleading, as they serve different purposes in pricing."]
answers = ["You can combine savings plans and reserved instances for additional discounts"]
alternative_answers = ["Savings Plans automatically adjust cost to match your usage"]
claude_answers = ["Savings Plans automatically adjust cost to match your usage"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "babfbdef-1534-4466-9b9f-8499bf4a8b72"
question = "What happens if you do not utilize the amount covered by your Savings Plans? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["You lose the discount entirely", "You can carry it over to the next month", "Unused commitment will not roll over to future periods", "AWS credits you for unused commitment", "This is a bad question and does not have an objective answer."]
explanation = ["You can carry it over to the next month is incorrect since Savings Plans do not allow for carry-overs.", "AWS credits you for unused commitment is misleading, as AWS does not provide refunds for unused commitments."]
answers = ["Unused commitment will not roll over to future periods"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "62012052-a741-41a3-9bf8-f1c2e61c3f85"
question = "Which types of services are eligible for AWS Savings Plans? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Only EC2", "EC2, Lambda, and Fargate", "Any AWS service", "All database services including RDS", "This is a bad question and does not have an objective answer."]
explanation = ["Only EC2 is too limiting, as Savings Plans apply to a broader range.", "All database services including RDS is incorrect as Savings Plans are not universally applicable to all services."]
answers = ["EC2, Lambda, and Fargate"]
alternative_answers = ["Lambda", "and Fargate", "EC2"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e8c22d93-91ae-4b1b-9f0b-3c34b0217994"
question = "What is a key consideration when purchasing AWS Savings Plans? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["The expected growth of your AWS usage", "The current discount on on-demand pricing", "The existing number of reserved instances", "How much free tier credits you have", "This is a bad question and does not have an objective answer."]
explanation = ["How much free tier credits you have is irrelevant for Savings Plans since they are based on usage and commitment.", "The current discount on on-demand pricing is considered, but is not as critical as understanding expected growth."]
answers = ["The expected growth of your AWS usage"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "845d8c31-aa6d-475d-aa82-ae269b8f61cb"
question = "Which of the following are benefits of using Auto Scaling in AWS? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Improved reliability and availability", "Higher monthly billing costs", "Automatic instance replacement", "Manual scaling actions required", "This is a bad question and does not have an objective answer."]
explanation = ["Improved reliability and availability is correct because Auto Scaling helps maintain application performance by ensuring that the right number of instances is running.", "Higher monthly billing costs is wrong because Auto Scaling can help reduce costs by optimizing resource usage.", "Automatic instance replacement is correct as Auto Scaling will automatically replace unhealthy instances to maintain the desired count.", "Manual scaling actions required is wrong since Auto Scaling is designed to automate the scaling process."]
answers = ["Improved reliability and availability", "Automatic instance replacement"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a9f7fb89-b0c3-4dad-9c5e-ce24ffb26907"
question = "What is the purpose of a scaling policy in AWS Auto Scaling?"
good_bad_why = "Answers: [1,2]\n"
options = ["To define the conditions under which instances are launched or terminated", "To manually adjust the number of instances in an Auto Scaling group", "To enable notifications for scaling activities", "To provide a dashboard for monitoring scaling events", "This is a bad question and does not have an objective answer."]
explanation = ["To define the conditions under which instances are launched or terminated is correct because a scaling policy defines when to add or remove instances.", "To manually adjust the number of instances in an Auto Scaling group is wrong since scaling policies automate this process.", "To enable notifications for scaling activities is wrong because this is done through CloudWatch alarms, not scaling policies.", "To provide a dashboard for monitoring scaling events is incorrect; this is done through the AWS Management Console, CloudWatch, or other monitoring tools."]
answers = ["To define the conditions under which instances are launched or terminated"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "dc8e556a-6a11-4824-a820-d3f99f1771ca"
question = "When configuring an Auto Scaling group, which notification types can you set up to monitor scaling events? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Launch notifications", "Termination notifications", "Backup notifications", "Scaling activity notifications", "This is a bad question and does not have an objective answer."]
explanation = ["Launch notifications is correct because you can set notifications to be triggered when instances are launched.", "Termination notifications is correct because you receive notifications when instances are terminated.", "Backup notifications is incorrect; Auto Scaling does not provide backup notifications.", "Scaling activity notifications is incorrect since it refers broadly to monitoring and status updates, which are not direct notification types in Auto Scaling."]
answers = ["Launch notifications", "Termination notifications"]
claude_answers = ["Termination notifications", "Scaling activity notifications", "Launch notifications"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "969529ea-345c-48cb-9fd3-d5c07b3c61aa"
question = "Which of the following best describes the 'Minimum' and 'Desired' capacity settings in an Auto Scaling group?"
good_bad_why = "Answers: [1,2]\n"
options = ["Minimum capacity is the least number of instances maintained, desired capacity is the ideal number based on demand", "Minimum capacity is the ideal number based on demand, desired capacity is the least number of instances maintained", "Minimum capacity is the actual count of running instances, desired capacity is a recommendation", "Minimum capacity is a one-time configuration, while desired capacity can change dynamically", "This is a bad question and does not have an objective answer."]
explanation = ["Minimum capacity is the least number of instances maintained, desired capacity is the ideal number based on demand is correct since it summarizes the functionality and intent of both capacities.", "Minimum capacity is the ideal number based on demand is incorrect because it is actually the lower bound for instance count.", "Minimum capacity is the actual count of running instances, desired capacity is a recommendation is wrong as desired capacity is an active setting.", "Minimum capacity is a one-time configuration, while desired capacity can change dynamically is misleading as both can change based on scaling policies."]
answers = ["Minimum capacity is the least number of instances maintained, desired capacity is the ideal number based on demand"]
alternative_answers = ["Minimum capacity is the least number of instances maintained", "desired capacity is the ideal number based on demand"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b67e9aae-da50-469f-a94a-bcae9d851d48"
question = "Auto Scaling can be integrated with which AWS service to provide custom metrics for scaling decisions?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Lambda", "Amazon RDS", "Amazon CloudWatch", "AWS Direct Connect", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Lambda is incorrect; while you can trigger Lambda functions based on events, it does not provide metrics for scaling.", "Amazon RDS does not provide scaling metrics for Auto Scaling group operations.", "Amazon CloudWatch is correct because it allows you to create and monitor custom metrics that trigger scaling actions.", "AWS Direct Connect is irrelevant to scaling decisions as it pertains to connectivity."]
answers = ["Amazon CloudWatch"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "cdf2c8db-f7cc-41fe-8bf8-16e65ef6553c"
question = "What is the effect of enabling 'Health Checks' on an Auto Scaling group?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Instances will be monitored and automatically replaced if unhealthy", "Instances will be billed at a lower rate", "Instances will terminate after a fixed period regardless of health", "Instances will be prevented from being launched during maintenance", "This is a bad question and does not have an objective answer."]
explanation = ["Instances will be monitored and automatically replaced if unhealthy is correct, as this is one of the primary functions of health checks.", "Instances will be billed at a lower rate is incorrect; health checks do not affect billing.", "Instances will terminate after a fixed period regardless of health is incorrect; they are only terminated based on health assessments.", "Instances will be prevented from being launched during maintenance is not a function of health checks."]
answers = ["Instances will be monitored and automatically replaced if unhealthy"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "31117de3-18d9-45f5-bded-426d94609508"
question = "Which component of Auto Scaling is responsible for executing scaling policies based on CloudWatch alarms?"
good_bad_why = "Answers: [1,2]\n"
options = ["Auto Scaling groups", "Launch configurations", "Scaling plans", "Scaling policies", "This is a bad question and does not have an objective answer."]
explanation = ["Auto Scaling groups is incorrect as they manage collections of instances but do not execute policies directly.", "Launch configurations are incorrect; they specify instance setup, not scaling actions.", "Scaling plans are incorrect; while they can help define overall scaling strategy, execution is through scaling policies.", "Scaling policies is correct since they determine how to scale based on the conditions set by CloudWatch alarms."]
answers = ["Scaling policies"]
alternative_answers = ["Auto Scaling groups"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1e60d556-ae9a-40aa-812e-3d6dd45630cb"
question = "In which situation would you likely use a 'Scheduled Scaling' action in AWS Auto Scaling?"
good_bad_why = "Answers: [1,2]\n"
options = ["To scale in response to real-time workload changes", "To ensure a consistent number of healthy instances at all times", "To predict and adjust capacity based on known traffic patterns", "To reduce costs by terminating idle instances during the night", "This is a bad question and does not have an objective answer."]
explanation = ["To scale in response to real-time workload changes is incorrect; that is better managed by dynamic scaling actions.", "To ensure a consistent number of healthy instances is not the purpose of scheduled scaling.", "To predict and adjust capacity based on known traffic patterns is correct as scheduled scaling is ideal for such known patterns.", "To reduce costs by terminating idle instances during the night is not a primary function of scheduled scaling, although it may provide some cost efficiency."]
answers = ["To predict and adjust capacity based on known traffic patterns"]
alternative_answers = ["To reduce costs by terminating idle instances during the night", "To predict and adjust capacity based on known traffic patterns"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e92edd50-37eb-4031-bca2-050b58496409"
question = "How does AWS Auto Scaling determine the number of instances to launch or terminate based on metrics?"
good_bad_why = "Answers: [1,2]\n"
options = ["Based on the average CPU utilization of all instances in the group", "Through manual intervention by a system administrator", "By analyzing the total cost of running instances", "Using predictive analytics to forecast future needs", "This is a bad question and does not have an objective answer."]
explanation = ["Based on the average CPU utilization of all instances in the group is correct, as this is often a metric used for scaling decisions.", "Through manual intervention by a system administrator is incorrect; Auto Scaling is designed to automate this.", "By analyzing the total cost of running instances is not a metric used for scaling.", "Using predictive analytics to forecast future needs is incorrect as Auto Scaling typically reacts to current metrics."]
answers = ["Based on the average CPU utilization of all instances in the group"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "48bbd141-4a7a-45df-bf62-5c8b7e87b5d2"
question = "What happens if an Auto Scaling group fails to launch new instances when scaling out?"
good_bad_why = "Answers: [1,2]\n"
options = ["The Auto Scaling group automatically resolves the issue", "The scaling activity is marked as 'In Progress' forever", "The Auto Scaling group will perform a complete health check", "The scaling activity fails and can be retried based on defined cooldown periods", "This is a bad question and does not have an objective answer."]
explanation = ["The Auto Scaling group automatically resolves the issue is incorrect; failures may require manual investigation.", "The scaling activity is marked as 'In Progress' forever is misleading; it should eventually fail or complete.", "The Auto Scaling group will perform a complete health check is not necessarily true in this context.", "The scaling activity fails and can be retried based on defined cooldown periods is correct, as Auto Scaling can retry based on configuration settings."]
answers = ["The scaling activity fails and can be retried based on defined cooldown periods"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9eeecfe9-bfb1-4da3-ad45-5ef604ee75f6"
question = "Which of the following can be used to limit the maximum number of EC2 instances an AWS account can run? (Select 2)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Service Quotas", "IAM Policies", "EC2 Instance Types", "EC2 Launch Templates", "This is a bad question and does not have an objective answer."]
explanation = ["Service Quotas can define limits on certain services including EC2 instances.", "IAM Policies do not directly limit the number of instances; they control permissions.", "EC2 Instance Types define the specifications of instances but do not impose limits.", "EC2 Launch Templates assist in deployment but do not limit instance count."]
answers = ["Service Quotas", "EC2 Launch Templates"]
alternative_answers = ["IAM Policies", "Service Quotas"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "e1f9db72-fde6-40b5-85df-5c699b2cdb22"
question = "What feature allows you to automatically adjust the number of EC2 instances in your application? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Auto Scaling", "Elastic Load Balancing", "CloudFormation", "EC2 instance types", "This is a bad question and does not have an objective answer."]
explanation = ["Auto Scaling is designed specifically for the automatic adjustment of EC2 instances based on load and traffic patterns."]
answers = ["Auto Scaling"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1b1f82a6-566e-439e-aa91-40f5b2760928"
question = "Which of the following storage options cannot be attached directly to an EC2 instance? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["EBS Volume", "Instance Store", "Amazon S3", "Amazon EFS", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon S3 is an object storage service and does not attach directly to EC2 instances unlike the other options."]
answers = ["Amazon S3"]
claude_answers = ["Amazon EFS", "Amazon S3"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "664a0d8a-97b9-46df-aa25-7254958ea635"
question = "Which service will allow you to monitor CPU utilization of your EC2 instances? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["AWS CloudTrail", "Amazon CloudWatch", "AWS Config", "Amazon Inspector", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon CloudWatch provides metrics for resources, including CPU utilization, enabling you to monitor your EC2 instances."]
answers = ["Amazon CloudWatch"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "6d5eea72-1628-4e60-b5e0-843ae2f648a3"
question = "What is the purpose of EC2 instance metadata? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To store data persistently", "To provide instance-specific information", "To manage permissions", "To handle network traffic", "This is a bad question and does not have an objective answer."]
explanation = ["EC2 instance metadata provides information on the instance itself, such as instance ID and instance type, which is useful for applications running on the instance."]
answers = ["To provide instance-specific information"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1dff1446-6a6d-42cb-a275-e718ac6f7fe2"
question = "Which of the following describes a benefit of using an EC2 Spot Instance? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Guaranteed availability at all times", "Cost savings compared to On-Demand instances", "Long-term storage options", "Dedicated hardware resources", "This is a bad question and does not have an objective answer."]
explanation = ["EC2 Spot Instances allow you to bid on unused EC2 capacity at potentially lower prices than On-Demand instances."]
answers = ["Cost savings compared to On-Demand instances"]
claude_answers = ["Cost savings compared to On-Demand instances]\n\nThe primary benefit of using an EC2 Spot Instance is the potential for cost savings compared to On-Demand instances. Spot Instances allow you to bid on unused EC2 capacity, which can be significantly cheaper than On-Demand pricing. The other options are not correct benefits of Spot Instances."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "c4367492-baca-4168-a9b7-764b8f160a70"
question = "What does the AWS Free Tier offer for EC2 instances? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["One year of free access to any instance type", "750 hours of a t2.micro instance each month", "Free use of all instance types for the lifetime of your AWS account", "Access to On-Demand instances only", "This is a bad question and does not have an objective answer."]
explanation = ["The AWS Free Tier includes 750 hours of a t2.micro instance per month for the first 12 months after opening your AWS account."]
answers = ["750 hours of a t2.micro instance each month"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "952940fe-9c0a-4e54-8a78-26b0b66e1a34"
question = "Which network configuration does Amazon EC2 use to connect instances in the same VPC? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["VPC Peering", "Internet Gateway", "Route Tables", "Private IP addresses", "This is a bad question and does not have an objective answer."]
explanation = ["EC2 instances within the same VPC communicate using private IP addresses, allowing for secure, non-public connections."]
answers = ["Private IP addresses"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "da53cf86-dcb6-4454-a42d-0169d3bfcd2a"
question = "Which of the following can be used to deploy a custom AMI to multiple EC2 instances? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["AWS Organizations", "AWS CodeDeploy", "Amazon EC2 Auto Scaling", "AWS Lambda", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon EC2 Auto Scaling lets you deploy custom AMIs as part of scaling up your EC2 instances automatically."]
answers = ["Amazon EC2 Auto Scaling"]
claude_answers = ["Amazon EC2 Auto Scaling", "AWS CodeDeploy"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "8969101b-467d-437f-904c-79e6280b5d73"
question = "What happens to EBS volumes when their associated EC2 instance is terminated? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["They are always deleted.", "They persist by default.", "They automatically back up to S3.", "They become read-only.", "This is a bad question and does not have an objective answer."]
explanation = ["Unless the 'Delete on Termination' flag is set to true, EBS volumes associated with an EC2 instance persist after termination."]
answers = ["They persist by default."]
alternative_answers = ["They are always deleted."]
claude_answers = ["They are always deleted.", "They persist by default."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "dc6706ac-394a-439e-b8ea-7c81faea8524"
question = "What strategies can you implement to optimize the performance of an EC2 Auto Scaling group during peak load times? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Increase the minimum number of instances in the Auto Scaling group", "Use predictive scaling to adjust capacity ahead of time", "Reduce the maximum number of instances in the Auto Scaling group", "Implement lifecycle hooks for better control over instance launches", "This is a bad question and does not have an objective answer."]
explanation = ["Increasing the minimum number of instances may not optimize performance, as you could have more instances running than you need during peak load times.", "Using predictive scaling allows Auto Scaling to anticipate traffic patterns and adjust capacity proactively, which optimizes performance during peak loads.", "Reducing the maximum number of instances could lead to insufficient capacity during peak load times, negatively impacting performance.", "Implementation of lifecycle hooks helps manage the states of instances effectively, but does not directly optimize performance during peak load times."]
answers = ["Use predictive scaling to adjust capacity ahead of time", "Implement lifecycle hooks for better control over instance launches"]
alternative_answers = ["Increase the minimum number of instances in the Auto Scaling group", "Use predictive scaling to adjust capacity ahead of time"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b9b18540-3e82-4ada-aa8e-b652dda76f99"
question = "Which of the following can trigger an EC2 Auto Scaling group to launch new instances? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["A scheduled time event", "A manual launch command from the AWS CLI", "A decrease in instance health", "An increase in average CPU usage over a specified period", "This is a bad question and does not have an objective answer."]
explanation = ["A scheduled time event does not automatically trigger scaling actions; it is simply a time-based event.", "A manual launch command can be used to start instances but does not automatically trigger Auto Scaling actions.", "A decrease in instance health leads to instance termination but not necessarily launching new instances.", "An increase in average CPU usage over a specified period can trigger Auto Scaling to launch new instances to maintain performance."]
answers = ["An increase in average CPU usage over a specified period"]
alternative_answers = ["An increase in average CPU usage over a specified period", "A scheduled time event"]
claude_answers = ["A scheduled time event", "A manual launch command from the AWS CLI", "An increase in average CPU usage over a specified period"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "cc3d5c73-6451-474f-bb81-9580f3211380"
question = "Which Amazon EC2 Auto Scaling feature helps to minimize costs by automatically reducing the number of running instances during non-peak hours? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Dynamic scaling", "Scheduled scaling", "Predictive scaling", "Manual scaling", "This is a bad question and does not have an objective answer."]
explanation = ["Dynamic scaling adjusts the number of running instances in response to real-time demand but does not specifically target non-peak hours.", "Scheduled scaling allows you to specify times when scaling actions should occur, which can help minimize costs during known non-peak hours.", "Predictive scaling anticipates future traffic but may not focus solely on cost-minimization during non-peak hours.", "Manual scaling requires human intervention and does not provide continual cost-saving adjustments."]
answers = ["Scheduled scaling"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7a302fd6-b41c-4d9c-94ed-f4c824022d70"
question = "What is the purpose of EC2 Auto Scaling health checks, and which services do they rely upon? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["To ensure that instances are running optimally", "To monitor network connectivity to instances", "To verify that instances are healthy based on application-layer checks", "To track billing and cost associated with EC2 instances", "This is a bad question and does not have an objective answer."]
explanation = ["Health checks do not directly ensure performance; they focus on the operational status of instances.", "While network connectivity is important, health checks primarily focus on whether instances are up and running, not just their network state.", "Application-layer health checks specifically determine whether an application running on an instance is functioning correctly, which is a key aspect of ensuring instance health.", "Tracking billing and costs is not related to EC2 Auto Scaling health checks."]
answers = ["To ensure that instances are running optimally", "To verify that instances are healthy based on application-layer checks"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3aab8d0f-1697-4aac-9512-227a24c35f95"
question = "What effect does setting a cooldown period have in an EC2 Auto Scaling group? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["It delays the next scaling action after a previous one", "It determines the minimum number of instances allowed in a group", "It restricts access to new instance types", "It increases the maximum number of instances allowed in the group", "This is a bad question and does not have an objective answer."]
explanation = ["Setting a cooldown period allows sufficient time for newly launched instances to start and stabilize before triggering another scaling action.", "The minimum number of instances is set by the configuration of the Auto Scaling group, not by the cooldown period.", "Instance types are not restricted by the cooldown period but defined during the configuration of EC2 instances in the group.", "The maximum allowed number of instances is set in the Auto Scaling configuration and is unrelated to the cooldown period."]
answers = ["It delays the next scaling action after a previous one"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "73fb0288-0be9-4346-96b7-530a08bdc595"
question = "Which of the following AWS services can be used to monitor and alert on the performance of an EC2 Auto Scaling group? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon CloudWatch", "AWS Lambda", "AWS Elastic Beanstalk", "AWS Budgets", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon CloudWatch provides metrics and logs to monitor EC2 Auto Scaling performance, including alarms for specific thresholds.", "AWS Lambda is for deploying serverless applications and does not monitor instances directly.", "AWS Elastic Beanstalk is a managed service for applications but not directly for monitoring Auto Scaling performance.", "AWS Budgets tracks cost management rather than performance metrics for Auto Scaling groups."]
answers = ["Amazon CloudWatch", "AWS Budgets"]
claude_answers = ["Amazon CloudWatch", "AWS Lambda"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "fdc76ccb-2d91-4576-af6d-762cb79391a3"
question = "In which scenario would you consider using 'terminate at will' option for EC2 instances in an Auto Scaling group? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["When using EC2 Spot Instances", "When needing instances to persist indefinitely", "For instances with high availability requirements", "To maintain a fixed number of reserved instances", "This is a bad question and does not have an objective answer."]
explanation = ["'Terminate at will' is commonly used for Spot Instances, which can be interrupted at any time based on market pricing.", "Instances needing to persist indefinitely would not use 'terminate at will' as it implies potential stoppage.", "High availability requires instances to remain running, which conflicts with the 'terminate at will' option.", "Fixed number of reserved instances are intended for long-term commitments, not for 'terminate at will' scenarios."]
answers = ["When using EC2 Spot Instances"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "fd0747a0-933e-490a-b70c-4515600d925c"
question = "What causes an EC2 instance to enter the 'in-service' state in an Auto Scaling group after launching? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["The instance passes the health checks defined in the Auto Scaling group", "The instance reaches a specified CPU utilization threshold", "The instance is manually marked as 'in-service'", "The instance is allocated an Elastic IP address", "This is a bad question and does not have an objective answer."]
explanation = ["The 'in-service' state indicates the instance has successfully passed the health checks defined in the Auto Scaling group and is ready to handle traffic.", "Reaching a specified CPU utilization threshold is not a condition for entering the 'in-service' state.", "An instance cannot be manually marked as 'in-service'; it must meet Auto Scaling health checks.", "Allocating an Elastic IP address does not influence the instance's state in the Auto Scaling group."]
answers = ["The instance passes the health checks defined in the Auto Scaling group"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5389804d-cd90-4cc5-871d-c4ca2fd24716"
question = "When would you choose to implement 'Scheduled Scaling' for an EC2 Auto Scaling group? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["When traffic varies predictably over the week", "When you need immediate adjustments based on real-time metrics", "When testing new instance types", "When conducting application optimization", "This is a bad question and does not have an objective answer."]
explanation = ["Scheduled scaling is ideal for predictable traffic patterns, such as increased load during certain times of the week.", "Real-time metrics adjustments are better suited for dynamic scaling based on immediate demand changes.", "Testing new instance types isn't a core use case for scheduled scaling; it's for managing scaling events.", "Application optimization typically involves different strategies rather than simple scheduled scaling adjustments."]
answers = ["When traffic varies predictably over the week"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8f6c9b96-49ec-45a9-9dbd-67d87b8d9053"
question = "What is the role of 'Scaling Policies' in an EC2 Auto Scaling group? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To define the rules for scaling actions", "To monitor costs associated with instance running", "To manage AMIs for the Auto Scaling group", "To specify instance types to be launched", "This is a bad question and does not have an objective answer."]
explanation = ["Scaling policies explicitly define how the Auto Scaling group will adjust its capacity based on metrics like CPU usage, providing key guidelines for scaling actions.", "Cost monitoring is managed separately in AWS and not directly through scaling policies.", "AMIs are a separate consideration that does not fall under the scope of scaling policies.", "Specifying instance types can be part of the configuration but is not a function of scaling policies."]
answers = ["To define the rules for scaling actions"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "91f1ad9c-ee79-4b5c-976f-f91e97ddce74"
question = "Which of the following are key features of Amazon EC2 Image Builder? (Select 3)"
good_bad_why = "Answers: [1,2]\n"
options = ["Automated image creation", "Manual image creation", "Image versioning", "Image compliance scanning", "This is a bad question and does not have an objective answer."]
explanation = ["Automated image creation is a feature that allows users to create images without manual intervention.", "Manual image creation is not a key feature of EC2 Image Builder as it focuses on automation.", "Image versioning allows users to track and manage different versions of their images.", "Image compliance scanning is used to check images for security compliance before they are shared or deployed."]
answers = ["Automated image creation", "Image versioning", "Image compliance scanning"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "310d9249-6d20-4a80-b38e-65e71ee853d0"
question = "What service does Amazon EC2 Image Builder integrate with to ensure images meet compliance standards?"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon Inspector", "AWS Config", "AWS Security Hub", "Amazon CloudWatch", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon Inspector is used for security assessments and vulnerability management.", "AWS Config helps in assessing, auditing, and evaluating the configuration of AWS resources.", "AWS Security Hub provides a comprehensive view of security alerts across AWS accounts.", "Amazon CloudWatch is used for monitoring and logging resources and applications."]
answers = ["AWS Config"]
claude_answers = ["Amazon Inspector"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0cda9592-4316-456e-9b44-b973a6f24b5e"
question = "When using Amazon EC2 Image Builder, which of the following components define the build process? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Image pipeline", "Infrastructure as code", "Testing framework", "Component build", "This is a bad question and does not have an objective answer."]
explanation = ["Image pipeline orchestrates the creation of images according to defined parameters.", "Infrastructure as code is a general practice and does not specifically define the image build process.", "Testing framework refers to the methods used to validate images after creation.", "Component build defines individual steps in the image creation process."]
answers = ["Image pipeline", "Component build"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6d35e91d-36eb-4679-a3af-84d8da385841"
question = "In Amazon EC2 Image Builder, what is the purpose of a recipe?"
good_bad_why = "Answers: [1,2]\n"
options = ["To define the source image", "To configure the pipeline settings", "To specify the components and settings to build an image", "To manage user permissions", "This is a bad question and does not have an objective answer."]
explanation = ["The recipe specifies how the image should be created, including the components and configurations.", "The source image is identified by the image source not the recipe.", "Pipeline settings are defined separately from the image recipe.", "User permissions are managed through IAM roles and not within the recipe."]
answers = ["To specify the components and settings to build an image"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "70a25276-dc99-4a10-abcb-05627c283088"
question = "What is the primary benefit of using Amazon EC2 Image Builder's built-in testing features?"
good_bad_why = "Answers: [1,2]\n"
options = ["Ensure images are compliant with industry standards", "Automate the image building process", "Reduce the cost of image storage", "Allow for manual image validation", "This is a bad question and does not have an objective answer."]
explanation = ["Ensuring images meet compliance standards is one way built-in tests are used.", "Automation is a feature of EC2 Image Builder but not its testing features specifically.", "Cost reduction is not primarily related to image testing but rather image building processes.", "Manual image validation is not the focus of the built-in testing features, which aim for automation."]
answers = ["Ensure images are compliant with industry standards"]
alternative_answers = ["Automate the image building process", "Ensure images are compliant with industry standards"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "cdd7077e-f743-4aa3-9503-506dd518bf84"
question = "Which AWS service can you use alongside Amazon EC2 Image Builder to automate the deployment of build images?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CodeDeploy", "AWS Lambda", "AWS Systems Manager", "Amazon CloudFormation", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CodeDeploy is a deployment service, but not primarily designed for image deployment.", "AWS Lambda can run scripts but is not the main service for deploying images.", "AWS Systems Manager provides a management interface that can include deployment functionality.", "Amazon CloudFormation manages resources but is not specific to image deployment."]
answers = ["AWS Systems Manager"]
alternative_answers = ["Amazon CloudFormation", "AWS CodeDeploy", "AWS Systems Manager"]
claude_answers = ["AWS CodeDeploy", "AWS Systems Manager"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "69fc9ff4-8b9a-44f5-8ad6-8e795746554e"
question = "What kind of images can be created using Amazon EC2 Image Builder?"
good_bad_why = "Answers: [1,2]\n"
options = ["Container images", "Virtual machine images", "AMI images", "All of the above", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon EC2 Image Builder can create all of these types of images.", "Container images are supported alongside AMIs and VM images.", "Virtual machine images generally refer to multiple platforms where AMIs are specific to AWS.", "However, the final option of 'All of the above' covers all categories."]
answers = ["All of the above"]
alternative_answers = ["Virtual machine images", "AMI images", "Container images", "All of the above"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a52b538f-812d-43ff-8d0c-fd35bff16934"
question = "Which feature of Amazon EC2 Image Builder allows for automation of the image creation process on a schedule?"
good_bad_why = "Answers: [1,2]\n"
options = ["Image schedule", "Pipeline triggers", "Event-driven architecture", "Image lifecycle policies", "This is a bad question and does not have an objective answer."]
explanation = ["Image schedule is not a defined term but could be assumed to relate to image creation timing.", "Pipeline triggers enable automated image creation upon specified events or schedules.", "Event-driven architecture is a broader concept not specific to Image Builder.", "Image lifecycle policies manage image retention but do not schedule creation."]
answers = ["Pipeline triggers"]
alternative_answers = ["Image schedule"]
claude_answers = ["Image schedule"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "32c9c858-7819-4b7c-962a-d8df87b5ba59"
question = "Which component of Amazon EC2 Image Builder allows you to include pre-built software packages into your image?"
good_bad_why = "Answers: [1,2]\n"
options = ["Components", "Recipes", "Pipelines", "Blueprints", "This is a bad question and does not have an objective answer."]
explanation = ["Components are reusable building blocks you can include in recipes to package software.", "Recipes define the overall structure but do not include software directly.", "Pipelines manage the image creation process.", "Blueprints are a concept generally used in architecture but do not apply to Image Builder directly."]
answers = ["Components"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "cd49e4c9-be9e-460c-b195-84534b1e6d92"
question = "Which of the following permissions do you need to use Amazon EC2 Image Builder?"
good_bad_why = "Answers: [1,2]\n"
options = ["ec2:CreateImage", "imagebuilder:CreateImageRecipe", "iam:PassRole", "cloudwatch:PutMetricData", "This is a bad question and does not have an objective answer."]
explanation = ["ec2:CreateImage is not necessary as Image Builder manages image creation through its API.", "imagebuilder:CreateImageRecipe is essential to create new image recipes.", "iam:PassRole is needed to allow Image Builder to assume necessary IAM roles during execution.", "cloudwatch:PutMetricData does not directly relate to the functionality of Image Builder."]
answers = ["imagebuilder:CreateImageRecipe", "iam:PassRole"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e6f2eb1e-8a7d-456b-bbf9-e04b38b9fa90"
question = "Which of the following are true about AWS Lambda? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Lambda supports languages like Python and Java.", "AWS Lambda requires you to manage server infrastructure.", "AWS Lambda can be triggered by AWS events such as S3 uploads.", "AWS Lambda has a maximum execution time of 10 minutes.", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Lambda supports languages like Python and Java, making it versatile for various applications.", "AWS Lambda requires you to manage server infrastructure is wrong because it is a serverless computing service.", "AWS Lambda can be triggered by AWS events such as S3 uploads is correct; it can respond to events from many AWS services.", "AWS Lambda has a maximum execution time of 10 minutes is correct, but be aware of checking if this limit has increased in the latest service updates."]
answers = ["AWS Lambda supports languages like Python and Java.", "AWS Lambda can be triggered by AWS events such as S3 uploads."]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e575e48f-6063-4c33-a885-b9260593c27b"
question = "What feature of Lambda allows your function to scale automatically? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Lambda Layers", "Provisioned Concurrency", "Event-driven architecture", "AWS CloudFormation", "This is a bad question and does not have an objective answer."]
explanation = ["Lambda Layers do not handle scaling; they are meant for managing dependencies.", "Provisioned Concurrency is a feature that maintains instances ready to respond but does not fully handle elasticity.", "Event-driven architecture is the correct answer, as it inherently allows AWS Lambda to scale based on the number of incoming events.", "AWS CloudFormation is a service for resource provisioning and management, but not specifically for Lambda's scaling."]
answers = ["Event-driven architecture"]
claude_answers = ["Provisioned Concurrency"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "43e47c9c-21ed-41da-8b2d-ab9a73af1014"
question = "What is the maximum size of the deployment package for an AWS Lambda function? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["50 MB", "75 MB", "250 MB", "500 MB", "This is a bad question and does not have an objective answer."]
explanation = ["50 MB is incorrect as it is too low for the deployment package size limit.", "75 MB is also incorrect; the limit has been raised significantly.", "250 MB is correct; this is the maximum size for the compressed (.zip) deployment package of a Lambda function.", "500 MB exceeds the current limits for Lambda deployment packages."]
answers = ["250 MB"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c266483d-5620-4692-a428-9eccb486883c"
question = "In which of the following scenarios would you use AWS Lambda? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["A web application that requires a dedicated server.", "Real-time file processing and data analysis.", "Long-running batch jobs that require direct access to EC2 instances.", "Managing a static website hosted on S3.", "This is a bad question and does not have an objective answer."]
explanation = ["A web application that requires a dedicated server is incorrect as Lambda is serverless.", "Real-time file processing and data analysis is correct; Lambda can process files as they are uploaded to S3.", "Long-running batch jobs that require direct access to EC2 instances are not suited for Lambda's execution time limits.", "Managing a static website hosted on S3 is more appropriate for S3's capabilities rather than Lambda."]
answers = ["Real-time file processing and data analysis."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "21529186-a35b-4146-b235-6ebdf07188b8"
question = "What happens if an AWS Lambda function fails? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["The function retries automatically once.", "The function returns an error message to the caller.", "The event is sent to Dead Letter Queue (DLQ), if configured.", "The execution is stopped indefinitely.", "This is a bad question and does not have an objective answer."]
explanation = ["The function retries automatically once is incorrect unless configured to do so with a specific service that supports retries.", "The function returns an error message to the caller can be true, but error handling can get more complex than that.", "The event is sent to Dead Letter Queue (DLQ), if configured is the correct answer, as DLQs are designed for failed events.", "The execution is stopped indefinitely is incorrect; there's a handling mechanism in place."]
answers = ["The event is sent to Dead Letter Queue (DLQ), if configured.", "The function returns an error message to the caller."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "04f3ce92-f271-4b52-887c-adb2a9757456"
question = "AWS Lambda can be used with which of the following data storage services? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon S3", "Amazon RDS", "Amazon DynamoDB", "Amazon Redshift", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon S3 is correct; Lambda functions can be triggered by events in S3.", "Amazon RDS is also correct; Lambda can interact with RDS databases for data access and processing.", "Amazon DynamoDB is correct and frequently used with Lambda for accessing NoSQL data.", "Amazon Redshift is more for data warehousing and not typically accessed via Lambda in the same way."]
answers = ["Amazon S3", "Amazon DynamoDB"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9373d0a5-dd29-42f4-b9c0-6a325517c2bd"
question = "Which IAM permissions must be granted to a Lambda function to access other AWS services? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["No permissions are required.", "Lambda's execution role must grant permissions for needed services.", "IAM permissions are automatically granted to all Lambda functions.", "Only trust relationship permissions are sufficient.", "This is a bad question and does not have an objective answer."]
explanation = ["No permissions are required is incorrect; IAM permission is essential.", "Lambda's execution role must grant permissions for needed services is correct; each Lambda function execution requires explicit permissions for service access.", "IAM permissions are automatically granted to all Lambda functions is false; permissions need to be defined.", "Only trust relationship permissions are sufficient is misleading; role permissions are also required."]
answers = ["Lambda's execution role must grant permissions for needed services."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d9359b92-93fa-4e4d-8f26-110ef84546f7"
question = "Which parameter is NOT configurable during the creation of an AWS Lambda function? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Function name", "Execution timeout", "Memory allocation", "Lambda ARN", "This is a bad question and does not have an objective answer."]
explanation = ["Function name is a mandatory parameter and is configurable.", "Execution timeout is configurable, allowing specification of how long the function can run.", "Memory allocation is also configurable as part of the function's settings.", "Lambda ARN is automatically generated upon function creation and cannot be specified by the user, making it the correct answer."]
answers = ["Lambda ARN"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f63b17ae-e698-4975-810a-25207590ca6b"
question = "AWS Lambda functions can use which of the following for code storage? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon S3 only", "AWS CodeCommit only", "Amazon EFS only", "Amazon S3 or AWS EFS", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon S3 only is incomplete; other sources can be used for code storage.", "AWS CodeCommit only is incorrect; Lambda does not directly use CodeCommit for deployment.", "Amazon EFS only does not encompass all options available for Lambda deployments.", "Amazon S3 or AWS EFS is correct; S3 for code packages and EFS for file storage used during execution."]
answers = ["Amazon S3 or AWS EFS"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d2e371e6-c1d9-4a56-bc75-e4097ca90bb6"
question = "Which of the following are features of Amazon Aurora? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Multi-AZ deployments", "Automatic backups", "Data encryption at rest", "Manual scaling", "This is a bad question and does not have an objective answer."]
explanation = ["Multi-AZ deployments provide high availability and failover capabilities.", "Automatic backups are a standard feature of Aurora, ensuring data durability.", "Data encryption at rest is indeed a feature of Aurora to protect sensitive data.", "Manual scaling is not a feature of Aurora as it offers seamless scaling."]
answers = ["Multi-AZ deployments", "Automatic backups"]
claude_answers = ["Multi-AZ deployments", "Data encryption at rest"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0bdcc48e-f8b3-4e23-b116-3b8f65792121"
question = "What is the maximum storage size for an Amazon Aurora database cluster?"
good_bad_why = "Answers: [1,2]\n"
options = ["64 TB", "128 TB", "1 PB", "32 TB", "This is a bad question and does not have an objective answer."]
explanation = ["64 TB is the correct limit for single Aurora databases, while clusters can scale beyond that with additional volume.", "128 TB is incorrect; Aurora does not currently support that size.", "1 PB is incorrect as Aurora has a maximum storage limit less than that.", "32 TB is below the actual maximum supported by Aurora."]
answers = ["64 TB"]
alternative_answers = ["128 TB"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0ac75138-bb3d-4979-bcbe-758b05e4500c"
question = "Which replication method does Amazon Aurora use for high availability?"
good_bad_why = "Answers: [1,2]\n"
options = ["Synchronous replication", "Asynchronous replication", "Snapshot replication", "Custom replication", "This is a bad question and does not have an objective answer."]
explanation = ["Synchronous replication is used to ensure durability and consistency across Aurora replicas.", "Asynchronous replication is not typically utilized in Aurora to maintain high availability.", "Snapshot replication refers to creating point-in-time backups, not real-time replication.", "Custom replication does not apply in the context of Amazon Aurora."]
answers = ["Synchronous replication"]
alternative_answers = ["Synchronous replication", "Asynchronous replication"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "4e201fd1-45ff-4603-aed6-49bcf9d6a076"
question = "Which of the following statements about Amazon Aurora is true?"
good_bad_why = "Answers: [1,2]\n"
options = ["It only supports MySQL compatibility.", "It automatically grows storage up to 64 TB.", "It does not support read replicas.", "It requires manual intervention for scaling.", "This is a bad question and does not have an objective answer."]
explanation = ["It supports both MySQL and PostgreSQL compatibility.", "Aurora can indeed automatically grow its storage up to 64 TB.", "Aurora does support read replicas for enhanced performance.", "It allows for auto-scaling, so manual intervention is not required."]
answers = ["It automatically grows storage up to 64 TB."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "305e00a2-14a3-40ee-a49e-83c49d971bc4"
question = "What feature does Aurora provide to optimize database performance?"
good_bad_why = "Answers: [1,2]\n"
options = ["Read replicas in multiple regions", "Global secondary indexes", "In-memory caching", "Aurora Serverless", "This is a bad question and does not have an objective answer."]
explanation = ["Read replicas can help distribute read loads, but they can be located within the same region.", "Global secondary indexes are not a feature exclusive to Aurora.", "In-memory caching is more associated with ElastiCache, not specifically Aurora.", "Aurora Serverless can automatically scale based on workload, optimizing performance dynamically."]
answers = ["Aurora Serverless"]
alternative_answers = ["In-memory caching", "Read replicas in multiple regions", "Aurora Serverless"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b3ae6429-9afa-4557-a9c0-2cecc83cc85a"
question = "In an Amazon Aurora cluster, what is the purpose of a DB instance's instance class?"
good_bad_why = "Answers: [1,2]\n"
options = ["To determine the maximum storage size", "To specify the resource allocation", "To set the backup retention period", "To configure the availability zone", "This is a bad question and does not have an objective answer."]
explanation = ["Instance class defines the CPU and memory resources allocated to the DB instance.", "It does not dictate maximum storage size, which is controlled by Aurora itself.", "Backup retention period is configured separately from instance class.", "Availability zone is chosen during cluster creation, not defined by instance class."]
answers = ["To specify the resource allocation"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "97a81079-9ffb-4a27-b4eb-ae41db0be971"
question = "Which storage engine does Amazon Aurora use to provide high performance and availability?"
good_bad_why = "Answers: [1,2]\n"
options = ["InnoDB", "MyISAM", "Aurora storage engine", "SQL Server storage", "This is a bad question and does not have an objective answer."]
explanation = ["Aurora utilizes a unique storage engine optimized for its purposes, enhancing performance.", "InnoDB is used for standard MySQL databases, but not exclusive to Aurora.", "MyISAM is not compatible with Aurora's architecture.", "SQL Server storage is not applicable to Aurora since it supports MySQL and PostgreSQL."]
answers = ["Aurora storage engine"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6d141f95-cd11-49fc-b286-6d52b223bd2b"
question = "What happens when an Amazon Aurora DB cluster is stopped?"
good_bad_why = "Answers: [1,2]\n"
options = ["All data is deleted", "Replicas are also stopped", "The associated storage is preserved", "Backups are removed", "This is a bad question and does not have an objective answer."]
explanation = ["Stopping an Aurora DB cluster keeps the data intact while stopping processing capabilities.", "Replicas remain available even when the primary DB is stopped.", "Associated storage is preserved, and you can restart the DB instance.", "Backups are not removed; they remain unaffected and intact."]
answers = ["The associated storage is preserved"]
alternative_answers = ["Replicas are also stopped", "The associated storage is preserved"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "592f7296-2d76-4562-95aa-461fce54f9db"
question = "How does Amazon Aurora handle failover when the primary instance becomes unavailable?"
good_bad_why = "Answers: [1,2]\n"
options = ["Automatic failover to the nearest region", "Manual intervention required", "Automatic failover to a read replica", "No failover supported", "This is a bad question and does not have an objective answer."]
explanation = ["Aurora can automatically failover to a designated replica within the availability zone in case of a primary instance failure.", "Automatic failover does not involve regions; it occurs within the same region.", "Manual intervention is not typically required, as failover is automatic.", "Failover is a core feature of Aurora, ensuring high availability."]
answers = ["Automatic failover to a read replica"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f2af1fa9-8ec3-4a18-b57e-7bd664c1f81d"
question = "Which of the following statements is true about Aurora Global Database?"
good_bad_why = "Answers: [1,2]\n"
options = ["Provides low-latency reads across regions", "Requires manual backups for data security", "Can only be used with MySQL", "Has a maximum number of 5 regions", "This is a bad question and does not have an objective answer."]
explanation = ["Aurora Global Database enables low-latency reads from secondary regions.", "Automatic backups are part of Aurora's offerings, requiring no manual intervention.", "Global Database feature is available for both Aurora MySQL and PostgreSQL.", "It can actually support up to 6 regions for read replicas globally."]
answers = ["Provides low-latency reads across regions"]
alternative_answers = ["Has a maximum number of 5 regions", "Provides low-latency reads across regions"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6a5c9048-b65c-46f1-adea-272b8af3a115"
question = "What are two characteristics of Amazon DynamoDB? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["It is a fully managed NoSQL database service", "It only supports key-value data models", "It automatically scales up and down based on demand", "It supports SQL queries for data retrieval", "This is a bad question and does not have an objective answer."]
explanation = ["It is a fully managed NoSQL database service is correct because DynamoDB is designed to be managed by AWS.", "It only supports key-value data models is wrong because DynamoDB also supports document data models.", "It automatically scales up and down based on demand is correct because DynamoDB can automatically adjust capacity depending on application needs.", "It supports SQL queries for data retrieval is wrong; it uses a query language called PartiQL for queries."]
answers = ["It is a fully managed NoSQL database service", "It automatically scales up and down based on demand"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ce59d834-3143-47c4-9fab-8de676391dbb"
question = "Which of the following options are valid data types in DynamoDB? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["String", "Integer", "CSV", "Binary", "This is a bad question and does not have an objective answer."]
explanation = ["String is valid because DynamoDB supports a string data type.", "Integer is valid because DynamoDB supports a number data type which includes integers.", "CSV is wrong because batch data storage is not a specific data type in DynamoDB.", "Binary is valid because DynamoDB supports a binary data type for storing binary data."]
answers = ["String", "Binary"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c3789f97-e24c-4bce-87fd-f57460a46a73"
question = "In DynamoDB, which of the following strategies can be used for data partitioning? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Use a partition key", "Increase the read capacity units", "Use a composite primary key", "Enable DynamoDB Streams", "This is a bad question and does not have an objective answer."]
explanation = ["Use a partition key is correct because the partition key determines the partition to which an item is persisted.", "Increase the read capacity units is wrong as it affects throughput, not data partitioning.", "Use a composite primary key is correct because it allows for both partitioning and sorting of items in a DynamoDB table.", "Enable DynamoDB Streams is not relevant to data partitioning."]
answers = ["Use a partition key", "Use a composite primary key"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ca08bc92-0080-40e0-94bd-571d89166c96"
question = "What are two benefits of using DynamoDB Accelerator (DAX)? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Increases read performance by caching", "Provides synchronous replication across regions", "Supports eventual consistency automatically", "Reduces latency for read-heavy workloads", "This is a bad question and does not have an objective answer."]
explanation = ["Increases read performance by caching is correct because DAX is specifically designed to cache DynamoDB read requests.", "Provides synchronous replication across regions is wrong as DAX does not provide replication featuresâ€”DynamoDB provides the replication.", "Supports eventual consistency automatically is wrong because eventual consistency is a baseline behavior of DynamoDB, not DAX.", "Reduces latency for read-heavy workloads is correct as DAX significantly enhances read performance for such scenarios."]
answers = ["Increases read performance by caching", "Reduces latency for read-heavy workloads"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "bc16922c-a06a-4575-9b2f-53aaae6fa693"
question = "What feature allows you to backup your DynamoDB table on a regular basis? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Backup", "DynamoDB Streams", "On-Demand Backup", "DynamoDB Autoscaling", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Backup is correct because it allows for centralized backup management, including scheduling backups for DynamoDB tables."]
answers = ["AWS Backup"]
claude_answers = ["On-Demand Backup", "AWS Backup"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "39709a6c-95b9-465a-a431-3a6b848b18e2"
question = "Which of the following can be used to ensure data is not lost in case of accidental deletion of items in DynamoDB? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["DynamoDB Streams", "Backups", "S3 versioning", "Provisioned throughput", "This is a bad question and does not have an objective answer."]
explanation = ["DynamoDB Streams can help track changes but do not directly prevent data loss. Backups are the primary method for ensuring data is not lost in case of deletion.", "Backups are the right option because scheduled backups can restore items deleted accidentally.", "S3 versioning is not directly related to DynamoDB and therefore, wrong.", "Provisioned throughput settings manage capacity but do not prevent data loss."]
answers = ["Backups", "DynamoDB Streams"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "83bd1ca1-bfee-48ab-a625-79da31b1a873"
question = "How does DynamoDB handle write and read capacity? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Throughput is managed by the user only", "By using on-demand and provisioned capacity modes", "By only allowing eventual consistency", "All writes are synchronous", "This is a bad question and does not have an objective answer."]
explanation = ["By using on-demand and provisioned capacity modes is correct because DynamoDB allows users to choose between on-demand and provisioned capacity configurations for their tables."]
answers = ["By using on-demand and provisioned capacity modes"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3c29b70e-07a0-490a-82dd-66c8f0ed497f"
question = "Which of the following aspects should you monitor for DynamoDB performance tuning? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Consumed read and write capacity", "Latency of item retrieval", "Network bandwidth", "DynamoDB table size", "This is a bad question and does not have an objective answer."]
explanation = ["Consumed read and write capacity is correct because it's key to understanding the usage patterns and optimizing your capacity.", "Latency of item retrieval is correct as this affects the performance of your application.", "Network bandwidth is not a direct metric monitored for DynamoDB.", "DynamoDB table size is not a direct performance metric for tuning purposes."]
answers = ["Consumed read and write capacity", "Latency of item retrieval"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b7f8444b-e50b-4af2-92eb-4d687880bbc3"
question = "What is the primary way to query DynamoDB data? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Using SQL-like syntax", "Using the Scan operation", "Using the GetItem operation", "Using the Query operation", "This is a bad question and does not have an objective answer."]
explanation = ["Using the Query operation is correct because it allows you to retrieve multiple items based on the partition key, compared to the other options which are more limited."]
answers = ["Using the Query operation"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b3eb901f-4f30-4dd4-bca2-44d8116e4b8d"
question = "Which of the following are valid use cases for Amazon ElastiCache? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Caching web pages", "Data backup", "Session management", "Long-term data storage", "This is a bad question and does not have an objective answer."]
explanation = ["Caching web pages is correct because ElastiCache does provide quick access to cached data.", "Data backup is wrong because ElastiCache is not designed for backup; it's for caching data.", "Session management is correct as ElastiCache can rapidly manage user sessions by storing session data in memory.", "Long-term data storage is wrong because ElastiCache is not intended for persistent data storage."]
answers = ["Caching web pages", "Session management"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1b97f801-b083-4ac4-a654-53125822f66c"
question = "Which two caching engines are supported by Amazon ElastiCache? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Redis", "MySQL", "Memcached", "PostgreSQL", "This is a bad question and does not have an objective answer."]
explanation = ["Redis is correct as it is one of the supported engines in ElastiCache.", "MySQL is incorrect because it is a relational database, not a caching engine.", "Memcached is correct as it is another supported caching engine in ElastiCache.", "PostgreSQL is incorrect as it is also a relational database, not a caching engine."]
answers = ["Redis", "Memcached"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "87ecf3de-5746-4533-9157-ab6238fea816"
question = "Which feature of Amazon ElastiCache allows you to automatically scale your service as demand changes? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Clusters", "Replication", "Auto Discovery", "Auto Scaling", "This is a bad question and does not have an objective answer."]
explanation = ["Auto Scaling is correct because it enables ElastiCache to scale in and out based on your application's demand."]
answers = ["Auto Scaling"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c4abcddb-2153-43f9-bda8-5a6cb051b27e"
question = "What is the maximum cache node size supported by Amazon ElastiCache for Redis? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["3.6 TB", "12 TB", "6 TB", "24 TB", "This is a bad question and does not have an objective answer."]
explanation = ["12 TB is correct as the maximum cache node size for Redis in ElastiCache can be 12 TB for certain instance types."]
answers = ["12 TB"]
claude_answers = ["6 TB"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "13515a18-fbbf-4a68-858e-b601f05f5a1c"
question = "When configuring Amazon ElastiCache for Redis, which parameter is mandatory? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Engine Version", "Node Type", "Cache Parameter Group", "Security Group", "This is a bad question and does not have an objective answer."]
explanation = ["Node Type is correct as it specifies the instance type for the cache cluster, which is a mandatory parameter."]
answers = ["Node Type"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "33a1db32-4ae2-48db-8647-868b5ec42529"
question = "What is the significance of using a cache cluster in ElastiCache? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["It increases the storage capacity.", "It provides higher availability.", "It provides higher throughput.", "It eliminates the need for backups.", "This is a bad question and does not have an objective answer."]
explanation = ["It provides higher throughput is correct because a cache cluster allows horizontal scaling, enabling the handling of more requests efficiently."]
answers = ["It provides higher throughput."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3a1cc203-9f2e-47be-9c9f-ae883763fc14"
question = "In ElastiCache, what is the purpose of data persistence in Redis? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["To cache data indefinitely", "To restore data after a failure", "To increase data access latency", "To reduce storage costs", "This is a bad question and does not have an objective answer."]
explanation = ["To restore data after a failure is correct because data persistence allows Redis to save the state of the data to disk, which can be recovered after a failure."]
answers = ["To restore data after a failure"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "c8084360-1677-4300-b911-821ee8dbf21e"
question = "Which of the following features can be used to improve the performance of an Amazon ElastiCache cluster? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Sharding", "Multi-AZ deployment", "Provisioned IOPS", "Data encryption at rest", "This is a bad question and does not have an objective answer."]
explanation = ["Sharding is correct because it distributes data across multiple nodes, improving performance.", "Multi-AZ deployment is incorrect as it is primarily for availability, not for improving performance.", "Provisioned IOPS is incorrect because it refers to storage performance rather than caching performance.", "Data encryption at rest does not improve performance but is a security feature."]
answers = ["Sharding"]
alternative_answers = ["Sharding", "Multi-AZ deployment"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "4b955003-3834-4415-90c6-d791538b2c39"
question = "What mechanism does Redis use to expire cache entries in ElastiCache? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Time-to-Live (TTL)", "Cache Invalidation", "Eviction policies", "Data replication", "This is a bad question and does not have an objective answer."]
explanation = ["Time-to-Live (TTL) is correct because Redis uses TTL settings to determine how long to keep a cache entry before expiring it."]
answers = ["Time-to-Live (TTL)"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "cd8e939e-6532-468d-9c7b-f1593e18bc41"
question = "Which of the following are valid use cases for Amazon RDS? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Hosting a production relational database", "Running serverless applications", "Storing big data in its raw form", "Generating reports from transactional databases", "This is a bad question and does not have an objective answer."]
explanation = ["Hosting a production relational database is correct as RDS is specifically designed for that use case.", "Running serverless applications is wrong because RDS itself is not serverless, although it can work with serverless architectures.", "Storing big data in its raw form is wrong as Amazon RDS is not intended for big data storage; solutions like Amazon S3 or Amazon Redshift are more suited.", "Generating reports from transactional databases is correct since RDS can efficiently handle OLTP workloads."]
answers = ["Hosting a production relational database", "Generating reports from transactional databases"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d13a3245-720c-4733-828d-a3993a8052c9"
question = "What is Amazon RDS Read Replica used for?"
good_bad_why = "Answers: [1,2]\n"
options = ["To distribute read load across multiple instances", "To provide disaster recovery", "To back up your primary database", "To automatically scale database storage", "This is a bad question and does not have an objective answer."]
explanation = ["To distribute read load across multiple instances is correct as read replicas allow you to scale reads by directing them to replicas.", "To provide disaster recovery is wrong as read replicas are not a direct disaster recovery solution, Multi-AZ deployments are better suited for that.", "To back up your primary database is wrong as snapshots and automated backups serve that purpose.", "To automatically scale database storage is also wrong since storage scaling is a separate function."]
answers = ["To distribute read load across multiple instances"]
alternative_answers = ["To distribute read load across multiple instances", "To provide disaster recovery"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "888d4fdf-9569-4d1a-878a-68903cbaad08"
question = "When creating an Amazon RDS instance, which of the following parameters must be specified? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["DB Engine", "DB Instance Class", "Security Group", "IAM Role", "This is a bad question and does not have an objective answer."]
explanation = ["DB Engine is correct as you must choose a specific database engine for your RDS instance.", "DB Instance Class is also correct because you need to specify the compute and memory capacity of the DB instance.", "Security Group is wrong since the default security group can be used if not specified.", "IAM Role is wrong as it's optional based on the needs of your application."]
answers = ["DB Engine", "DB Instance Class"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9f5a6202-0d08-458e-836e-46b0cb867581"
question = "Which of the following will Amazon RDS automatically handle for you?"
good_bad_why = "Answers: [1,2]\n"
options = ["Database software patching", "Scaling compute and storage resources up and down", "Database instance failure detection", "Database backups", "This is a bad question and does not have an objective answer."]
explanation = ["Database software patching is correct; RDS automatically applies minor version updates during your maintenance window.", "Scaling compute and storage resources up and down is wrong as RDS does not automatically resize; that must be done manually.", "Database instance failure detection is correct because RDS can automatically detect when an instance becomes unhealthy.", "Database backups is also correct since RDS automates snapshots and backups based on your configuration."]
answers = ["Database software patching", "Database instance failure detection"]
alternative_answers = ["Database backups", "Database instance failure detection", "Database software patching"]
claude_answers = ["Database software patching", "Database backups"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5196a612-c5c6-4c52-b087-a21461a6bbfe"
question = "What is the maximum storage size for a single Amazon RDS instance, depending on the DB engine type?"
good_bad_why = "Answers: [1,2]\n"
options = ["Up to 16 TB", "Up to 64 TB", "Up to 32 TB", "Up to 100 TB", "This is a bad question and does not have an objective answer."]
explanation = ["Up to 16 TB is wrong as this is outdated for certain DB engines.", "Up to 64 TB is correct for engines like Aurora MySQL, allowing significantly more space.", "Up to 32 TB is wrong as that only applies to specific engines.", "Up to 100 TB is incorrect; no single RDS instance offers this size."]
answers = ["Up to 64 TB"]
claude_answers = ["Up to 64 TB"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f1d179bf-32d7-4de3-b7fe-b2b8f5a86f52"
question = "Which of the following are features of Amazon RDS performance insights?"
good_bad_why = "Answers: [1,2]\n"
options = ["Real-time query monitoring", "Integration with third-party monitoring tools", "Automated scaling of instance sizes", "Insight into database load", "This is a bad question and does not have an objective answer."]
explanation = ["Real-time query monitoring is correct because performance insights allows you to see which queries are consuming the most resources.", "Integration with third-party monitoring tools is correct since AWS provides an API for this purpose.", "Automated scaling of instance sizes is wrong as RDS does not automatically scale without user intervention.", "Insight into database load is also correct, providing detail on database performance."]
answers = ["Real-time query monitoring", "Insight into database load"]
alternative_answers = ["Real-time query monitoring", "Integration with third-party monitoring tools", "Insight into database load"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "31881f94-1f68-4e1b-9bc7-7e4e06f3368d"
question = "What is the main purpose of Amazon RDS parameter groups?"
good_bad_why = "Answers: [1,2]\n"
options = ["To manage user permissions", "To configure database settings", "To backup database data", "To monitor database performance", "This is a bad question and does not have an objective answer."]
explanation = ["To manage user permissions is wrong since IAM roles handle permissions.", "To configure database settings is correct as parameter groups allow you to modify DB engine settings.", "To backup database data is wrongâ€”backups are managed separately.", "To monitor database performance is incorrect since that is handled via performance insights."]
answers = ["To configure database settings"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ff05a514-bbd1-40f7-aaec-c7804833eaec"
question = "Which types of database engines are supported by Amazon RDS? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Oracle", "MongoDB", "PostgreSQL", "Cassandra", "This is a bad question and does not have an objective answer."]
explanation = ["Oracle is correct; Amazon RDS offers support for Oracle databases.", "MongoDB is wrong; it is not supported by RDS as it is a NoSQL database.", "PostgreSQL is correct; it is one of the supported engines in RDS.", "Cassandra is wrong as it does not fall under RDS supported databases."]
answers = ["Oracle", "PostgreSQL"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5e546d32-c1b4-4dbc-9f25-4fe541c52afd"
question = "Which AWS services can be integrated with Amazon RDS for additional features? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Lambda", "Amazon S3", "Amazon SNS", "Amazon CloudFront", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Lambda is correct since it can be used to execute functions based on RDS events or database activity.", "Amazon S3 is also correct because you can use it for data transfers and backups alongside RDS.", "Amazon SNS is wrong because while you can send notifications, it is not directly integrated for feature enhancement with RDS.", "Amazon CloudFront is wrong as it is primarily for content distribution, not database services."]
answers = ["AWS Lambda", "Amazon S3"]
claude_answers = ["Amazon CloudFront", "Amazon SNS"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "829dd091-2b39-4e45-8dc3-d61076b99916"
question = "What two AWS services can be used to monitor and manage the performance of EC2 instances? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon CloudWatch", "AWS CloudTrail", "AWS Config", "AWS Systems Manager", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail is primarily for logging API calls and not for monitoring performance.", "AWS Config is for compliance and configuration tracking rather than performance monitoring.", "AWS Systems Manager can assist in managing EC2 but is not primarily used for performance monitoring."]
answers = ["Amazon CloudWatch", "AWS Systems Manager"]
alternative_answers = ["Amazon CloudWatch", "AWS Systems Manager"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9db787a9-565c-4453-8604-285ced973436"
question = "Which AWS service allows you to automate the management of your EC2 instances? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Lambda", "Amazon EC2 Auto Scaling", "AWS Step Functions", "AWS Batch", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Lambda is used for serverless execution rather than instance management.", "AWS Step Functions is for building serverless workflows and does not directly manage instances.", "AWS Batch is for running batch computing jobs and does not automatically scale instances."]
answers = ["Amazon EC2 Auto Scaling"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b26db2ae-347a-4728-8ba0-fff8491d2931"
question = "Which SDK would you primarily use for implementing AWS services within a Python application? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CLI", "AWS SDK for .NET", "Boto3", "AWS Amplify", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CLI is for command-line interactions and not specific to Python.", "AWS SDK for .NET is targeted for .NET applications, not Python.", "AWS Amplify is more geared toward web and mobile app development, not a direct SDK for Python."]
answers = ["Boto3"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1ee4e8df-f0cc-45ed-b1f2-07230df0bd9c"
question = "What is the primary purpose of the AWS CloudFormation service? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Monitoring AWS resources", "Creating and managing infrastructure as code", "Analyzing AWS resource usage", "Deploying machine learning models", "This is a bad question and does not have an objective answer."]
explanation = ["Monitoring AWS resources is primarily handled by Amazon CloudWatch.", "Analyzing AWS resource usage is done through AWS Cost Explorer or AWS Cost and Usage Reports.", "Deploying machine learning models is primarily done via AWS SageMaker."]
answers = ["Creating and managing infrastructure as code"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "08b7b38c-d577-4eab-83b7-a749da9b4704"
question = "In which AWS service can you create a set of automated rules for managing responses to CloudWatch alarms? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Lambda", "Amazon SNS", "AWS CloudTrail", "AWS Systems Manager", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Lambda can execute code based on triggers but does not manage responses directly.", "Amazon SNS is for sending notifications but does not have management capabilities for alarms.", "AWS CloudTrail is used for logging API requests and not for managing alarms."]
answers = ["AWS Systems Manager"]
alternative_answers = ["Amazon SNS"]
claude_answers = ["Amazon SNS"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "589d2477-8195-4a43-baad-eb44f796c981"
question = "Which of the following tools can you use to visualize your AWS architecture and manage the overall design? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudFormation Designer", "AWS Config", "AWS Systems Manager", "Amazon CloudWatch", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Config helps track resource configurations rather than visualizing architecture.", "AWS Systems Manager provides operational data but not architectural visualization.", "Amazon CloudWatch is focused on monitoring rather than architecture."]
answers = ["AWS CloudFormation Designer"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5126e402-4378-4854-a7c9-3d1ded2f4d4b"
question = "Which AWS service provides a serverless way to run code in response to events? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Batch", "AWS Lambda", "Amazon EC2", "Amazon EKS", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Batch is for running batch jobs and requires server resources.", "Amazon EC2 is a virtual server solution and not serverless.", "Amazon EKS is for managing Kubernetes clusters and is not serverless."]
answers = ["AWS Lambda"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0914da99-2454-4f23-8f08-e128af06d376"
question = "Which AWS SDK can be utilized for implementing machine learning models in Java applications? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS SDK for Java", "Boto3", "AWS SDK for JavaScript", "AWS Amplify", "This is a bad question and does not have an objective answer."]
explanation = ["Boto3 is specifically for Python, not Java.", "AWS SDK for JavaScript is aimed at web and app developers, not Java applications.", "AWS Amplify is a framework for building cloud-enabled apps, not a direct SDK for machine learning."]
answers = ["AWS SDK for Java"]
claude_answers = ["AWS SDK for Java]\n\nThe AWS SDK for Java provides access to a wide range of AWS services, including machine learning services like Amazon SageMaker. This SDK allows Java developers to build applications that interact with AWS resources and services, including implementing machine learning models."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "58ae31f7-7259-4626-b891-a9a583d24004"
question = "What is the role of AWS IAM in the context of AWS tools and SDKs? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To manage performance metrics", "To control access to AWS resources", "To automate infrastructure deployment", "To analyze cost optimization", "This is a bad question and does not have an objective answer."]
explanation = ["Managing performance metrics is the role of Amazon CloudWatch.", "Automating infrastructure deployment is the role of AWS CloudFormation.", "Analyzing cost optimization can be done using AWS Cost Explorer."]
answers = ["To control access to AWS resources"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ea3c9211-2a51-40af-8fe8-22229772cd57"
question = "Which AWS service would you use to run scripts that can automatically manage your AWS resources based on defined rules? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["EC2 Auto Scaling", "AWS Lambda", "Amazon S3", "AWS OpsWorks", "This is a bad question and does not have an objective answer."]
explanation = ["EC2 Auto Scaling is used for scaling instances based on demand but not for running scripts.", "Amazon S3 is for storage and does not manage resources directly.", "AWS OpsWorks is for configuration management and deployment but does not specifically refer to automation scripts."]
answers = ["AWS Lambda"]
fakebot_answers = []
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "8b9a8db9-08b5-4afe-b155-2da41bf13193"
question = "Which AWS CLI command is used to list all EC2 instances in your account? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["aws ec2 describe-instances", "aws ec2 list-instances", "aws ec2 show-instances", "aws ec2 get-instances", "This is a bad question and does not have an objective answer."]
explanation = ["answer 1 is correct because this command retrieves information about instances.", "answer 2 is wrong because 'list-instances' is not a valid command.", "answer 3 is wrong because 'show-instances' is not a recognized AWS CLI command.", "answer 4 is wrong because 'get-instances' is not a valid command."]
answers = ["aws ec2 describe-instances"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3fa5792b-7ada-41ef-816a-bd387c0d98ca"
question = "What is the command to create a new S3 bucket using the AWS CLI? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["aws s3 mb s3://my-bucket", "aws s3 create-bucket s3://my-bucket", "aws s3api create-bucket --bucket my-bucket", "aws s3 cp my-file s3://my-bucket", "This is a bad question and does not have an objective answer."]
explanation = ["answer 1 is correct because this command creates a new S3 bucket.", "answer 2 is wrong because 'create-bucket' is not a valid command in 'aws s3'.", "answer 3 is also correct as it uses s3api to create a bucket; however, it's not as common.", "answer 4 is wrong because 'cp' is used to copy files to S3, not create buckets."]
answers = ["aws s3 mb s3://my-bucket"]
alternative_answers = ["aws s3 mb s3://my-bucket", "aws s3api create-bucket --bucket my-bucket"]
claude_answers = ["aws s3 mb s3://my-bucket", "aws s3api create-bucket --bucket my-bucket"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "19d98a24-4634-44a5-bdcf-ec0e2adb4ecf"
question = "Which AWS CLI command retrieves the current IAM user information? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["aws iam get-user", "aws iam describe-user", "aws iam list-users", "aws iam info-user", "This is a bad question and does not have an objective answer."]
explanation = ["answer 1 is correct because 'get-user' retrieves information about the IAM user.", "answer 2 is wrong because 'describe-user' is not a valid command in AWS CLI.", "answer 3 is wrong because it lists all users, not just the current user.", "answer 4 is wrong because 'info-user' is not a command in AWS CLI."]
answers = ["aws iam get-user"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f42fd987-17f2-4fcd-82b1-3a61254f8611"
question = "What command would you use to stop an EC2 instance using AWS CLI? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["aws ec2 stop-instances --instance-ids i-1234567890abcdef0", "aws ec2 terminate-instances --instance-ids i-1234567890abcdef0", "aws ec2 shutdown-instances --instance-ids i-1234567890abcdef0", "aws ec2 power-off-instances --instance-ids i-1234567890abcdef0", "This is a bad question and does not have an objective answer."]
explanation = ["answer 1 is correct since it properly stops the EC2 instance.", "answer 2 is wrong because 'terminate-instances' stops and permanently deletes instances, not just stops them.", "answer 3 is wrong; 'shutdown-instances' is not a valid command.", "answer 4 is wrong because 'power-off-instances' is not a recognized command."]
answers = ["aws ec2 stop-instances --instance-ids i-1234567890abcdef0"]
claude_answers = ["aws ec2 terminate-instances --instance-ids i-1234567890abcdef0", "aws ec2 stop-instances --instance-ids i-1234567890abcdef0"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "0701eed4-e1f3-4092-a718-3d621a698e2b"
question = "Which command is used to copy files from your local filesystem to an S3 bucket? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["aws s3 cp myfile.txt s3://my-bucket/", "aws s3 sync myfile.txt s3://my-bucket/", "aws s3 put myfile.txt s3://my-bucket/", "aws s3 upload myfile.txt s3://my-bucket/", "This is a bad question and does not have an objective answer."]
explanation = ["answer 1 is correct as 'cp' is the command used to copy files to S3.", "answer 2 is wrong because 'sync' is used for synchronizing directories, not for single files directly.", "answer 3 is wrong because 'put' is not a valid command under 'aws s3'.", "answer 4 is wrong because 'upload' is not a valid command in AWS CLI."]
answers = ["aws s3 cp myfile.txt s3://my-bucket/"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "014980c0-eabd-47de-9a0f-09b3034c22a9"
question = "What command is used to delete a specified S3 bucket using AWS CLI? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["aws s3 rb s3://my-bucket", "aws s3 delete-bucket s3://my-bucket", "aws s3 rm s3://my-bucket", "aws s3 rmdir s3://my-bucket", "This is a bad question and does not have an objective answer."]
explanation = ["answer 1 is correct because 'rb' stands for remove bucket.", "answer 2 is wrong because 'delete-bucket' is not a valid command.", "answer 3 is wrong because 'rm' deletes objects, not the bucket itself.", "answer 4 is wrong as 'rmdir' is not a recognized command."]
answers = ["aws s3 rb s3://my-bucket"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "acf9775f-7331-4f88-8e52-bc2d87233d31"
question = "Which command can you use to describe a CloudFormation stack? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["aws cloudformation describe-stacks --stack-name my-stack", "aws cloudformation list-stacks", "aws cloudformation show-stack --stack-name my-stack", "aws cloudformation get-stack --stack-name my-stack", "This is a bad question and does not have an objective answer."]
explanation = ["answer 1 is correct as it describes a specific stack.", "answer 2 is wrong because it lists stacks but doesn't describe a specific one.", "answer 3 is wrong because 'show-stack' is not a valid command.", "answer 4 is wrong because 'get-stack' is not a valid command in AWS CLI."]
answers = ["aws cloudformation describe-stacks --stack-name my-stack"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "39a4587e-1484-4057-a3e2-3ae1df19bea2"
question = "What is the command to enable versioning on an S3 bucket? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled", "aws s3 enable-versioning --bucket my-bucket", "aws s3api versioning enable --bucket my-bucket", "aws s3 put-versioning --bucket my-bucket --status Enabled", "This is a bad question and does not have an objective answer."]
explanation = ["answer 1 is correct because it properly enables versioning on the specified bucket.", "answer 2 is wrong because 'enable-versioning' is not a valid command.", "answer 3 is wrong because 'versioning enable' is not a valid command in AWS CLI.", "answer 4 is wrong because 'put-versioning' isn't a recognized command."]
answers = ["aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ef093645-5895-47a4-880f-43f1d87e2781"
question = "Which CLI command can be used to get the list of available regions in AWS? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["aws ec2 describe-regions", "aws ec2 list-regions", "aws ec2 available-regions", "aws ec2 get-regions", "This is a bad question and does not have an objective answer."]
explanation = ["answer 1 is correct, as 'describe-regions' returns the list of regions.", "answer 2 is wrong because 'list-regions' is not recognized.", "answer 3 is wrong because 'available-regions' is not a valid command.", "answer 4 is wrong as 'get-regions' is not a recognized command."]
answers = ["aws ec2 describe-regions"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c274562c-a4df-4343-8009-b1ecf81bba36"
question = "What command should you use to view the last 10 CloudWatch log entries for a log stream? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["aws logs get-log-events --log-group-name my-log-group --log-stream-name my-log-stream --limit 10", "aws logs describe-log-streams --log-group-name my-log-group --log-stream-name my-log-stream --limit 10", "aws logs tail --log-group-name my-log-group --log-stream-name my-log-stream --tail 10", "aws logs fetch-log-events --log-group-name my-log-group --log-stream-name my-log-stream --limit 10", "This is a bad question and does not have an objective answer."]
explanation = ["answer 1 is correct as it retrieves log events from the specified log stream.", "answer 2 is wrong because it describes streams but does not fetch log entries.", "answer 3 is wrong since 'tail' is not a valid command in this way.", "answer 4 is wrong because 'fetch-log-events' is not an existing AWS CLI command."]
answers = ["aws logs get-log-events --log-group-name my-log-group --log-stream-name my-log-stream --limit 10"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e0b87831-8b1c-4143-8614-a0325c335d4d"
question = "What are two benefits of using AWS CloudFormation? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Simplifies resource management", "Requires manual configuration for each resource", "Supports version control of infrastructure", "Only works with AWS resources", "This is a bad question and does not have an objective answer."]
explanation = ["Simplifies resource management is correct because AWS CloudFormation automates the provisioning of resources.", "Requires manual configuration for each resource is wrong because CloudFormation allows for automated resource configuration.", "Supports version control of infrastructure is correct because changes can be tracked in CloudFormation templates.", "Only works with AWS resources is wrong because CloudFormation also supports custom resources and third-party integrations."]
answers = ["Simplifies resource management", "Supports version control of infrastructure"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3ad94ea4-d3a1-48e1-a7e6-7fbf1724afb3"
question = "Which of the following is a valid reason to use AWS CloudFormation for your deployment? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To manually deploy resources to increase flexibility", "To create repeatable and predictable deployments", "To avoid using code altogether", "To bypass AWS resource limits", "This is a bad question and does not have an objective answer."]
explanation = ["To create repeatable and predictable deployments is correct because CloudFormation enables you to define your infrastructure as code, ensuring consistent deployments.", "To manually deploy resources to increase flexibility is wrong as CloudFormation promotes automation.", "To avoid using code altogether is incorrect since CloudFormation requires YAML or JSON to define resources.", "To bypass AWS resource limits is wrong because CloudFormation still adheres to AWS resource limits."]
answers = ["To create repeatable and predictable deployments"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8072a55e-38d9-44da-a78d-8aba7d0246ba"
question = "When utilizing AWS CloudFormation StackSets, which of the following can you manage across accounts and regions? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Stack instances", "Nested stacks", "CloudFormation console views", "Template parameters", "This is a bad question and does not have an objective answer."]
explanation = ["Stack instances is correct because StackSets allow for the management of stack instances across multiple AWS accounts and regions.", "Nested stacks is wrong because these are meant to be used within a single stack context.", "CloudFormation console views is incorrect as they are specific to the AWS account in use.", "Template parameters are not managed but can be specified per stack instance."]
answers = ["Stack instances"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3604548d-e1e5-45a2-a75d-c31b13cdeb97"
question = "What type of resource can you define in an AWS CloudFormation template? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Only compute resources like EC2", "Any AWS resource, including networking and storage", "Resources must be in the same region", "Templates can only define AWS managed services", "This is a bad question and does not have an objective answer."]
explanation = ["Any AWS resource, including networking and storage is correct because CloudFormation supports a wide range of AWS resources and services.", "Only compute resources like EC2 is wrong because CloudFormation supports various services, not limited to compute.", "Resources must be in the same region is incorrect as CloudFormation can deploy resources in different regions through StackSets.", "Templates can only define AWS managed services is wrong because you can define custom resources as well."]
answers = ["Any AWS resource, including networking and storage"]
alternative_answers = ["Any AWS resource", "including networking and storage"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0bbeda77-57be-4d42-9b69-ac324ec6b409"
question = "How can you utilize AWS CloudFormation to manage infrastructure as code? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["By using the AWS Management Console only", "By defining resources in a template file", "By manually configuring each service", "By launching services separately", "This is a bad question and does not have an objective answer."]
explanation = ["By defining resources in a template file is correct because this is how CloudFormation allows you to define and manage resources as code.", "By using the AWS Management Console only is incorrect since templates must be created separately.", "By manually configuring each service contradicts the purpose of CloudFormation, which is to automate infrastructure management.", "By launching services separately misses the key value proposition of CloudFormation's automation."]
answers = ["By defining resources in a template file"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "963bd134-84cf-4458-bf07-399b6386174b"
question = "What is a common use case for AWS CloudFormation nested stacks? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To deploy a complex application stack in one operation", "To isolate different accounts", "To create a single CloudFormation stack for each resource", "To speed up deployment of template files", "This is a bad question and does not have an objective answer."]
explanation = ["To deploy a complex application stack in one operation is correct as nested stacks can modularize the deployment process and manage related resources together.", "To isolate different accounts is incorrect as nested stacks do not serve this purpose.", "To create a single CloudFormation stack for each resource is not advantageous and defeats the purpose of nested stacks.", "To speed up deployment of template files is misleading; nested stacks are for modular architecture rather than speed."]
answers = ["To deploy a complex application stack in one operation"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1714ba53-a796-4f8c-921c-f29f045d111d"
question = "What does the 'UpdateStack' operation do in AWS CloudFormation? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Recreates the stack from scratch", "Applies changes to the stack based on the updated template", "Deletes the stack and all associated resources", "Logs all stack activities to CloudTrail", "This is a bad question and does not have an objective answer."]
explanation = ["Applies changes to the stack based on the updated template is correct because the UpdateStack operation applies modifications without needing to delete and recreate.", "Recreates the stack from scratch is incorrect as the update is done in place.", "Deletes the stack and all associated resources is wrong; that describes 'DeleteStack' not 'UpdateStack'.", "Logs all stack activities to CloudTrail is misleading; CloudFormation itself does not log actions unless explicitly configured."]
answers = ["Applies changes to the stack based on the updated template"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0f7693ec-adee-480f-8425-03e16a3a30a5"
question = "Which intrinsic function allows you to refer to values defined in the parameters section of a CloudFormation template? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Ref", "GetAtt", "Condition", "ImportValue", "This is a bad question and does not have an objective answer."]
explanation = ["Ref is correct because it is used to reference a parameter value in a CloudFormation template.", "GetAtt is wrong as it refers to attributes of resources.", "Condition is incorrect as it is used to define conditional logic in templates and does not reference parameters.", "ImportValue is used to get values from other stacks, not parameters."]
answers = ["Ref"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3c615a34-3428-4ad0-9fd0-0c2bc8faa713"
question = "When using AWS CloudFormation, what does the 'Rollback' feature do? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Automatically reverts to the previous version of the stack if an update fails", "Manually triggers a stack update", "Only applies to stack deletions", "Ignores all changes made during an update", "This is a bad question and does not have an objective answer."]
explanation = ["Automatically reverts to the previous version of the stack if an update fails is correct as the Rollback feature reverts to the last stable state in case of failure.", "Manually triggers a stack update is wrong since Rollback happens automatically when an error occurs during an update.", "Only applies to stack deletions is incorrect as Rollback is relevant for updates, not deletions.", "Ignores all changes made during an update misunderstands the Rollback purpose; it reverts changes if the update fails."]
answers = ["Automatically reverts to the previous version of the stack if an update fails"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "01fff34c-0d77-498c-abd6-32457d711f5b"
question = "Which CloudFormation resource type is used to create AWS S3 buckets? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS::S3::Bucket", "AWS::S3::Object", "AWS::Resource::S3", "AWS::Bucket::S3", "This is a bad question and does not have an objective answer."]
explanation = ["AWS::S3::Bucket is correct as this is the valid resource type to create an S3 bucket in a CloudFormation template.", "AWS::S3::Object is wrong because it refers to objects within an S3 bucket, not the bucket itself.", "AWS::Resource::S3 is incorrect as it is not a defined resource type.", "AWS::Bucket::S3 is not valid syntax in CloudFormation resources."]
answers = ["AWS::S3::Bucket"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "64060b17-8957-44b3-9b4b-13dc15704399"
question = "What are the primary uses of AWS CloudTrail? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Monitoring API calls", "Data storage", "Data analysis", "Security auditing", "This is a bad question and does not have an objective answer."]
explanation = ["Monitoring API calls is correct because CloudTrail records calls made to the AWS API.", "Data storage is incorrect because CloudTrail itself does not provide storage solutions but rather logs events.", "Data analysis is incorrect as CloudTrail does not analyze data but records events for later inspection.", "Security auditing is correct because CloudTrail logs provide an audit trail for security purposes."]
answers = ["Monitoring API calls", "Security auditing"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5c9fb329-a220-4c5a-97fe-953558d8b460"
question = "Which AWS services can be integrated with AWS CloudTrail for event monitoring? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon S3", "Amazon EC2", "AWS Lambda", "AWS CloudFormation", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon S3 is correct because CloudTrail can log events and store them in S3 buckets.", "Amazon EC2 is incorrect because while EC2 events can be logged, it is not a service that directly integrates with CloudTrail.", "AWS Lambda is correct as Lambda can process events logged by CloudTrail.", "AWS CloudFormation is incorrect since it provisions resources based on templates but does not directly interact with CloudTrail."]
answers = ["Amazon S3", "AWS Lambda"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7583fca0-b691-47a6-801a-f9f59a8dd7c9"
question = "What must you do to ensure AWS CloudTrail is capturing all API calls for all regions?"
good_bad_why = "Answers: [1,2]\n"
options = ["Enable CloudTrail for each region individually", "Enable CloudTrail in the management account only", "Use a single CloudTrail trail for all regions", "Create multiple trails for each region", "This is a bad question and does not have an objective answer."]
explanation = ["Enable CloudTrail for each region individually is incorrect as you can use a single trail to capture activities across all regions.", "Enable CloudTrail in the management account only is incorrect because CloudTrail doesn't limit logging to the management account.", "Use a single CloudTrail trail for all regions is correct because you can set a trail that includes all regions.", "Create multiple trails for each region is incorrect since this creates unnecessary complexity."]
answers = ["Use a single CloudTrail trail for all regions"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ae1db20c-5c06-4840-b785-c294dc76824f"
question = "Which feature of AWS CloudTrail helps to reduce the cost of event logging?"
good_bad_why = "Answers: [1,2]\n"
options = ["S3 bucket lifecycle policies", "Aggregating logs", "Setting log file integrity validation", "Working with AWS Organizations", "This is a bad question and does not have an objective answer."]
explanation = ["S3 bucket lifecycle policies is correct as implementing lifecycle policies can help manage log storage costs over time.", "Aggregating logs is incorrect since CloudTrail logs are inherently recorded for each event and not aggregated.", "Setting log file integrity validation is incorrect as it does not reduce costs; it ensures data integrity.", "Working with AWS Organizations does not directly reduce costs; it provides management of multiple accounts."]
answers = ["S3 bucket lifecycle policies"]
alternative_answers = ["S3 bucket lifecycle policies", "Aggregating logs"]
claude_answers = ["Aggregating logs"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "bbb479dc-9e04-4837-b32a-6146b9d6185e"
question = "When enabling AWS CloudTrail, what is the default log retention period?"
good_bad_why = "Answers: [1,2]\n"
options = ["1 year", "30 days", "90 days", "No default retention", "This is a bad question and does not have an objective answer."]
explanation = ["1 year is incorrect as there is no default log retention period specified.", "30 days is incorrect because CloudTrail does not set automatic retention.", "90 days is incorrect for the same reason.", "No default retention is correct as the logs are stored in S3, and it is up to you to manage retention."]
answers = ["No default retention"]
claude_answers = ["30 days"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1c244f62-edec-47f2-ad72-c704c7fe192d"
question = "How can you verify the integrity of your CloudTrail logs?"
good_bad_why = "Answers: [1,2]\n"
options = ["Enable log file integrity validation", "Use CloudTrail event selectors", "Set up AWS Config", "Compare logs manually", "This is a bad question and does not have an objective answer."]
explanation = ["Enable log file integrity validation is correct because this feature helps confirm that log files have not been tampered with.", "Use CloudTrail event selectors is incorrect as they are used to filter logs but do not validate integrity.", "Set up AWS Config is incorrect since it monitors resource configurations and not log integrity.", "Compare logs manually is impractical and not a reliable verification method."]
answers = ["Enable log file integrity validation"]
alternative_answers = ["Compare logs manually", "Enable log file integrity validation"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b9f25eaf-fb4a-4257-ba5e-f89f88c24f55"
question = "Which of the following statements about AWS CloudTrail is true?"
good_bad_why = "Answers: [1,2]\n"
options = ["CloudTrail can log AWS API calls made by users and AWS services", "CloudTrail captures console sign-ins", "All regions must have their own unique trails", "CloudTrail does not support SNS notifications", "This is a bad question and does not have an objective answer."]
explanation = ["CloudTrail can log AWS API calls made by users and AWS services is correct as it captures diverse activities across AWS.", "CloudTrail captures console sign-ins is also correct; CloudTrail records all calls, including sign-ins.", "All regions must have their own unique trails is incorrect as a single trail can be applied to all regions.", "CloudTrail does not support SNS notifications is also incorrect because SNS can be used for notifications about trail events."]
answers = ["CloudTrail can log AWS API calls made by users and AWS services", "CloudTrail captures console sign-ins"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "49604e57-9d9a-4d8a-9469-da8aebf5672a"
question = "What does AWS CloudTrail log for an AWS Lambda function?"
good_bad_why = "Answers: [1,2]\n"
options = ["Function code changes", "API calls made by the function", "Resource usage metrics", "None of the above", "This is a bad question and does not have an objective answer."]
explanation = ["Function code changes is incorrect because CloudTrail does not track code changes of Lambda.", "API calls made by the function is correct as CloudTrail records API calls made by the Lambda function.", "Resource usage metrics is incorrect because CloudTrail does not log usage metrics.", "None of the above is incorrect as CloudTrail does log API calls for Lambda."]
answers = ["API calls made by the function"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8a805cec-3d27-4c6a-9fb0-2186dac9eda7"
question = "In which format does CloudTrail deliver log files?"
good_bad_why = "Answers: [1,2]\n"
options = ["CSV", "JSON", "Plain text", "Apache log format", "This is a bad question and does not have an objective answer."]
explanation = ["CSV is incorrect because CloudTrail does not deliver logs in CSV format.", "JSON is incorrect as the logs are in a different format.", "Plain text is incorrect as CloudTrail uses a structured format.", "Apache log format is incorrect; however, it delivers logs in a specific S3 bucket using a structured format for ease of analysis."]
answers = ["JSON"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0e217d4c-27c5-4fcf-b070-41200196d3bb"
question = "Which of the following can you monitor in Amazon CloudWatch? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["EC2 instance metrics", "IAM user activity", "RDS database performance", "S3 bucket policies", "This is a bad question and does not have an objective answer."]
explanation = ["IAM user activity is incorrect because CloudWatch does not monitor IAM directly. It focuses on metrics and logs related to AWS resources.", "S3 bucket policies are incorrect as CloudWatch does not track policies, but you can monitor S3 bucket metrics."]
answers = ["EC2 instance metrics", "RDS database performance"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "62cdc6b0-8c03-43c5-9aad-f695579e2f3f"
question = "What is the main purpose of Amazon CloudWatch Alarms?"
good_bad_why = "Answers: [1,2]\n"
options = ["To create backup schedules", "To send notifications based on metric thresholds", "To store log data", "To manage AWS resource permissions", "This is a bad question and does not have an objective answer."]
explanation = ["To create backup schedules is incorrect because that is not the purpose of CloudWatch Alarms.", "To manage AWS resource permissions is incorrect as it doesn't pertain to CloudWatch Alarms."]
answers = ["To send notifications based on metric thresholds"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "90ac6ea1-d151-4626-966a-f51e2b47f2a4"
question = "Which AWS service can be integrated with Amazon CloudWatch to enable alerts on unresponsive EC2 instances?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Lambda", "AWS Systems Manager", "AWS Config", "AWS CloudTrail", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Lambda is not correct because Lambda is a compute service rather than an alerting or monitoring service.", "AWS Config is not correct as it is used for resource compliance rather than instance health monitoring."]
answers = ["AWS Systems Manager"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b5d968d7-494a-4f88-86a2-e16d45a9d3ac"
question = "How can you create a dashboard in Amazon CloudWatch?"
good_bad_why = "Answers: [1,2]\n"
options = ["By using the AWS CLI only", "By configuring the SNS notifications", "Through the CloudWatch console", "By using CloudFormation templates", "This is a bad question and does not have an objective answer."]
explanation = ["By configuring the SNS notifications is incorrect; while SNS can be used for notifications, dashboard creation is done through the console or APIs.", "By using CloudFormation templates is incorrect as it does not directly create dashboards."]
answers = ["Through the CloudWatch console"]
alternative_answers = ["By using CloudFormation templates", "Through the CloudWatch console"]
claude_answers = ["By using the CloudWatch console", "By using CloudFormation templates"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e0af74e3-e23f-40c5-82a4-e57fceb1c1ef"
question = "What does Amazon CloudWatch Logs allow you to do?"
good_bad_why = "Answers: [1,2]\n"
options = ["Store logs across multiple AWS regions", "Visualize logs using charts", "Monitor application log files", "Aggregate metrics from third-party services", "This is a bad question and does not have an objective answer."]
explanation = ["Store logs across multiple AWS regions is incorrect because logs are regional.", "Aggregate metrics from third-party services is incorrect as CloudWatch is limited to AWS services and custom metrics only."]
answers = ["Monitor application log files"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7f66129a-7ee5-443c-bd76-8db165257d2f"
question = "Which of the following statements is true about CloudWatch Log Groups?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["They can contain multiple log streams", "They directly store CloudTrail logs", "They are limited to EC2 instance logs", "They do not support custom namespaces", "This is a bad question and does not have an objective answer."]
explanation = ["They directly store CloudTrail logs is incorrect as CloudTrail logs are managed separately, although they can send logs to CloudWatch.", "They are limited to EC2 instance logs is false; log groups can contain logs from various sources."]
answers = ["They can contain multiple log streams"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "e37b3389-7690-4b02-81ed-57d0dac56fdb"
question = "What feature of Amazon CloudWatch enables you to centralize logs from multiple sources?"
good_bad_why = "Answers: [1,2]\n"
options = ["Log Groups", "Metrics", "Dashboards", "Alarms", "This is a bad question and does not have an objective answer."]
explanation = ["Metrics is incorrect; it does not centralize logs. Metrics focus on the numerical data of performance rather than log data.", "Dashboards are for visualization, not for centralization of logs."]
answers = ["Log Groups"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "02ee3c30-3240-4054-a627-fff647a0db9c"
question = "Which of the following can be used to trigger a CloudWatch Alarm?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Config changes", "S3 PUT operations", "CloudTrail events", "Custom CloudWatch metrics", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Config changes does not trigger alarms, as it is for resource compliance monitoring.", "S3 PUT operations do not trigger alarms directly; they could be logged but not directly relevant."]
answers = ["Custom CloudWatch metrics"]
alternative_answers = ["Custom CloudWatch metrics", "CloudTrail events", "AWS Config changes"]
claude_answers = ["AWS Config changes", "S3 PUT operations", "CloudTrail events", "Custom CloudWatch metrics"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "78d08f0e-501e-436c-8750-09df3aa042f0"
question = "How can you get an email alert when a specified metric is out of thresholds?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Create a CloudTrail", "Use Amazon SNS with a CloudWatch Alarm", "Invoke an AWS Lambda function directly", "Enable CloudFormation notifications", "This is a bad question and does not have an objective answer."]
explanation = ["Create a CloudTrail is incorrect; CloudTrail is for logging API calls, not for alerting.", "Enable CloudFormation notifications is incorrect as that does not directly provide alerts based on metrics."]
answers = ["Use Amazon SNS with a CloudWatch Alarm"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "6788d63b-a729-4015-a6b9-de9dbd2ebe8b"
question = "What is the data retention period for CloudWatch metrics?"
good_bad_why = "Answers: [1,2]\n"
options = ["1 month", "6 months", "1 year", "Indefinitely", "This is a bad question and does not have an objective answer."]
explanation = ["Indefinitely is incorrect; while logs can be retained indefinitely, metrics have specific retention policies. The data retention period decreases over time based on granularity.", "6 months is incorrect; that is not the period for the various metric data."]
answers = ["1 month"]
alternative_answers = ["1 month", "1 year", "6 months"]
claude_answers = ["6 months", "Indefinitely", "1 month", "1 year"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d9646ddf-1fc8-42bb-bdce-ca9846abbc57"
question = "What are the primary benefits of using AWS Compute Optimizer? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Improved instance sizing recommendations", "Enhanced network throughput", "Cost savings through optimized usage", "Increased storage capacity", "This is a bad question and does not have an objective answer."]
explanation = ["Enhanced network throughput is wrong because AWS Compute Optimizer does not directly optimize network configurations.", "Increased storage capacity is wrong because AWS Compute Optimizer focuses on compute resources, not storage."]
answers = ["Improved instance sizing recommendations", "Cost savings through optimized usage"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d50aaa9b-04d1-4718-a9d7-12eb2942fe80"
question = "Which AWS services can AWS Compute Optimizer analyze for sizing recommendations? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon EC2", "Amazon S3", "Amazon RDS", "AWS Lambda", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon S3 is wrong because it is a storage service, not directly related to compute resources.", "AWS Lambda is also not included as it is a serverless computing service that does not fit traditional sizing."]
answers = ["Amazon EC2"]
alternative_answers = ["Amazon RDS", "Amazon EC2"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f114e927-fe33-4841-a46d-53f193534c3f"
question = "How does AWS Compute Optimizer provide instance recommendations? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Using machine learning algorithms that analyze workloads", "Based on user-defined thresholds", "Based on historical performance metrics only", "Manual intervention by AWS support team", "This is a bad question and does not have an objective answer."]
explanation = ["Based on user-defined thresholds is wrong as recommendations come from analysis not user settings.", "Manual intervention by AWS support team is incorrect as it operates autonomously."]
answers = ["Using machine learning algorithms that analyze workloads"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c681d452-3dea-4329-9eed-4fc3e7a383cd"
question = "What type of recommendations can AWS Compute Optimizer provide? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Instance type recommendations", "Storage gateway recommendations", "Database optimization recommendations", "Network performance recommendations", "This is a bad question and does not have an objective answer."]
explanation = ["Storage gateway recommendations are incorrect as the Compute Optimizer focuses on compute elements.", "Database optimization recommendations are wrong because they fall under RDS or other database programs, not Compute Optimizer."]
answers = ["Instance type recommendations"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "36cccd60-ccfe-4aa4-b3a0-0672c4cbdac4"
question = "What does AWS Compute Optimizer use to gather performance data for recommendations? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudTrail notifications", "Amazon CloudWatch metrics", "EC2 instance log files", "AWS Trusted Advisor reports", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail notifications is wrong as they focus on API calls, not performance metrics.", "EC2 instance log files are incorrect as they do not aggregate detailed performance data for Compute Optimizer."]
answers = ["Amazon CloudWatch metrics"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b3255702-b7a1-4c8d-9913-0c57c5e43b44"
question = "Can AWS Compute Optimizer provide recommendations for Spot Instances? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Yes", "No", "Only during specific peak hours", "Only for EC2 Reserved Instances", "This is a bad question and does not have an objective answer."]
explanation = ["Only during specific peak hours is wrong because the recommendations are not time-bound.", "Only for EC2 Reserved Instances is incorrect as it applies to various instance types including On-Demand."]
answers = ["Yes"]
alternative_answers = ["No"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8afd3cad-c05d-4684-a0f8-aa55b773f3c1"
question = "Which resource type is not optimized by AWS Compute Optimizer? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Fargate tasks", "EC2 instances", "EBS volumes", "Lambda functions", "This is a bad question and does not have an objective answer."]
explanation = ["EC2 instances is wrong as they are key components for optimization.", "EBS volumes are incorrect as they are storage but not the focus of Compute Optimizer's compute resources."]
answers = ["Lambda functions"]
alternative_answers = ["EBS volumes"]
claude_answers = ["Fargate tasks"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f51720df-d3ac-45f8-baa4-6292c310bd1a"
question = "Which action is recommended after receiving a new instance type recommendation in AWS Compute Optimizer? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Deploy the new instance type immediately", "Evaluate the cost implications of the new recommendation", "Ignore it as it may not be accurate", "Never change your instance type", "This is a bad question and does not have an objective answer."]
explanation = ["Deploy the new instance type immediately is wrong because one should evaluate options before deploying.", "Ignore it as it may not be accurate is inaccurate as it's based on data analysis by Compute Optimizer."]
answers = ["Evaluate the cost implications of the new recommendation"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "85b7c95e-f46c-4e78-9e6b-a6e8a93fdc14"
question = "What frequency does AWS Compute Optimizer update its recommendations? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Daily", "Weekly", "Monthly", "As needed based on workload changes", "This is a bad question and does not have an objective answer."]
explanation = ["Daily is wrong because recommendations can take into account longer-term usage.", "Monthly is incorrect since workload dynamics can shift more frequently than once a month."]
answers = ["As needed based on workload changes"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "eb104f6c-ab5b-449c-a070-558f6ec99ab0"
question = "What must be enabled for AWS Compute Optimizer to give recommendations on EC2 instances? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Detailed monitoring", "Basic monitoring", "CloudTrail", "AWS Config", "This is a bad question and does not have an objective answer."]
explanation = ["Basic monitoring is insufficient; detailed metrics are needed for accurate recommendations.", "AWS Config is not necessary as it monitors configuration changes, not performance metrics."]
answers = ["Detailed monitoring"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f0e55e7f-3734-40a2-a7d3-845da817e904"
question = "What are two key benefits of using AWS Config? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Resource configuration history", "Automatic scaling of resources", "Detailed billing information", "Compliance auditing", "This is a bad question and does not have an objective answer."]
explanation = ["Resource configuration history is correct because AWS Config records changes in resource configurations over time.", "Automatic scaling of resources is wrong because AWS Config does not provide automatic scaling functionality.", "Detailed billing information is wrong because AWS Config doesn't handle billing; that's managed by AWS Cost Explorer.", "Compliance auditing is correct because AWS Config can help verify compliance with policies and regulations."]
answers = ["Resource configuration history", "Compliance auditing"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "aa304ae8-8159-4822-8c8a-d0623930477b"
question = "Which AWS service can help you visualize relationships between AWS resources in conjunction with AWS Config?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudTrail", "AWS Config Rules", "AWS Config Aggregator", "AWS Resource Groups", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail is wrong as it tracks API calls for auditing rather than visualizing resource relationships.", "AWS Config Rules, while related to compliance, does not visualize relationships.", "AWS Config Aggregator helps aggregate Config data but does not visualize relationships directly.", "AWS Resource Groups is correct as it allows you to group resources and see relationships among them."]
answers = ["AWS Resource Groups"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7b50cab7-ba02-4400-b4ef-1b795928ea98"
question = "Which AWS Config feature enables you to maintain control over changes made to your resources?"
good_bad_why = "Answers: [1,2]\n"
options = ["Resource relationships", "Config rules", "Snapshot history", "Notifications", "This is a bad question and does not have an objective answer."]
explanation = ["Resource relationships do not directly control changes; they show how resources are linked.", "Config rules are correct as they allow you to define and enforce desired configurations.", "Snapshot history is wrong; while it tracks changes, it does not enforce them.", "Notifications inform you of changes but do not control them."]
answers = ["Config rules"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5abf7cfc-f16f-4683-9843-1394d4a6d81e"
question = "Which of the following are valid AWS Config rule types? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Managed rules", "Custom rules", "Service-linked rules", "Predefined rules", "This is a bad question and does not have an objective answer."]
explanation = ["Managed rules are correct; they are provided by AWS and can be used directly.", "Custom rules are also correct; you can create them using AWS Lambda.", "Service-linked rules are not a type recognized by AWS Config.", "Predefined rules do not exist in AWS Config; rules can be managed or custom."]
answers = ["Managed rules", "Custom rules"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1518abc5-9a5c-4371-8fb8-9a78cf72a768"
question = "How does AWS Config determine whether a resource complies with a Config rule?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Using CloudFormation templates", "Analyzing resource relationships", "Evaluating the actual configuration against the rule's criteria", "By referencing AWS IAM roles", "This is a bad question and does not have an objective answer."]
explanation = ["Using CloudFormation templates is incorrect because Config does not validate resources against CloudFormation.", "Analyzing resource relationships does not determine compliance directly.", "Evaluating the actual configuration against the rule's criteria is correct; Config checks resource states against the rule.", "Referencing AWS IAM roles is not applicable to compliance checks."]
answers = ["Evaluating the actual configuration against the rule's criteria"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "0e7f145e-7f87-4cca-b075-ff1f4ee8950c"
question = "What is the primary purpose of an AWS Config aggregator?"
good_bad_why = "Answers: [1,2]\n"
options = ["To manage billing across accounts", "To consolidate AWS Config data across multiple accounts and regions", "To enable auto-scaling of resources", "To send notifications about resource changes", "This is a bad question and does not have an objective answer."]
explanation = ["To manage billing across accounts is incorrect; AWS Organizations handles billing.", "To consolidate AWS Config data across multiple accounts and regions is correct; it aggregates Config information.", "To enable auto-scaling of resources is not related to AWS Config.", "To send notifications about resource changes is wrong; Config does not inherently manage notifications, but it can send them through SNS."]
answers = ["To consolidate AWS Config data across multiple accounts and regions"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d2da604d-7f46-448d-8884-1cd01d3777c0"
question = "Which AWS service can be used in conjunction with AWS Config to remediate non-compliant resources automatically?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Lambda", "AWS CloudTrail", "AWS Simple Notification Service", "AWS Systems Manager", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Lambda is correct; it can execute code to remediate non-compliance.", "AWS CloudTrail records API calls, which doesn't help in remediation.", "AWS Simple Notification Service is for notifications and does not remediate resources.", "AWS Systems Manager is incorrect as it does not directly interface with AWS Config for remediation."]
answers = ["AWS Lambda"]
claude_answers = ["AWS Systems Manager"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "379acda7-9881-416e-9420-0e44155d9087"
question = "How are AWS Config rules evaluated for compliance?"
good_bad_why = "Answers: [1,2]\n"
options = ["Continuously", "Hourly", "Daily", "Upon creation only", "This is a bad question and does not have an objective answer."]
explanation = ["Continuously is correct; AWS Config evaluates resources against rules in near real-time.", "Hourly is incorrect; there is no set schedule for evaluations.", "Daily is incorrect for the same reason as hourly.", "Upon creation only is incorrect; Config evaluates compliance continuously throughout the resource's life cycle."]
answers = ["Continuously"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "360781de-ec1d-482d-97d2-d4402fb5ac57"
question = "What triggers AWS Config to record a configuration change?"
good_bad_why = "Answers: [1,2]\n"
options = ["Manual updates by users", "API calls affecting resources", "Scheduled intervals", "CloudFormation template applications", "This is a bad question and does not have an objective answer."]
explanation = ["Manual updates by users may affect config items but are not direct triggers.", "API calls affecting resources is correct; any change in resource state triggers a recording.", "Scheduled intervals are incorrect; Config reacts to changes immediately rather than on schedule.", "CloudFormation template applications may result in changes, but are not the only triggering action."]
answers = ["API calls affecting resources"]
alternative_answers = ["CloudFormation template applications", "API calls affecting resources", "Manual updates by users"]
claude_answers = ["CloudFormation template applications", "API calls affecting resources", "Scheduled intervals", "Manual updates by users"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d4d445c0-9380-4861-9cff-9a931f9e8537"
question = "In which format can AWS Config configuration snapshots be exported?"
good_bad_why = "Answers: [1,2]\n"
options = ["CSV", "JSON", "XML", "YAML", "This is a bad question and does not have an objective answer."]
explanation = ["CSV is not a supported format for AWS Config configuration snapshots.", "JSON is correct; snapshots can be exported in JSON format.", "XML is wrong because it is not a format used by AWS Config.", "YAML is also incorrect; snapshots are not exported in this format."]
answers = ["JSON"]
claude_answers = ["XML", "JSON", "CSV", "YAML"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e5f428ca-19aa-471e-8239-8ea9d8486193"
question = "Which two features does AWS Control Tower provide to help govern your multi-account environment? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Landing Zone", "Guardrails", "Account Factory", "Service Control Policies", "This is a bad question and does not have an objective answer."]
explanation = ["Landing Zone is a foundational setup but not a governance feature.", "Guardrails provide governance by enforcing policies.", "Account Factory is a component to create accounts but doesn't govern them.", "Service Control Policies are managed through AWS Organizations and are related to permissions."]
answers = ["Guardrails", "Service Control Policies"]
alternative_answers = ["Account Factory", "Guardrails"]
claude_answers = ["Guardrails", "Account Factory"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "adb77dc3-d2a1-4251-a8d6-8d6f3a87d72b"
question = "What is the primary purpose of AWS Control Tower's Account Factory?"
good_bad_why = "Answers: [1,2]\n"
options = ["To create and manage IAM users", "To provision new AWS accounts", "To monitor resource usage across accounts", "To enforce security policies", "This is a bad question and does not have an objective answer."]
explanation = ["Creating and managing IAM users is done through IAM services, not Control Tower.", "The Account Factory provisions new AWS accounts in accordance with your governance policies.", "Monitoring resource usage is a function of AWS CloudWatch and not specific to Control Tower.", "Enforcing security policies is done through guardrails, not the primary purpose of Account Factory."]
answers = ["To provision new AWS accounts"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c643e8cd-4844-4719-b439-ca497ec984b0"
question = "Which AWS service integrates with AWS Control Tower to provide visibility into the governance of your accounts?"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon CloudWatch", "AWS Config", "AWS CloudTrail", "AWS Organizations", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon CloudWatch provides monitoring, but not governance insights.", "AWS Config is responsible for resource compliance and configuration management, helping with governance.", "AWS CloudTrail logs account activity but isn't specifically focused on governance.", "AWS Organizations manages accounts but not governance visibility."]
answers = ["AWS Config"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0fe5dcb8-43f5-4292-a39c-ead435119646"
question = "How does AWS Control Tower implement guardrails?"
good_bad_why = "Answers: [1,2]\n"
options = ["By using AWS Config rules", "By creating IAM policies", "By provisioning new accounts under your organization", "By managing Service Control Policies", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Config rules are one way to monitor but not all guardrails.", "Creating IAM policies is a function of IAM services, not specific to Control Tower's guardrails.", "Guardrails help to enforce policies rather than provisioning accounts.", "Guardrails can include Service Control Policies as part of governance."]
answers = ["By using AWS Config rules", "By managing Service Control Policies"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "61aac7b8-d8b4-42da-b1c3-7cd2d5f5c271"
question = "What is the role of the AWS Control Tower Dashboard?"
good_bad_why = "Answers: [1,2]\n"
options = ["To create new IAM roles", "To provide a single view of compliance across accounts", "To manage billing for multiple accounts", "To launch instances across accounts", "This is a bad question and does not have an objective answer."]
explanation = ["Creating new IAM roles is not the purpose of the Dashboard.", "The AWS Control Tower Dashboard provides visibility and a compliance overview across accounts.", "Billing management is handled through AWS Billing and Cost Management.", "Launching instances is performed via EC2 services and not specifically through the Control Tower Dashboard."]
answers = ["To provide a single view of compliance across accounts"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "75a9281c-7a8a-47c6-ab5d-40b452a69679"
question = "Which AWS service can you configure guardrails to track the compliance of your accounts?"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon Inspector", "AWS Trusted Advisor", "AWS Config", "AWS Budgets", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon Inspector is for security assessments, not compliance tracking.", "AWS Trusted Advisor provides best practices but is not specifically for guardrail compliance.", "AWS Config tracks compliance of resources, making it suitable for guardrails.", "AWS Budgets helps monitor costs, not compliance."]
answers = ["AWS Config"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6a45bc37-124c-46c1-8684-8a9029972622"
question = "When launching a new account through AWS Control Tower, which configurations are automatically applied?"
good_bad_why = "Answers: [1,2]\n"
options = ["Default CloudFormation stacks", "Service Control Policies and guardrails", "IAM roles automatically created", "Region-specific settings", "This is a bad question and does not have an objective answer."]
explanation = ["Default CloudFormation stacks are not automatically created during account launch.", "Service Control Policies and guardrails are automatically applied to new accounts.", "IAM roles must be set up separately, not automatically created.", "Region-specific settings are user-defined and not automatically applied."]
answers = ["Service Control Policies and guardrails"]
alternative_answers = ["Service Control Policies and guardrails", "IAM roles automatically created"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9b4ca838-21d7-47c0-9d75-1d293942fcd2"
question = "What are the 'Mandatory' guardrails in AWS Control Tower?"
good_bad_why = "Answers: [1,2]\n"
options = ["Guardrails that are always enabled", "Optional policies that can be selected", "Policies that require approval to enable", "Policies only applicable to certain services", "This is a bad question and does not have an objective answer."]
explanation = ["Mandatory guardrails are enforced automatically within every Control Tower environment.", "Optional guardrails are choices made during the Control Tower setup.", "Guardrails require no approval; they are automatically applied if they are mandatory.", "Mandatory guardrails apply universally, not just to specific services."]
answers = ["Guardrails that are always enabled"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c6ed9490-a000-464b-ac3a-1a250662bd24"
question = "Which of the following is NOT a benefit of using AWS Control Tower?"
good_bad_why = "Answers: [1,2]\n"
options = ["Automated account provisioning", "Simplified compliance management", "Real-time alerting for service outages", "Central governance for multiple accounts", "This is a bad question and does not have an objective answer."]
explanation = ["Automated account provisioning is a key feature of Control Tower.", "Simplified compliance management is a fundamental benefit.", "Real-time alerting for service outages is not within the scope of Control Tower, which focuses on governance.", "Central governance for multiple accounts is a significant advantage of Control Tower."]
answers = ["Real-time alerting for service outages"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "711360ac-5e22-4be9-bb41-776c3fc244e1"
question = "How can you customize guardrails in AWS Control Tower?"
good_bad_why = "Answers: [1,2]\n"
options = ["By modifying AWS Config rules", "By adding additional service quotas", "By selecting from a predefined list during setup", "By creating custom CloudFormation templates", "This is a bad question and does not have an objective answer."]
explanation = ["You can view AWS Config rules, but can't directly modify them from Control Tower.", "Service quotas are not tied to the customization of guardrails.", "You can select from predefined mandatory and optional guardrails but cannot add custom ones directly.", "Custom CloudFormation templates are not used for guardrails in Control Tower."]
answers = ["By selecting from a predefined list during setup"]
alternative_answers = ["By modifying AWS Config rules", "By creating custom CloudFormation templates"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e9e76cf9-6f11-40bc-8e5b-57f35a272acd"
question = "What information can be found in the AWS Health Dashboard regarding service events? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Historical events", "Real-time notifications", "Change management insights", "Cost estimation", "This is a bad question and does not have an objective answer."]
explanation = ["Historical events are included to show past issues.", "Real-time notifications are part of AWS Health Dashboard functionality.", "Change management insights are not a direct feature of the Health Dashboard.", "Cost estimation is not available in AWS Health Dashboard."]
answers = ["Historical events", "Real-time notifications"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ae1e9def-d326-4b77-97be-4739c2d6fc4d"
question = "Which of the following are benefits of using the AWS Health Dashboard? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Personalized views for resource management", "Comprehensive cost analysis", "Enhanced security configuration", "Detailed troubleshooting guidance", "This is a bad question and does not have an objective answer."]
explanation = ["Personalized views help in managing resources effectively.", "Comprehensive cost analysis is not a function of the AWS Health Dashboard.", "Enhanced security configuration is not a part of the Health Dashboard.", "Detailed troubleshooting guidance is available based on the health events."]
answers = ["Personalized views for resource management", "Detailed troubleshooting guidance"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ac8b05ec-0d4d-467b-8b62-3058f21e758b"
question = "How does the AWS Health Dashboard alert users about events affecting their AWS services? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Email notifications", "CloudWatch Logs integration", "AWS Personal Health Dashboard", "Mobile app push notifications", "This is a bad question and does not have an objective answer."]
explanation = ["Email notifications can be configured for alerts about issues.", "CloudWatch Logs integration is not directly related to alerts from the Health Dashboard.", "AWS Personal Health Dashboard is a feature that provides alerts and information about events.", "Mobile app push notifications are not standard for the AWS Health Dashboard."]
answers = ["Email notifications", "AWS Personal Health Dashboard"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "26d3e8dd-befe-464d-8c01-1c5fb48cacb4"
question = "What types of events can you track in the AWS Health Dashboard? (Select 2)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Scheduled maintenance events", "Billing alerts", "Service degradation alerts", "Insider threat alerts", "This is a bad question and does not have an objective answer."]
explanation = ["Scheduled maintenance events are tracked in the AWS Health Dashboard.", "Billing alerts are not part of AWS Health Dashboard functionality.", "Service degradation alerts provide information about issues affecting service performance.", "Insider threat alerts are not tracked by the AWS Health Dashboard."]
answers = ["Scheduled maintenance events", "Service degradation alerts"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "e0e1eab5-42d2-473d-9265-6faf6c2a0436"
question = "Which features are part of the AWS Health Dashboard's proactive event tracking capabilities? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Event timeline", "API access for events", "Integration with third-party tools", "Historical outage records", "This is a bad question and does not have an objective answer."]
explanation = ["Event timeline allows users to track and visualize events over time.", "API access for events allows programmatic access to event data.", "Integration with third-party tools is not guaranteed by AWS Health Dashboard.", "Historical outage records are available but not explicitly categorized under proactive tracking."]
answers = ["Event timeline", "API access for events"]
alternative_answers = ["Integration with third-party tools", "API access for events"]
claude_answers = ["Event timeline", "Integration with third-party tools"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9f0fbb32-c4b0-4e8e-a50b-5062d0c04e2f"
question = "What can users expect to find in the 'Service Health' section of the AWS Health Dashboard? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Current operational status of AWS services", "Cost-related breakdown of service usage", "Upcoming maintenance schedules", "Details about regions affected by service issues", "This is a bad question and does not have an objective answer."]
explanation = ["Current operational status provides the live status of AWS services.", "Cost-related breakdown is not provided in the Service Health section.", "Upcoming maintenance schedules are highlighted for user awareness.", "Details about regions affected by service issues are clearly outlined."]
answers = ["Current operational status of AWS services", "Upcoming maintenance schedules"]
claude_answers = ["Current operational status of AWS services", "Details about regions affected by service issues"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c115f1ca-64ae-49fd-8b0f-70fc7da0f1de"
question = "In the context of AWS Health Dashboard, what distinguishes 'Personal Health Dashboard' from 'Service Health Dashboard'? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Personalized alerts for your resources", "General service status for all users", "Access to managed support tickets", "Real-time data for only your account", "This is a bad question and does not have an objective answer."]
explanation = ["Personalized alerts are tailored to the specific accounts and resources.", "General service status is provided by Service Health Dashboard, not Personal Health.", "Access to managed support tickets is unrelated to AWS Health Dashboard.", "Real-time data for only your account is featured in the Personal Health Dashboard."]
answers = ["Personalized alerts for your resources", "Real-time data for only your account"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "72822242-4ad0-4fe4-a785-91ac93cf3cf3"
question = "How can users interact with AWS Health Dashboard for monitoring purposes? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Use the AWS Management Console", "Via AWS CLI for querying health events", "Subscribe to external news feeds", "Configure AWS Lambda to send alerts", "This is a bad question and does not have an objective answer."]
explanation = ["The AWS Management Console provides a user interface for monitoring health dashboard events.", "AWS CLI enables users to query health events programmatically.", "Subscribing to external news feeds is not a feature of the AWS Health Dashboard.", "While you can use AWS Lambda for other functions, it does not directly send alerts from the Health Dashboard."]
answers = ["Use the AWS Management Console", "Via AWS CLI for querying health events"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ad62ec24-1e5d-46b6-89c0-c9c5a34143a4"
question = "What primary goal does the AWS Health Dashboard serve for AWS customers? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Increase resource costs", "Enhance operational awareness", "Reduce downtime through notifications", "Provide compliance audits", "This is a bad question and does not have an objective answer."]
explanation = ["Enhancing operational awareness is a key goal of AWS Health Dashboard.", "Reducing downtime through notifications is fundamental to its purpose.", "Increasing resource costs is not a goal of the Health Dashboard.", "Providing compliance audits is not a feature of the AWS Health Dashboard."]
answers = ["Enhance operational awareness", "Reduce downtime through notifications"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c9338c1a-0c3a-4965-944e-42d70f01057c"
question = "What are the primary components of a notification received through the AWS Health Dashboard? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Severity level of the event", "User's billing information", "Impact on resources", "Historical data statistics", "This is a bad question and does not have an objective answer."]
explanation = ["Severity level of the event helps users assess urgency.", "User's billing information is not included in health notifications.", "Impact on resources is a crucial part of understanding the event.", "Historical data statistics are not present in the immediate notifications."]
answers = ["Severity level of the event", "Impact on resources"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7e968e45-9ed7-4022-8346-e7449d53ba52"
question = "What are two key benefits of using AWS License Manager? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Facilitates tracking of licenses", "Reduces operational costs", "Automatically renews licenses", "Provides integration with on-premises environments", "This is a bad question and does not have an objective answer."]
explanation = ["Facilitates tracking of licenses is correct because AWS License Manager helps manage licenses efficiently.", "Reduces operational costs is correct because it enables better oversight, potentially leading to cost savings.", "Automatically renews licenses is incorrect as AWS License Manager does not handle auto-renewals directly.", "Provides integration with on-premises environments is incorrect because it primarily focuses on AWS resources."]
answers = ["Facilitates tracking of licenses", "Reduces operational costs"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "84497f8d-6c1b-4d55-8e6f-f50f8b4edb5b"
question = "In AWS License Manager, how can you manage licenses for software applications deployed on EC2 instances?"
good_bad_why = "Answers: [1,2]\n"
options = ["Create a license configuration and associate it with the instances", "Use AWS Budgets to manage software costs", "Integrate with AWS Marketplace", "Manually track licenses in a spreadsheet", "This is a bad question and does not have an objective answer."]
explanation = ["Create a license configuration and associate it with the instances is correct as this aligns with License Manager functionalities.", "Use AWS Budgets to manage software costs is incorrect because AWS Budgets relates to financial management, not direct license management.", "Integrate with AWS Marketplace is incorrect as it is separate and does not manage existing licenses.", "Manually track licenses in a spreadsheet is incorrect because License Manager automates this process."]
answers = ["Create a license configuration and associate it with the instances"]
alternative_answers = ["Integrate with AWS Marketplace", "Create a license configuration and associate it with the instances"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "14578067-02a8-450b-a416-c58b20974fc9"
question = "Which of the following actions can you NOT perform with AWS License Manager?"
good_bad_why = "Answers: [1,2]\n"
options = ["Track license usage", "Create license configurations", "Govern software subscriptions", "Purchase new software licenses", "This is a bad question and does not have an objective answer."]
explanation = ["Track license usage is incorrect because AWS License Manager is designed for tracking licenses.", "Create license configurations is incorrect as that's a primary function.", "Govern software subscriptions is incorrect because it helps manage such aspects.", "Purchase new software licenses is correct because License Manager does not facilitate purchasing new licenses."]
answers = ["Purchase new software licenses"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f7a3c5bf-a71d-4ba6-8d42-7e534143d32a"
question = "What is a primary purpose of AWS License Manager's license configuration?"
good_bad_why = "Answers: [1,2]\n"
options = ["To define how licenses are assigned and tracked", "To automate software deployment", "To manage billing cycles", "To monitor system performance", "This is a bad question and does not have an objective answer."]
explanation = ["To define how licenses are assigned and tracked is correct because this is the core functionality of License Manager.", "To automate software deployment is incorrect because License Manager does not handle deployments.", "To manage billing cycles is incorrect, as this falls outside of License Manager's scope.", "To monitor system performance is incorrect as License Manager focuses on licenses, not performance."]
answers = ["To define how licenses are assigned and tracked"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "bdee0280-25ee-4938-915c-a7844f90d4db"
question = "Which feature of AWS License Manager helps to prevent license overages?"
good_bad_why = "Answers: [1,2]\n"
options = ["License compliance notifications", "Automated cost reporting", "Integration with AWS Budgets", "Real-time dashboards", "This is a bad question and does not have an objective answer."]
explanation = ["License compliance notifications is correct as they alert users to potential compliance issues and overages.", "Automated cost reporting is incorrect as it doesn't prevent overages, but tracks costs.", "Integration with AWS Budgets is incorrect because while it helps manage costs, it doesn't directly address license overages.", "Real-time dashboards is incorrect as they provide visibility, but don't prevent overages."]
answers = ["License compliance notifications"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "665f4013-628e-40cb-b20d-62c8a3eb0b20"
question = "Which AWS service is primarily used to purchase third-party software licenses that can be managed through AWS License Manager?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["AWS Marketplace", "AWS Systems Manager", "AWS CloudFormation", "AWS Service Catalog", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Marketplace is correct because it's the platform through which third-party software licenses can be bought.", "AWS Systems Manager is incorrect as it assists with configuration management, not purchase.", "AWS CloudFormation is incorrect as it is focused on resource deployment.", "AWS Service Catalog is incorrect because it deals with managing IT services, not license purchases."]
answers = ["AWS Marketplace"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "a3ebb990-59ea-4eb7-aa12-69b1c2f8d777"
question = "How can AWS License Manager assist organizations in meeting compliance requirements?"
good_bad_why = "Answers: [1,2]\n"
options = ["By showing real-time usage data", "By providing automated license reports", "By enabling software audits", "By selling software licenses directly", "This is a bad question and does not have an objective answer."]
explanation = ["By showing real-time usage data is incorrect because while it may track, that's not its primary compliance feature.", "By providing automated license reports is correct as it helps in compliance by documenting usage.", "By enabling software audits is correct; License Manager can prepare for audits with thorough records.", "By selling software licenses directly is incorrect as License Manager does not engage in sales."]
answers = ["By providing automated license reports", "By enabling software audits"]
alternative_answers = ["By showing real-time usage data", "By enabling software audits", "By providing automated license reports"]
claude_answers = ["By providing automated license reports", "By showing real-time usage data"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d9556374-d7ff-4230-b8dc-5994d2057e79"
question = "Which of the following license types can AWS License Manager help manage?"
good_bad_why = "Answers: [1,2]\n"
options = ["Microsoft SQL Server", "Amazon EC2", "AWS Lambda", "Amazon S3", "This is a bad question and does not have an objective answer."]
explanation = ["Microsoft SQL Server is correct as AWS License Manager specifically supports management for such software licenses.", "Amazon EC2 is incorrect as it's a service, not a license type.", "AWS Lambda is incorrect as well for the same reason.", "Amazon S3 is also incorrect as it's an AWS storage service, not a software license."]
answers = ["Microsoft SQL Server"]
claude_answers = ["AWS Lambda", "Amazon EC2", "Microsoft SQL Server"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0cd3fda5-6fcc-4ffd-8190-3377829ea435"
question = "What best describes the role of AWS License Manager in relation to hybrid environments?"
good_bad_why = "Answers: [1,2]\n"
options = ["It only manages licenses for AWS resources", "It provides a unified view across on-premises and AWS resources", "It automates the deployment of hybrid applications", "It enforces security policies for licenses", "This is a bad question and does not have an objective answer."]
explanation = ["It only manages licenses for AWS resources is incorrect as it can manage licenses for hybrid environments.", "It provides a unified view across on-premises and AWS resources is correct, as this is one of its use cases.", "It automates the deployment of hybrid applications is incorrect because this isn't part of License Manager's functions.", "It enforces security policies for licenses is incorrect since License Manager focuses on tracking and management, not security enforcement."]
answers = ["It provides a unified view across on-premises and AWS resources"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c259dadd-bdf6-4b20-a8b6-3dcfbde298a5"
question = "Which two services can be used to monitor AWS resources and applications? (Select 2)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["AWS CloudTrail", "Amazon CloudWatch", "AWS Config", "Amazon Inspector", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail is wrong because it is primarily for logging API calls.", "Amazon CloudWatch is correct for monitoring resource usage.", "AWS Config is correct for tracking configuration changes.", "Amazon Inspector is wrong because it is a security assessment service."]
answers = ["Amazon CloudWatch", "AWS Config"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "bbba94d1-c6be-4439-a32a-6369c3e0d51c"
question = "When creating an Amazon EC2 instance, which of the following steps must you perform? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Select an Amazon Machine Image (AMI)", "Choose an instance type", "Define an S3 bucket", "Assign a security group", "This is a bad question and does not have an objective answer."]
explanation = ["Select an Amazon Machine Image (AMI) is correct for specifying the OS.", "Choose an instance type is correct for defining the performance specs.", "Define an S3 bucket is wrong; it's not required to create an EC2 instance.", "Assign a security group is also correct for defining access rules."]
answers = ["Select an Amazon Machine Image (AMI)", "Choose an instance type"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6a7d358a-3698-46fd-a963-d0b01ce0463c"
question = "Which features can you configure when creating an Amazon RDS DB instance? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["DB Engine", "DB Instance Class", "CloudFront Distribution", "VPC Security Group", "This is a bad question and does not have an objective answer."]
explanation = ["DB Engine is correct as it defines the database type.", "DB Instance Class is correct for resource allocation.", "CloudFront Distribution is wrong as it's unrelated to RDS.", "VPC Security Group is correct to control access but not a primary configuration option."]
answers = ["DB Engine", "DB Instance Class"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3f39a836-ef4e-4ebb-bc89-20fb38c433f7"
question = "What two metrics can be monitored with Amazon CloudWatch for an EC2 instance? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["CPU Utilization", "Disk Read Operations", "Lambda Invocation Count", "S3 Bucket Size", "This is a bad question and does not have an objective answer."]
explanation = ["CPU Utilization is correct as it indicates the processing workload.", "Disk Read Operations is also correct for monitoring disk activity.", "Lambda Invocation Count is wrong; it's specific to Lambda functions.", "S3 Bucket Size is irrelevant to EC2 instance metrics."]
answers = ["CPU Utilization", "Disk Read Operations"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f19d5b4e-4efc-4fc8-b49b-7f8e3eed4213"
question = "What two features can you configure in an Amazon CloudFront distribution? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Origin Domain Name", "Lambda Function URL", "Instance Size", "Default Root Object", "This is a bad question and does not have an objective answer."]
explanation = ["Origin Domain Name is correct as it defines the source of content.", "Default Root Object is correct as it specifies the default object to load.", "Lambda Function URL is wrong; it's unrelated to CloudFront.", "Instance Size is not applicable for CloudFront, which is CDN-focused."]
answers = ["Origin Domain Name", "Default Root Object"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "315e4c1d-dd05-46d9-9935-4e5bd00a51b7"
question = "Which two services can help you migrate an on-premises application to AWS? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Migration Hub", "AWS CodePipeline", "AWS Application Migration Service", "Amazon Route 53", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Migration Hub is correct for tracking migration progress.", "AWS Application Migration Service is correct for migrating applications.", "AWS CodePipeline is wrong as it's related to CI/CD.", "Amazon Route 53 is incorrect; it focuses on DNS services."]
answers = ["AWS Migration Hub", "AWS Application Migration Service"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d0b6730e-9e0f-49d2-bbbe-d933564eda77"
question = "Which two actions can be performed using the AWS IAM console? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Create IAM users", "Launch EC2 instances", "Set permissions for IAM roles", "Configure Amazon Redshift clusters", "This is a bad question and does not have an objective answer."]
explanation = ["Create IAM users is correct for managing user access.", "Set permissions for IAM roles is also correct for defining what actions roles can perform.", "Launch EC2 instances is incorrect; it's done through the EC2 console.", "Configure Amazon Redshift clusters is unrelated to IAM."]
answers = ["Create IAM users", "Set permissions for IAM roles"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8a1e4ab3-5f20-427a-9be7-7339f19beda6"
question = "What two settings can you configure for an Amazon Elastic Load Balancer? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Health Check Settings", "Availability Zone", "EC2 Instance Type", "Load Balancer Algorithm", "This is a bad question and does not have an objective answer."]
explanation = ["Health Check Settings are correct to determine instance health.", "Availability Zone is correct as it defines where load balancers can operate.", "EC2 Instance Type is incorrect; it's related to EC2 instance configuration, not the load balancer.", "Load Balancer Algorithm is not a configurable option in the console."]
answers = ["Health Check Settings", "Availability Zone"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "33185002-867a-4ed7-b4b5-1285adb3b996"
question = "When configuring an Amazon VPC, which two components are necessary? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["VPC CIDR block", "NAT Gateway", "EC2 Subnet", "RDS Instance", "This is a bad question and does not have an objective answer."]
explanation = ["VPC CIDR block is necessary for defining the address range.", "EC2 Subnet is also necessary as it defines how to segment the VPC.", "NAT Gateway is optional for internet access but not necessary for VPC configuration.", "RDS Instance is not required to create a VPC."]
answers = ["VPC CIDR block", "EC2 Subnet"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f45db772-e21f-4664-b872-d12394f6a6dd"
question = "Which of the following are benefits of using AWS Organizations? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Centralized management of multiple AWS accounts", "Increased cost of managing resources", "Unified billing across accounts", "Limited resource sharing between accounts", "This is a bad question and does not have an objective answer."]
explanation = ["Centralized management of multiple AWS accounts is correct because AWS Organizations allows you to manage multiple accounts conveniently.", "Increased cost of managing resources is wrong because using AWS Organizations can decrease management costs.", "Unified billing across accounts is correct because AWS Organizations provides consolidated billing, allowing you to receive a single bill for multiple accounts.", "Limited resource sharing between accounts is wrong because AWS Organizations allows for resource sharing and inter-account access when configured properly."]
answers = ["Centralized management of multiple AWS accounts", "Unified billing across accounts"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e4821c51-8971-4fa7-ba79-3b9fdc185cfc"
question = "What is the purpose of Service Control Policies (SCPs) in AWS Organizations?"
good_bad_why = "Answers: [1,2]\n"
options = ["To restrict the services that can be used in the entire organization", "To monitor network traffic across the organization", "To manage IAM policies in individual accounts", "To enable VPC peering between accounts", "This is a bad question and does not have an objective answer."]
explanation = ["To restrict the services that can be used in the entire organization is correct because SCPs define permissions for accounts in an organization.", "To monitor network traffic across the organization is wrong because SCPs do not have this functionality.", "To manage IAM policies in individual accounts is wrong because SCPs apply at the organizational level and do not manage IAM policies.", "To enable VPC peering between accounts is wrong because SCPs do not facilitate VPC peering directly."]
answers = ["To restrict the services that can be used in the entire organization"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "09360224-9d20-4237-9af9-c7bfc984e2d9"
question = "If you have created an Organization in AWS with multiple accounts, what can you do to ensure that your root account is protected?"
good_bad_why = "Answers: [1,2]\n"
options = ["Enable multi-factor authentication (MFA) for the root account", "Share the root account credentials with all account admins", "Create an IAM user with full permissions and use this for daily tasks", "Disable the root account entirely", "This is a bad question and does not have an objective answer."]
explanation = ["Enable multi-factor authentication (MFA) for the root account is correct because it adds an extra layer of security.", "Share the root account credentials with all account admins is wrong because this compromises security.", "Create an IAM user with full permissions and use this for daily tasks is partially correct but does not protect the root account itself.", "Disable the root account entirely is wrong because the root account cannot be disabled."]
answers = ["Enable multi-factor authentication (MFA) for the root account"]
alternative_answers = ["Enable multi-factor authentication (MFA) for the root account", "Create an IAM user with full permissions and use this for daily tasks"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "de25ffff-474a-4de0-94c1-81b44ddc1584"
question = "Which of the following can be used to access the resources of member accounts in an AWS Organization? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["IAM roles with cross-account access", "Service Control Policies", "AWS Resource Access Manager", "AWS Config rules", "This is a bad question and does not have an objective answer."]
explanation = ["IAM roles with cross-account access is correct because these roles allow access to AWS resources in different accounts.", "Service Control Policies is wrong because SCPs do not facilitate direct access; they restrict permissions.", "AWS Resource Access Manager is correct as it allows sharing resources between accounts.", "AWS Config rules is wrong as these rules relate to resource configuration and compliance, not direct access."]
answers = ["IAM roles with cross-account access", "AWS Resource Access Manager"]
claude_answers = ["IAM roles with cross-account access", "Service Control Policies"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8172c601-adcd-4dd4-9afc-c0ac98e3f410"
question = "In AWS Organizations, what is the maximum number of Organizational Units (OUs) that you can create within a single organization?"
good_bad_why = "Answers: [1,2]\n"
options = ["10", "20", "100", "150", "This is a bad question and does not have an objective answer."]
explanation = ["10 is wrong because AWS Organizations allows more OUs.", "20 is wrong as it is below the maximum limit.", "100 is correct; AWS Organizations allows up to 100 OUs in a single organization.", "150 is wrong because the limit is not that high."]
answers = ["100"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b5c49533-add4-41e5-9cee-9996d139c8f9"
question = "What happens to IAM policies when an account is moved to a different Organizational Unit (OU)?"
good_bad_why = "Answers: [1,2]\n"
options = ["IAM policies are automatically deleted", "IAM policies are unaffected", "IAM policies are inherited from the new parent OU", "IAM policies are archived", "This is a bad question and does not have an objective answer."]
explanation = ["IAM policies are unaffected is correct because moving an account to a new OU does not impact its existing IAM policies.", "IAM policies are automatically deleted is wrong as IAM policies persist regardless of OU changes.", "IAM policies are inherited from the new parent OU is wrong because IAM policies do not work that way in AWS.", "IAM policies are archived is wrong as there is no archiving functionality associated with moving OUs."]
answers = ["IAM policies are unaffected"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6df9dd57-b574-4c58-be75-3155f6d06db3"
question = "Which AWS Organizations feature allows you to receive a single bill for all accounts in your organization?"
good_bad_why = "Answers: [1,2]\n"
options = ["Consolidated Billing", "Resource Sharing", "Service Control Policies", "Cross-Account Roles", "This is a bad question and does not have an objective answer."]
explanation = ["Consolidated Billing is correct because it combines the costs for all accounts into one bill.", "Resource Sharing is wrong because it pertains to sharing resources, not billing.", "Service Control Policies is wrong as it restricts services but does not assist in billing.", "Cross-Account Roles is incorrect as it is associated with access permissions, not billing."]
answers = ["Consolidated Billing"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b9a65f6a-e3e0-4598-9770-181726e16eaa"
question = "How can you manage cost allocation for multiple accounts within AWS Organizations?"
good_bad_why = "Answers: [1,2]\n"
options = ["By enabling cost allocation tags", "By creating service control policies", "By using IAM user policies", "By using CloudFormation templates", "This is a bad question and does not have an objective answer."]
explanation = ["By enabling cost allocation tags is correct; they allow you to track spending per account.", "By creating service control policies is wrong; SCPs manage access, not costs.", "By using IAM user policies is incorrect as IAM policies manage permissions, not costs.", "By using CloudFormation templates is incorrect since templates are for resource management, not cost tracking."]
answers = ["By enabling cost allocation tags"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ff3d5124-8479-4c68-b4cc-46e1102e3c26"
question = "What is a characteristic of an AWS Organization?"
good_bad_why = "Answers: [1,2]\n"
options = ["It allows unlimited account creation", "It imposes limits on account features", "It can only have one root account", "It enhances security by default for all accounts", "This is a bad question and does not have an objective answer."]
explanation = ["It allows unlimited account creation is wrong; there is a limit on the number of accounts per organization.", "It imposes limits on account features is incorrect as accounts have the same features but may have restrictions based on policies.", "It can only have one root account is correct; every organization has a single root account.", "It enhances security by default for all accounts is misleading as security is dependent on configurations."]
answers = ["It can only have one root account"]
alternative_answers = ["It can only have one root account", "It imposes limits on account features"]
claude_answers = ["It imposes limits on account features"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "eb0a35b8-c4c3-444a-8388-31dad5041143"
question = "Which feature of AWS Organizations helps you apply governance across multiple accounts?"
good_bad_why = "Answers: [1,2]\n"
options = ["Service Control Policies", "Resource Access Manager", "AWS Config", "CloudTrail", "This is a bad question and does not have an objective answer."]
explanation = ["Service Control Policies is correct as they allow you to set permission guardrails across accounts.", "Resource Access Manager is wrong as it facilitates resource sharing instead of governance.", "AWS Config is wrong as it monitors configurations rather than managing accounts.", "CloudTrail is incorrect as it provides auditing, not governance enforcement."]
answers = ["Service Control Policies"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6bd13534-5d1d-40fa-8cd9-f126d0611fb1"
question = "Which two components of AWS Service Catalog help manage and provision cloud resources? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Products", "Portfolios", "Budgets", "CloudFormation stacks", "This is a bad question and does not have an objective answer."]
explanation = ["Products represent the specific cloud resources that can be provisioned.", "Portfolios manage and organize products and can be shared across multiple accounts.", "Budgets are not directly related to the management of products in AWS Service Catalog.", "CloudFormation stacks are used to deploy resources but are not a core component of AWS Service Catalog."]
answers = ["Products", "Portfolios"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "2849f40e-97cb-428a-b1aa-7830d15ed4c8"
question = "Which feature of AWS Service Catalog allows users to create self-service portfolios for their projects?"
good_bad_why = "Answers: [1,2]\n"
options = ["Service Catalog Admins", "Shared Portfolios", "Service Catalog End Users", "CloudFormation Designer", "This is a bad question and does not have an objective answer."]
explanation = ["Service Catalog Admins manage the overall account and permissions but don't create self-service portfolios.", "Shared Portfolios allow sharing but don't create the portfolios themselves.", "Service Catalog End Users are the users who access provisioned products but do not create them.", "CloudFormation Designer is a tool for designing templates and is unrelated to portfolio creation."]
answers = ["Shared Portfolios"]
claude_answers = ["Service Catalog End Users"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "03d1ad32-7e79-4624-8f56-571577565c38"
question = "What is the purpose of an AWS Service Catalog product? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To define a versioned template for infrastructure", "To manage IAM roles and policies", "To track billing information", "To automate the deployment of EC2 instances", "This is a bad question and does not have an objective answer."]
explanation = ["To define a versioned template for infrastructure describes the purpose of a CloudFormation template, not a product.", "Managing IAM roles and policies is not the specific purpose of a Service Catalog product.", "Tracking billing information is a feature of AWS Cost Explorer but does not define a product.", "Automating the deployment of EC2 instances could be a part of a Service Catalog product but is not the complete definition."]
answers = ["To define a versioned template for infrastructure"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "037733f6-78f9-4e79-a38f-f0af1427f2fa"
question = "Which AWS Service Catalog feature allows synchronization of portfolio updates across multiple accounts?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Organizations", "Service Catalog AppRegistry", "CloudFormation StackSets", "AWS Support Plans", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Organizations enables account hierarchies and management but not synchronization of portfolios.", "Service Catalog AppRegistry is used for associating applications with resources but doesn't synchronize portfolios.", "CloudFormation StackSets allow for the deployment of stacks across accounts but are not specific to Service Catalog.", "AWS Support Plans provide technical assistance but do not pertain to portfolio synchronization."]
answers = ["AWS Organizations"]
claude_answers = ["CloudFormation StackSets"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b41ccc44-a1cd-464c-b251-e28510238bc8"
question = "What is a key benefit of using AWS Service Catalog in an organization?"
good_bad_why = "Answers: [1,2]\n"
options = ["Reduced operational overhead", "Guaranteed uptime", "Centralized resource governance", "Step wise billing structure", "This is a bad question and does not have an objective answer."]
explanation = ["Reduced operational overhead mainly comes from automation outside of Service Catalog.", "Guaranteed uptime is not specific to Service Catalog; it is a broad tenant of AWS infrastructure.", "Centralized resource governance is a primary benefit, allowing organizations to manage compliance and security.", "Step wise billing structures are not a feature provided by Service Catalog."]
answers = ["Centralized resource governance"]
alternative_answers = ["Reduced operational overhead", "Centralized resource governance"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "20a6ae81-b396-4bff-9c64-9d88887186de"
question = "Which of the following actions can users perform on products in AWS Service Catalog after they have access? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Provision", "Terminate", "Delete portfolio", "Modify IAM policies", "This is a bad question and does not have an objective answer."]
explanation = ["Provisioning products is a fundamental action available to users with access.", "Terminating products relates to resources, not directly to Service Catalog products themselves.", "Deleting a portfolio is an administrative function and not a user action on a product.", "Modifying IAM policies is an administrative function outside the specific capabilities of Service Catalog users."]
answers = ["Provision", "Terminate"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "271a796a-54cb-48f5-ba90-8d9e52312d6b"
question = "What does the AWS Service Catalog AppRegistry enable?"
good_bad_why = "Answers: [1,2]\n"
options = ["Inventory management", "Application dependency tracking", "CloudFormation template visibility", "Multi-account billing management", "This is a bad question and does not have an objective answer."]
explanation = ["Inventory management is not its specific purpose, though related.", "Application dependency tracking is one of its features, allowing organizations to track resources tied to an application.", "CloudFormation template visibility is not directly a function of AppRegistry.", "Multi-account billing management is not a primary function of AppRegistry."]
answers = ["Application dependency tracking"]
alternative_answers = ["CloudFormation template visibility", "Application dependency tracking"]
claude_answers = ["CloudFormation template visibility", "Application dependency tracking", "Inventory management"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "dc9fe2f5-6e1a-4eb7-b398-d5d3197b512b"
question = "In AWS Service Catalog, how can you ensure users can only provision specific products?"
good_bad_why = "Answers: [1,2]\n"
options = ["Attach IAM policies", "Create product constraints", "Implement tagging", "Use resource limits", "This is a bad question and does not have an objective answer."]
explanation = ["Attaching IAM policies can grant access but doesn't specifically limit product provisioning.", "Creating product constraints in Service Catalog is the proper mechanism to control users' provisioning options.", "Implementing tagging does not restrict product access; it merely classifies resources for management.", "Using resource limits pertains to quotas rather than product provisioning specifics."]
answers = ["Create product constraints"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6a306e50-0d94-4031-9e85-94d4fc42183a"
question = "Which service would you use to create a product in AWS Service Catalog?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudFormation", "AWS IAM", "AWS Lambda", "AWS CodeDeploy", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudFormation allows the creation of templates, which form the basis of Service Catalog products.", "AWS IAM manages users and permissions but does not create products.", "AWS Lambda is used for serverless functions and is not directly related to product creation.", "AWS CodeDeploy deploys applications but is irrelevant in the context of creating Service Catalog products."]
answers = ["AWS CloudFormation"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "dc915f9a-8c70-4154-9afb-f891b51fa918"
question = "How does AWS Service Catalog enable compliance and governance?"
good_bad_why = "Answers: [1,2]\n"
options = ["By enforcing resource tags", "Through portfolio-based access control", "By managing network latency", "Using dynamic pricing models", "This is a bad question and does not have an objective answer."]
explanation = ["Enforcing resource tags is a general AWS service feature, not unique to Service Catalog.", "Portfolio-based access control is a significant mechanism for managing compliance and governance.", "Managing network latency does not pertain to AWS Service Catalog's core function.", "Using dynamic pricing models does not apply to AWS Service Catalog compliance mechanisms."]
answers = ["Through portfolio-based access control"]
alternative_answers = ["Through portfolio-based access control", "By enforcing resource tags"]
claude_answers = ["By enforcing resource tags", "Through portfolio-based access control"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "64d119be-8cad-42dd-a17c-112935235155"
question = "Which of the following features does AWS Systems Manager provide? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Run Command", "AWS Config", "AWS CloudTrail", "Parameter Store", "This is a bad question and does not have an objective answer."]
explanation = ["Run Command is correct because it allows you to remotely execute commands on managed instances.", "AWS Config is wrong because it is a service used for assessing, auditing, and evaluating the configurations of your AWS resources.", "AWS CloudTrail is wrong because it tracks API calls for your AWS account and is not a feature of Systems Manager.", "Parameter Store is correct because it securely stores configuration data and secrets."]
answers = ["Run Command", "Parameter Store"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a5c3647c-6aee-452d-af18-866978228a93"
question = "What is the primary function of the AWS Systems Manager State Manager?"
good_bad_why = "Answers: [1,2]\n"
options = ["To automate operational tasks", "To maintain compliance of systems", "To provide real-time monitoring", "To create CloudFormation stacks", "This is a bad question and does not have an objective answer."]
explanation = ["To automate operational tasks is wrong because State Manager specifically focuses on configuring and maintaining the desired states of systems.", "To maintain compliance of systems is correct because State Manager can enforce the desired configurations and ensure compliance with them.", "To provide real-time monitoring is wrong as that is the role of Amazon CloudWatch.", "To create CloudFormation stacks is wrong because CloudFormation is a separate service for infrastructure as code."]
answers = ["To maintain compliance of systems"]
claude_answers = ["To maintain compliance of systems", "To automate operational tasks"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "09f61a1d-c94c-4e1a-a744-a9d56bab6a2c"
question = "Which AWS Systems Manager capability allows you to store confidential information securely?"
good_bad_why = "Answers: [1,2]\n"
options = ["Run Command", "Parameter Store", "Patch Manager", "Automation", "This is a bad question and does not have an objective answer."]
explanation = ["Run Command is wrong because it enables you to execute commands but does not store information.", "Parameter Store is correct because it securely stores configuration data and secrets like database passwords.", "Patch Manager is wrong as it is used for managing operating system patches but does not store information.", "Automation is wrong because it helps automate tasks and workflows but does not specifically store secrets."]
answers = ["Parameter Store"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "44dd8ca5-8768-4a2f-b6bf-ffd504654128"
question = "Which AWS Systems Manager feature can you use to install or update software on EC2 instances?"
good_bad_why = "Answers: [1,2]\n"
options = ["Run Command", "Session Manager", "State Manager", "Resource Groups", "This is a bad question and does not have an objective answer."]
explanation = ["Run Command is correct as it allows you to run scripts or commands to install or update software on your instances.", "Session Manager is wrong because it provides secure bash shell access but does not directly manage software installations.", "State Manager is wrong as it is used for enforcing configurations rather than managing software installations.", "Resource Groups is wrong as it is used to organize AWS resources but does not manage software."]
answers = ["Run Command"]
alternative_answers = ["State Manager", "Run Command"]
claude_answers = ["Session Manager", "State Manager", "Run Command"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "52474f6d-852f-4c92-b41d-46e803c586ee"
question = "How can you ensure that EC2 instances are regularly updated with the latest security patches using AWS Systems Manager?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CodeDeploy", "Patch Manager", "CloudTrail", "Elastic Beanstalk", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CodeDeploy is wrong because it is used for application deployment, not for patch management.", "Patch Manager is correct because it automates the process of installing patches on managed instances according to predefined approvals and schedules.", "CloudTrail is wrong as it tracks API calls and does not manage system updates.", "Elastic Beanstalk is wrong because it manages applications, not security patches."]
answers = ["Patch Manager"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9b3f1c37-44b2-404a-8584-771a44f5b42d"
question = "Which AWS Systems Manager feature provides an interactive shell to manage resources?"
good_bad_why = "Answers: [1,2]\n"
options = ["Run Command", "Session Manager", "Automation", "Parameter Store", "This is a bad question and does not have an objective answer."]
explanation = ["Run Command is wrong because it is primarily for executing commands without providing a shell.", "Session Manager is correct since it allows you to access instances using an interactive shell, enhancing security and ease of management.", "Automation is wrong because it is designed for automation of operational tasks and does not provide shell access.", "Parameter Store is wrong as it is used for storing configuration data, not for interactive management."]
answers = ["Session Manager"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3c25090c-07ec-4ef7-ab3a-a43e1e8185ed"
question = "What is the purpose of using tags when managing AWS resources through AWS Systems Manager?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["To define resource access permissions", "To organize resources for tracking and management", "To secure sensitive data", "To set instance types", "This is a bad question and does not have an objective answer."]
explanation = ["To define resource access permissions is wrong because IAM policies define access, not tags.", "To organize resources for tracking and management is correct since tags help categorize and facilitate resource organization within Systems Manager.", "To secure sensitive data is wrong as securing data involves different mechanisms, like encryption.", "To set instance types is wrong as instance types are defined at the time of instance creation and not through tags."]
answers = ["To organize resources for tracking and management"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "fc047614-3f37-495e-8db8-a06b575aac78"
question = "In AWS Systems Manager, which option would you choose to run a predefined script against multiple instances?"
good_bad_why = "Answers: [1,2]\n"
options = ["Run Command", "Automation", "Session Manager", "State Manager", "This is a bad question and does not have an objective answer."]
explanation = ["Run Command is correct because it allows you to execute scripts or commands on multiple instances at once.", "Automation is wrong because it focuses more on orchestrating complex workflows rather than simply executing scripts.", "Session Manager is wrong as it's used for interactive access to instances, not batch command execution.", "State Manager is wrong because it maintains configurations rather than running scripts."]
answers = ["Run Command"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "11858632-8a6f-4876-af5a-d327017a2f4c"
question = "For systems that require updates without downtime, which feature of AWS Systems Manager would you use?"
good_bad_why = "Answers: [1,2]\n"
options = ["Patch Manager", "Run Command", "State Manager", "Automation", "This is a bad question and does not have an objective answer."]
explanation = ["Patch Manager is correct as it allows for automated patching while maintaining system availability.", "Run Command is wrong because it does not specifically address zero-downtime updates.", "State Manager is wrong since it ensures compliance but does not manage updates directly.", "Automation is wrong because it orchestrates tasks but does not inherently offer zero-downtime features."]
answers = ["Patch Manager"]
alternative_answers = ["State Manager"]
claude_answers = ["State Manager", "Run Command", "Automation"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "4d1b96dd-9d13-4776-bac3-ecc5880cfc1c"
question = "Which feature of AWS Systems Manager enables you to operate AWS resources, irrespective of the AWS account in which they are located?"
good_bad_why = "Answers: [1,2]\n"
options = ["Outposts", "Resource Data Sync", "Session Manager", "Resource Access Manager", "This is a bad question and does not have an objective answer."]
explanation = ["Outposts is wrong as it provides AWS infrastructure on-premises but does not manage resources across accounts.", "Resource Data Sync is correct because it synchronizes Systems Manager inventory across multiple accounts.", "Session Manager is wrong because it provides instance access but is limited to the current account.", "Resource Access Manager is wrong because it shares resources but does not enable operational capabilities."]
answers = ["Resource Data Sync"]
alternative_answers = ["Resource Access Manager"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "38f4a70f-1c13-486e-927a-0e80a7c253ef"
question = "Which two categories does AWS Trusted Advisor provide recommendations for? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Cost Optimization", "Performance", "Security", "Benchmarking", "This is a bad question and does not have an objective answer."]
explanation = ["Benchmarking is not a category covered by AWS Trusted Advisor.", "Cost Optimization and Performance are both valid categories provided by AWS Trusted Advisor.", "Security is an additional valid category of recommendations offered."]
answers = ["Cost Optimization", "Performance"]
alternative_answers = ["Cost Optimization", "Security"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d1b93019-d146-4012-96ce-cca3d1d14468"
question = "What type of recommendations will AWS Trusted Advisor provide in the Cost Optimization category?"
good_bad_why = "Answers: [1,2]\n"
options = ["Underutilized EC2 Instances", "Ineffective Load Balancers", "Unassociated Elastic IPs", "Over-provisioned RDS Instances", "This is a bad question and does not have an objective answer."]
explanation = ["Underutilized EC2 Instances reduce costs when identified.", "Ineffective Load Balancers do not fall under Cost Optimization.", "Unassociated Elastic IPs can incur unnecessary charges, thus valid.", "Over-provisioned RDS Instances can lead to inflated costs as well."]
answers = ["Underutilized EC2 Instances", "Unassociated Elastic IPs"]
alternative_answers = ["Over-provisioned RDS Instances", "Underutilized EC2 Instances", "Unassociated Elastic IPs"]
claude_answers = ["Over-provisioned RDS Instances", "Underutilized EC2 Instances"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9e53e7c3-f33a-48d2-b1e9-0752f370a77b"
question = "Which of the following can be leveraged to access AWS Trusted Advisor recommendations?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["AWS Management Console", "AWS CLI", "AWS SDKs", "All of the above", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Management Console provides direct access to Trusted Advisor.", "AWS CLI offers a way to script interactions with Trusted Advisor.", "AWS SDKs also allow programmatic access to retrieve recommendations.", "Hence, all methods can be leveraged for access."]
answers = ["All of the above"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "9f6a169a-99a5-4b2d-a051-ca71de4ca798"
question = "What is the primary purpose of the Service Limits check in AWS Trusted Advisor?"
good_bad_why = "Answers: [1,2]\n"
options = ["To provide recommendations to improve application performance", "To identify resources nearing their limits", "To optimize cost by eliminating idle resources", "To enhance security compliance", "This is a bad question and does not have an objective answer."]
explanation = ["The Service Limits check is specifically designed to notify users of resources approaching their limits.", "While performance is important, it is not the primary purpose of Service Limits.", "Cost optimization is a possible side effect, but not the main focus.", "Security compliance doesn't directly correlate with the Service Limits check."]
answers = ["To identify resources nearing their limits"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b08b961e-d933-4602-b8f6-017a2c4970c0"
question = "What feature does AWS Trusted Advisor offer to help organizations comply with best practices?"
good_bad_why = "Answers: [1,2]\n"
options = ["Automated barometer reporting", "Proactive remediation suggestions", "Detailed API access logs", "Comprehensive risk assessment reports", "This is a bad question and does not have an objective answer."]
explanation = ["Automated barometer reporting isn't a feature of Trusted Advisor.", "Proactive remediation suggestions correspond with how it helps with compliance.", "Detailed API access logs are managed by CloudTrail, not Trusted Advisor.", "Risk assessment is rather broad; Trusted Advisor focuses on specific checks."]
answers = ["Proactive remediation suggestions"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d70a8c73-0060-43dc-8612-b0c605335f10"
question = "In which scenario would AWS Trusted Advisor recommend the use of AWS Support plans?"
good_bad_why = "Answers: [1,2]\n"
options = ["High volume of usage", "Business-critical applications", "Storage optimization", "Disaster recovery planning", "This is a bad question and does not have an objective answer."]
explanation = ["High volume does not inherently necessitate a Support plan recommendation.", "Business-critical applications typically require AWS Support plans to ensure timely assistance.", "Storage optimization is unrelated to support levels.", "Disaster recovery planning would benefit from guidance, but not directly encouraged as a recommendation."]
answers = ["Business-critical applications"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "96b14556-16e7-464e-adfb-daeb4dcfd328"
question = "Which of these recommendations would help optimize costs in AWS according to Trusted Advisor?"
good_bad_why = "Answers: [1,2]\n"
options = ["Updating security groups", "Reducing EBS Provisioned IOPS", "Enabling S3 Versioning", "Deploying CloudFront distributions", "This is a bad question and does not have an objective answer."]
explanation = ["Updating security groups doesn't contribute to cost savings directly.", "Reducing EBS Provisioned IOPS would cut costs, making it a valid recommendation.", "Enabling S3 Versioning can actually lead to added costs.", "Deploying CloudFront doesn't directly correspond to reducing costs either."]
answers = ["Reducing EBS Provisioned IOPS"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "894a4c8e-6050-4cdc-972c-58acb582ca28"
question = "AWS Trusted Advisor can help identify which of the following issues related to IAM?"
good_bad_why = "Answers: [1,2]\n"
options = ["Unused S3 policies", "MFA for root account", "Instance type mismatches", "Over-provisioned RDS storage", "This is a bad question and does not have an objective answer."]
explanation = ["Unused S3 policies are not an IAM issue Trusted Advisor identifies.", "MFA for the root account is a crucial security check provided by Trusted Advisor.", "Instance type mismatches aren't related to IAM.", "Over-provisioned RDS storage is under cost optimization recommendations, not IAM."]
answers = ["MFA for root account"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "af1230b4-48a0-46b3-94b6-0cababee8142"
question = "When using AWS Trusted Advisor, what kind of assistance does it provide for orphaned resources?"
good_bad_why = "Answers: [1,2]\n"
options = ["Suggestions to terminate instances", "Automated snapshot creation", "Migration recommendations", "Change management processes", "This is a bad question and does not have an objective answer."]
explanation = ["Suggestions to terminate instances are related to orphaned resources.", "Automated snapshot creation is not a primary feature of Trusted Advisor.", "Migration recommendations are outside of the orphaned resource scope.", "Change management processes are also not a focus of Trusted Advisor checks."]
answers = ["Suggestions to terminate instances"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "dfa3b35e-2ab2-4194-b7f9-61c0bdfcf5b0"
question = "What are the primary use cases for AWS DataSync? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Data transfer to Amazon S3", "On-premises backup of AWS resources", "Migration of data to Amazon RDS", "Data transfer between on-premises storage and Amazon EFS", "This is a bad question and does not have an objective answer."]
explanation = ["On-premises backup of AWS resources is wrong because DataSync is primarily designed for transferring data, not for backup mechanisms.", "Migration of data to Amazon RDS is incorrect as DataSync focuses on file-based storage, and RDS is a database service."]
answers = ["Data transfer to Amazon S3", "Data transfer between on-premises storage and Amazon EFS"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "777dcd42-9b2b-42cd-bc0f-49131fadd84c"
question = "Which of the following are valid sources for AWS DataSync? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon S3", "Amazon DynamoDB", "On-premises SMB file shares", "Amazon RDS", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon S3 is a valid source for DataSync, while Amazon DynamoDB and Amazon RDS are database services, not ideal for DataSync."]
answers = ["On-premises SMB file shares"]
alternative_answers = ["On-premises SMB file shares", "Amazon S3"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "464fd526-dc83-4a60-92ec-8b5a5f391c3e"
question = "Which feature of AWS DataSync ensures data is transferred securely? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Public internet connections", "VPN tunnels", "SSH encryption", "AWS Direct Connect", "This is a bad question and does not have an objective answer."]
explanation = ["Public internet connections do not ensure secure data transfer, while AWS Direct Connect is a dedicated connection that can enhance security but isn't specific to DataSync."]
answers = ["SSH encryption"]
claude_answers = ["VPN tunnels", "AWS Direct Connect"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7fba7dd6-1cc3-4025-91eb-a7353740909f"
question = "How does AWS DataSync handle data integrity during transfer? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["By using checksums", "By limiting data size", "By only transferring HTML files", "By repackaging data", "This is a bad question and does not have an objective answer."]
explanation = ["Limiting data size and repackaging are not methods for ensuring integrity. DataSync uses checksums to verify the data once it reaches the destination."]
answers = ["By using checksums"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9917e74e-1890-4bad-9969-7afaca192355"
question = "Which AWS service can be used to automate the orchestration of AWS DataSync tasks? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudFormation", "AWS Lambda", "Amazon EC2", "Amazon SNS", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudFormation is used for resource provisioning, while Amazon EC2 and Amazon SNS are not specifically designed for automating DataSync tasks."]
answers = ["AWS Lambda"]
claude_answers = ["AWS CloudFormation"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "852465ab-a070-4080-bab2-83687ccdb2c2"
question = "Which of the following is a benefit of using AWS DataSync? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Manual data transfer processes", "High latency during transfers", "Ability to schedule data transfers", "No monitoring options", "This is a bad question and does not have an objective answer."]
explanation = ["Manual data transfer processes and high latency are downsides, while AWS DataSync allows you to automate and schedule data transfers effectively."]
answers = ["Ability to schedule data transfers"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "da791b2c-41fa-47fc-81ef-bd6e2eb891e4"
question = "What is the maximum bandwidth DataSync can utilize during data transfer? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["500 Mbps", "1 Gbps", "10 Gbps", "Unlimited", "This is a bad question and does not have an objective answer."]
explanation = ["DataSync is capable of scaling bandwidth during transfers and can utilize a maximum of 10 Gbps when transferring data."]
answers = ["10 Gbps"]
claude_answers = ["1 Gbps"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "72e00363-ea3d-45a1-a575-04e9b10b636c"
question = "When setting up a DataSync location, which of the following steps is required? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Creating an Amazon S3 bucket", "Installing the DataSync agent", "Configuring IAM roles", "Setting up CloudTrail", "This is a bad question and does not have an objective answer."]
explanation = ["Creating an S3 bucket might be necessary for your destination, but the primary setup step for DataSync is to install the DataSync agent."]
answers = ["Installing the DataSync agent"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "08c053b2-cb98-430f-89d9-045a6cea5c25"
question = "Which of the following storage types can AWS DataSync work with? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon Glacier", "Amazon S3", "Amazon DynamoDB", "Amazon Neptune", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon Glacier is a cold storage option that is not suitable for DataSync, while AWS DataSync can directly work with Amazon S3."]
answers = ["Amazon S3"]
claude_answers = ["Amazon S3", "Amazon Glacier"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9ef9908b-cdb4-4b01-b876-dcb2e59f4972"
question = "What is the minimum amount of storage required to run the DataSync agent on-premises? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["10 GB", "20 GB", "30 GB", "50 GB", "This is a bad question and does not have an objective answer."]
explanation = ["The DataSync agent does not require a substantial amount of storage as it is lightweight; however, you need at least some disk space for operations."]
answers = ["10 GB"]
claude_answers = ["20 GB"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "869ca803-04f0-43eb-91be-33babfe2a8ea"
question = "Which two file transfer protocols does AWS Transfer Family support? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["SFTP", "HTTP", "FTP", "SMTP", "This is a bad question and does not have an objective answer."]
explanation = ["HTTP is wrong because it is not a file transfer protocol supported by AWS Transfer Family.", "SMTP is not a file transfer protocol; it is used for email sending."]
answers = ["SFTP", "FTP"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "12a58700-e559-48f3-906c-aa08654a6939"
question = "What service does AWS Transfer Family integrate with to allow secure file uploads to Amazon S3?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Lambda", "AWS IAM", "Amazon RDS", "Amazon S3", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Lambda is incorrect; it is not the storage service used for uploads.", "AWS IAM is for identity and access management but does not store files."]
answers = ["Amazon S3"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "50d0c217-56a7-4b38-bb22-9e768fa470e0"
question = "When you create an AWS Transfer Family server, which of the following must you specify? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Endpoint type", "Server name", "File system type", "Identity provider type", "This is a bad question and does not have an objective answer."]
explanation = ["Server name is not required; AWS generates a name for the server automatically.", "File system type is not a required parameter when creating a server."]
answers = ["Endpoint type", "Identity provider type"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "60da81b3-8f84-4a38-ba05-4f75a987b5f9"
question = "What identity provider types can be used with AWS Transfer Family servers? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Service-managed", "Active Directory", "Amazon Cognito", "SAML", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon Cognito is not supported as an identity provider for AWS Transfer Family.", "Service-managed and Active Directory can be used, but Cognito cannot."]
answers = ["Service-managed", "Active Directory"]
claude_answers = ["Active Directory", "SAML"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e4a3a505-f045-45ae-abf6-f05e82d44e97"
question = "Which AWS Transfer Family feature allows for logging all file transfer activities?"
good_bad_why = "Answers: [1,2]\n"
options = ["CloudTrail", "S3 Event Notifications", "AWS Config", "Amazon CloudWatch Logs", "This is a bad question and does not have an objective answer."]
explanation = ["CloudTrail records API calls and is not specific to file transfers.", "S3 Event Notifications are for specific S3 bucket events, not comprehensive logging."]
answers = ["Amazon CloudWatch Logs"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "89dd3d83-0fc1-4a43-a552-f3a774a556db"
question = "Which of the following actions can be performed with AWS Transfer Family? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Transfer files to on-premises storage", "Transfer files to Amazon S3", "Perform data transformation during transfer", "Transfer files to Amazon EFS", "This is a bad question and does not have an objective answer."]
explanation = ["Transferring files to on-premises storage is not a feature of AWS Transfer Family.", "Data transformation is not a function of the service, so it cannot do that during transfer."]
answers = ["Transfer files to Amazon S3", "Transfer files to Amazon EFS"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6fa19382-6d50-495c-b03d-3f962b0929da"
question = "What is the maximum number of AWS Transfer Family servers that can be created per AWS account per Region?"
good_bad_why = "Answers: [1,2]\n"
options = ["10", "50", "100", "25", "This is a bad question and does not have an objective answer."]
explanation = ["The limit of servers is not 10; that is too low for most use cases.", "100 is incorrect as this limit is more than what's allowed."]
answers = ["25"]
alternative_answers = ["100"]
claude_answers = ["50"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "bcf9e454-55e9-40bf-885c-9b3922b397d4"
question = "To enable access to AWS Transfer Family, which IAM policy must be attached to the IAM roles associated with the server?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWSTransferFullAccess", "AWSTransferReadOnly", "AWSTransferLimitedAccess", "AWSS3ReadOnly", "This is a bad question and does not have an objective answer."]
explanation = ["AWSTransferReadOnly does not provide access for transfers, only read-only.", "AWSS3ReadOnly is irrelevant since the policy is specifically for AWS Transfer services."]
answers = ["AWSTransferFullAccess"]
alternative_answers = ["AWSTransferLimitedAccess", "AWSTransferReadOnly", "AWSTransferFullAccess"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6fa4ea18-04df-4a29-a79e-8dad034113b6"
question = "Which feature allows AWS Transfer Family to scale automatically in response to the number of incoming connections?"
good_bad_why = "Answers: [1,2]\n"
options = ["Server scaling", "Automatic scaling", "Elastic load balancing", "Endpoint scaling", "This is a bad question and does not have an objective answer."]
explanation = ["Automatic scaling is not a distinct feature of AWS Transfer Family.", "Elastic load balancing is separate and not specific to AWS Transfer Family capabilities."]
answers = ["Server scaling"]
alternative_answers = ["Automatic scaling"]
claude_answers = ["Automatic scaling"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ba443cbd-a2c7-4178-8cfa-ec794154f92c"
question = "Which AWS resource must be configured to set permissions for users in AWS Transfer Family?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["IAM roles", "S3 buckets", "Lambda functions", "VPC security groups", "This is a bad question and does not have an objective answer."]
explanation = ["IAM roles alone do not specify user permissions for file transfer actions.", "Lambda functions are not related to user permissions for transfers."]
answers = ["S3 buckets"]
alternative_answers = ["IAM roles"]
claude_answers = ["IAM roles"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "365ca3ae-726b-44b4-bc25-060f28d907f2"
question = "What are two benefits of using Amazon CloudFront as a content delivery network? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Reduced latency for end-users", "Higher storage capacity compared to S3", "Integrated DDoS protection", "Automatically scales to support sudden traffic spikes", "This is a bad question and does not have an objective answer."]
explanation = ["Reduced latency for end-users is correct because CloudFront caches content at edge locations closer to users.", "Higher storage capacity compared to S3 is wrong because CloudFront does not provide storage; it delivers content stored in S3 or other origins.", "Integrated DDoS protection is correct as CloudFront offers built-in protection against DDoS attacks through AWS Shield.", "Automatically scales to support sudden traffic spikes is correct as CloudFront is designed to scale based on demand, handling variable traffic seamlessly."]
answers = ["Reduced latency for end-users", "Integrated DDoS protection", "Automatically scales to support sudden traffic spikes"]
alternative_answers = ["Integrated DDoS protection", "Reduced latency for end-users"]
claude_answers = ["Reduced latency for end-users", "Automatically scales to support sudden traffic spikes"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1fd823c3-2a18-4674-9d75-258bd039f8de"
question = "Which service can be directly integrated with Amazon CloudFront to serve dynamic content efficiently?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Lambda", "Amazon EC2", "Amazon DynamoDB", "Amazon API Gateway", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Lambda can be used to run backend logic on the fly, making it suitable for dynamic content generation. Therefore, it is correct.", "Amazon EC2 can serve content but it is not integrated directly as an origin for dynamic requests in CloudFront, hence wrong.", "Amazon DynamoDB could be an origin, but is not typically associated with dynamic content delivery like CloudFront is designed to do.", "Amazon API Gateway is an interface for managing APIs, not directly integrated with CloudFront for delivering content."]
answers = ["AWS Lambda"]
alternative_answers = ["Amazon API Gateway"]
claude_answers = ["AWS Lambda", "Amazon DynamoDB", "Amazon EC2", "Amazon API Gateway"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "35ee4bf3-c6f1-458e-bbb8-e9714058fc5b"
question = "What feature of Amazon CloudFront allows it to cache content at edge locations?"
good_bad_why = "Answers: [1,2]\n"
options = ["Edge caching", "Data replication", "Content synchronization", "Automatic scaling", "This is a bad question and does not have an objective answer."]
explanation = ["Edge caching is correct as it enables storing copies of static content at regional edge locations to speed up retrieval for users.", "Data replication is not a feature of CloudFront; it's more applicable to S3 or databases.", "Content synchronization is not a terminology used in CloudFront's caching mechanisms.", "Automatic scaling does occur, but it relates more to the ability to handle traffic spikes rather than the caching of content."]
answers = ["Edge caching"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0fb2ff0c-6838-433a-b538-779e6c9fbc8f"
question = "Which HTTP headers can be set in Amazon CloudFront to control cache behavior? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Cache-Control", "X-Frame-Options", "Pragma", "Content-Security-Policy", "This is a bad question and does not have an objective answer."]
explanation = ["Cache-Control is correct because it is commonly used to manage caching on behalf of the clients.", "X-Frame-Options is related to clickjacking prevention; therefore, it does not control cache behavior.", "Pragma is correct because it can influence caching in older HTTP/1.0 requests.", "Content-Security-Policy is used for security purposes and does not dictate cache management."]
answers = ["Cache-Control", "Pragma"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a31f21b2-d312-4d9d-a0a5-efe4a32e0152"
question = "What does Amazon CloudFront use to distribute content globally?"
good_bad_why = "Answers: [1,2]\n"
options = ["Regional servers", "Edge locations", "Availability Zones", "CloudFormation stacks", "This is a bad question and does not have an objective answer."]
explanation = ["Edge locations is correct as they are used to cache copies of content close to end-users globally.", "Regional servers are too broad and do not specifically apply to how CloudFront operates.", "Availability Zones are components of the AWS infrastructure but are not directly used by CloudFront for content delivery.", "CloudFormation stacks are used for resource provisioning and management, not for content distribution."]
answers = ["Edge locations"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c6425297-8b19-42b3-829a-d3a42f69be1f"
question = "Which of the following protocols can Amazon CloudFront support for delivering content? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["HTTP", "FTP", "HTTPS", "SMTP", "This is a bad question and does not have an objective answer."]
explanation = ["HTTP is correct as CloudFront can deliver content over this protocol.", "FTP is not supported by CloudFront for content delivery, hence wrong.", "HTTPS is correct because it provides secure delivery of content.", "SMTP is irrelevant as it is used for email transmissions, not for delivering web content."]
answers = ["HTTP", "HTTPS"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "11ec88c6-6f3c-47f6-a8de-7ff27978c6e2"
question = "What is a key advantage of using an Amazon CloudFront signed URL?"
good_bad_why = "Answers: [1,2]\n"
options = ["To provide unlimited access to everyone", "To restrict access to specific users", "To enable faster content delivery", "To simplify DNS management", "This is a bad question and does not have an objective answer."]
explanation = ["To restrict access to specific users is correct as signed URLs are used to grant time-limited access to private content.", "To provide unlimited access to everyone is opposite to the purpose of a signed URL.", "To enable faster content delivery is a feature of CloudFront in general but not the specific purpose of signed URLs.", "To simplify DNS management is unrelated to the function of signed URLs."]
answers = ["To restrict access to specific users"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b9ae53e5-fcc9-4043-bdfa-5598db806ada"
question = "Which of the following can define the cache behavior in Amazon CloudFront?"
good_bad_why = "Answers: [1,2]\n"
options = ["Path pattern", "IAM Policies", "VPC Endpoints", "CloudTrail Logs", "This is a bad question and does not have an objective answer."]
explanation = ["Path pattern is correct; it defines how requests are routed based on the URL structure, affecting cache behavior directly.", "IAM Policies control access and permissions but do not define cache behavior.", "VPC Endpoints relate to networking and do not influence caching in CloudFront.", "CloudTrail Logs provide an audit trail and do not directly interact with cache behavior."]
answers = ["Path pattern"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5b60b289-1691-4424-af7a-c6a83feceef3"
question = "In Amazon CloudFront, how can you invalidate cached content?"
good_bad_why = "Answers: [1,2]\n"
options = ["Using a Lambda Function", "Creating an invalidation request", "Deleting the CloudFront distribution", "Changing the origin server", "This is a bad question and does not have an objective answer."]
explanation = ["Creating an invalidation request is correct as it allows you to specify which objects to remove from the cache.", "Using a Lambda Function is incorrect; while Lambda can manipulate responses, it does not invalidate cache entries.", "Deleting the CloudFront distribution is not a targeted way to invalidate content; it removes the entire distribution.", "Changing the origin server does not invalidate cached copies; existing cache items remain until specifically invalidated."]
answers = ["Creating an invalidation request"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b6e78aa5-af2d-4e46-9874-793264cf969e"
question = "What is the purpose of Amazon CloudFront's geo restriction feature?"
good_bad_why = "Answers: [1,2]\n"
options = ["To optimize content delivery speed", "To enforce licensing agreements", "To reduce costs associated with data transfer", "To manage DDoS attacks", "This is a bad question and does not have an objective answer."]
explanation = ["To enforce licensing agreements is correct because geo restriction allows you to block or allow content based on the geographical location of the users.", "To optimize content delivery speed is a general benefit of CloudFront, not related specifically to geo restriction.", "To reduce costs associated with data transfer does not apply specifically to geo restrictions, so it's wrong.", "To manage DDoS attacks is incorrect, as that is handled through AWS services like Shield and WAF."]
answers = ["To enforce licensing agreements"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "25b83092-b787-4ec2-9ac7-6bf76f1de394"
question = "Which of the following are valid use cases for Elastic Load Balancing? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Distributing incoming application traffic across multiple targets", "Managing application state", "Automatically provisioning EC2 instances", "Routing traffic based on content type", "This is a bad question and does not have an objective answer."]
explanation = ["Distributing incoming application traffic across multiple targets is correct because ELB is designed to distribute traffic among multiple instances.", "Managing application state is wrong because ELB does not manage state, it's responsible for distributing traffic.", "Automatically provisioning EC2 instances is wrong because ELB does not provision instances; that's a functionality of Auto Scaling.", "Routing traffic based on content type is correct as Application Load Balancers can route based on advanced request routing."]
answers = ["Distributing incoming application traffic across multiple targets", "Routing traffic based on content type"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7969fe25-5019-48b5-9028-b0151274a777"
question = "Which service can be utilized to perform health checks on targets in an Elastic Load Balancer? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudTrail", "Amazon CloudWatch", "AWS Config", "Amazon Route 53", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail is wrong because it is used for logging and monitoring AWS account activity, not for health checks.", "Amazon CloudWatch is correct as it monitors the health of ELB targets and metrics.", "AWS Config is wrong because it is used for resource configuration tracking, not for health checks.", "Amazon Route 53 is wrong because it is mainly used for DNS services, although it can check the health of endpoints."]
answers = ["Amazon CloudWatch"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5b1bda37-f1b5-44e1-8e2b-a4e666cfc050"
question = "What type of ELB supports path-based routing? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Classic Load Balancer", "Network Load Balancer", "Application Load Balancer", "Gateway Load Balancer", "This is a bad question and does not have an objective answer."]
explanation = ["Classic Load Balancer is wrong because it does not support path-based routing.", "Network Load Balancer is wrong as it works at the transport layer (Layer 4) and does not support path-based routing.", "Application Load Balancer is correct because it supports path-based and host-based routing.", "Gateway Load Balancer is wrong because it is used for running virtual appliances."]
answers = ["Application Load Balancer"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5612a60e-537b-4fcd-9056-db2749a44863"
question = "Which statement is true regarding the Network Load Balancer? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Supports WebSocket connections", "Routes traffic based on application layer data", "Performs SSL termination", "Distributes traffic at the application level", "This is a bad question and does not have an objective answer."]
explanation = ["Supports WebSocket connections is correct because NLB can handle any TCP connection, including WebSockets.", "Routes traffic based on application layer data is wrong; that's what an ALB does.", "Performs SSL termination is wrong because that function is typically associated with ALBs.", "Distributes traffic at the application level is wrong because NLB functions at Layer 4."]
answers = ["Supports WebSocket connections"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1c5d281c-76ea-4148-bb38-e97d1c2963fe"
question = "What is a primary benefit of using an Application Load Balancer compared to a Classic Load Balancer? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Lower latency", "Support for HTTP/2 and WebSocket", "Ability to distribute traffic across multiple regions", "Integration with AWS Global Accelerator", "This is a bad question and does not have an objective answer."]
explanation = ["Lower latency is wrong as both Load Balancers can have similar latencies.", "Support for HTTP/2 and WebSocket is correct because ALBs have capabilities that include advanced protocols.", "Ability to distribute traffic across multiple regions is wrong because Load Balancers work within a single region.", "Integration with AWS Global Accelerator is not limited to ALB only and does not differentiate it."]
answers = ["Support for HTTP/2 and WebSocket"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ce6714a6-ce61-48fc-8e70-4cd5a208059f"
question = "What is the maximum number of targets for an Application Load Balancer in a target group? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["100", "150", "500", "1000", "This is a bad question and does not have an objective answer."]
explanation = ["100 is wrong because the limit is higher.", "150 is also wrong; the limit exceeds this number.", "500 is correct as the maximum number of targets in a target group is 500 by default.", "1000 is wrong because that exceeds the limit."]
answers = ["500"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "828d17b9-0fe4-4d32-ba93-ef3efd2aee0d"
question = "Which of the following attributes can be configured in a Load Balancer's listener? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Host-based routing", "Health check interval", "Sticky sessions", "Cross-zone load balancing", "This is a bad question and does not have an objective answer."]
explanation = ["Host-based routing is correct as it can be configured at the listener level for ALBs.", "Health check interval is incorrect as this setting is associated with the target group, not the listener.", "Sticky sessions is also incorrect as it applies within the application settings, not directly as a listener setting.", "Cross-zone load balancing applies generally to ELB settings, not specifically a listener setting."]
answers = ["Host-based routing"]
alternative_answers = ["Host-based routing", "Sticky sessions"]
claude_answers = ["Health check interval"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "79008053-28fd-4df7-a509-b19a4e344553"
question = "How can you ensure that only HTTPS traffic is forwarded to your EC2 instances behind an Application Load Balancer? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Enable cross-zone load balancing", "Create a listener rule to forward HTTP to HTTPS", "Attach a security group to the ALB", "Set up SSL termination on the ALB", "This is a bad question and does not have an objective answer."]
explanation = ["Enable cross-zone load balancing does not control traffic protocols and is thus wrong.", "Create a listener rule to forward HTTP to HTTPS is incorrect as listener rules do not modify protocols; they decide actions based on conditions.", "Attach a security group to the ALB doesn't restrict traffic forwarding protocols but controls access.", "Set up SSL termination on the ALB is correct because it allows only HTTPS traffic to reach the EC2 instances."]
answers = ["Set up SSL termination on the ALB"]
alternative_answers = ["Create a listener rule to forward HTTP to HTTPS"]
claude_answers = ["Create a listener rule to forward HTTP to HTTPS"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8452f172-ca61-4c9f-8698-e51f43ad6642"
question = "In a scenario where you are experiencing latency issues with your Load Balancer, which feature could help alleviate this? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Elastic Load Balancing capacity scaling", "Autoscaling EC2 instances", "Direct Connect", "Route 53 latency-based routing", "This is a bad question and does not have an objective answer."]
explanation = ["Elastic Load Balancing capacity scaling is wrong as this is not a direct feature to mitigate latency issues.", "Autoscaling EC2 instances is correct, since scaling up instances can help manage traffic efficiently, decreasing latency.", "Direct Connect is wrong because it doesn't affect load balancer latency in the AWS cloud environment.", "Route 53 latency-based routing is incorrect since it's more about routing than alleviating latent issues from the ELB."]
answers = ["Autoscaling EC2 instances"]
alternative_answers = ["Route 53 latency-based routing"]
claude_answers = ["Elastic Load Balancing capacity scaling"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d51bfc3d-6fd8-45bd-877e-a2d84f0eb7f2"
question = "Which of the following statements is true regarding security groups for the Elastic Load Balancer? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Security groups of the load balancer can have inbound rules only", "Security groups should allow inbound traffic on port 80 for a web application", "Security groups cannot be applied to a load balancer", "Security groups must allow inbound traffic on the Round Robin port", "This is a bad question and does not have an objective answer."]
explanation = ["Security groups of the load balancer can have inbound rules only is incorrect since they can have outbound rules as well.", "Security groups should allow inbound traffic on port 80 for a web application is correct as port 80 is commonly used for HTTP traffic.", "Security groups cannot be applied to a load balancer is incorrect, as ELBs do employ security groups.", "Security groups must allow inbound traffic on the Round Robin port is misleading because there is no specific Round Robin port; ELB operates based on protocols."]
answers = ["Security groups should allow inbound traffic on port 80 for a web application"]
claude_answers = ["Security groups of the load balancer can have inbound rules only"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "48a0daa9-cd67-4c5f-b37f-22efa652cbf9"
question = "What are the main benefits of using AWS Global Accelerator? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Improved application availability", "Faster data transfer rates", "Reduced API Gateway costs", "Enhanced security with WAF", "This is a bad question and does not have an objective answer."]
explanation = ["Improved application availability is correct because Global Accelerator directs traffic to healthy endpoints.", "Faster data transfer rates is correct because Global Accelerator uses the AWS global network to optimize routing.", "Reduced API Gateway costs is wrong because Global Accelerator does not directly impact API Gateway pricing.", "Enhanced security with WAF is wrong because while both services can be used together, Global Accelerator itself does not provide security features."]
answers = ["Improved application availability", "Faster data transfer rates"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "af64a18f-d16b-467d-9049-43e021a19eb6"
question = "Which of the following protocols does AWS Global Accelerator support for its accelerators?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["TCP", "UDP", "HTTP", "HTTPS", "This is a bad question and does not have an objective answer."]
explanation = ["TCP is correct as Global Accelerator works with TCP-based applications.", "UDP is correct since Global Accelerator also supports UDP protocols.", "HTTP is wrong because it is not a standalone protocol for Global Accelerator.", "HTTPS is wrong for the same reason; it's not a standalone protocol, and Global Accelerator supports transport layer protocols."]
answers = ["TCP", "UDP"]
alternative_answers = ["HTTP", "UDP", "HTTPS", "TCP"]
claude_answers = ["HTTPS", "TCP"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "bc6849e1-c175-4b59-a32d-dbffe80d428a"
question = "How does AWS Global Accelerator improve the performance of applications?"
good_bad_why = "Answers: [1,2]\n"
options = ["By caching content at edge locations", "By routing traffic to the nearest AWS region", "By leveraging the AWS backbone network", "By providing load balancing across Availability Zones", "This is a bad question and does not have an objective answer."]
explanation = ["By caching content at edge locations is wrong because Global Accelerator does not cache content.", "By routing traffic to the nearest AWS region is correct but not specific; it improves latency by leveraging AWS edge locations.", "By leveraging the AWS backbone network is correct as it optimizes the path for user requests.", "By providing load balancing across Availability Zones is incorrect since Global Accelerator does not handle load balancing directly."]
answers = ["By routing traffic to the nearest AWS region", "By leveraging the AWS backbone network"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d53af819-e1d4-4cb9-a4f0-583783d668a3"
question = "What feature does AWS Global Accelerator provide for managing endpoint health?"
good_bad_why = "Answers: [1,2]\n"
options = ["Automatic endpoint scaling", "Endpoint health checking", "Traffic encryption", "Data compression", "This is a bad question and does not have an objective answer."]
explanation = ["Automatic endpoint scaling is wrong as Global Accelerator does not provide scaling features.", "Endpoint health checking is correct because it routes traffic only to healthy endpoints.", "Traffic encryption is wrong because while traffic can be encrypted in transit, it is not a feature of Global Accelerator.", "Data compression is wrong as Global Accelerator does not offer data compression."]
answers = ["Endpoint health checking"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "740ac2cb-84b9-4aa2-9bf3-1d09eee3b56e"
question = "Which settings can be configured for an accelerator in AWS Global Accelerator?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Endpoint groups", "Listening ports", "Traffic dials", "All of the above", "This is a bad question and does not have an objective answer."]
explanation = ["Endpoint groups is correct as you can specify groups of endpoints.", "Listening ports is correct since you can specify which ports the accelerator listens on.", "Traffic dials is correct as they allow you to adjust how much traffic is sent to the endpoints.", "All of the above is correct since all the individual options are valid settings."]
answers = ["All of the above"]
fakebot_answers = []
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "8bc3d9d4-a002-4739-be7e-ce4fd01569f5"
question = "What happens to traffic when an endpoint becomes unhealthy in AWS Global Accelerator?"
good_bad_why = "Answers: [1,2]\n"
options = ["Traffic is automatically redirected to another endpoint", "Traffic is dropped", "Traffic is logged for analysis", "Traffic is rerouted to the original endpoint after a cooldown period", "This is a bad question and does not have an objective answer."]
explanation = ["Traffic is automatically redirected to another endpoint is correct because Global Accelerator will route to healthy endpoints.", "Traffic is dropped is wrong since it handles the redirection.", "Traffic is logged for analysis is incorrect; this is not an inherent feature.", "Traffic is rerouted to the original endpoint after a cooldown period is wrong as it does not reroute automatically to unhealthy endpoints."]
answers = ["Traffic is automatically redirected to another endpoint"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5d2ab1be-6084-487f-b7f0-3849506afb08"
question = "What is the maximum number of accelerators you can create in AWS Global Accelerator per account by default?"
good_bad_why = "Answers: [1,2]\n"
options = ["5", "10", "15", "20", "This is a bad question and does not have an objective answer."]
explanation = ["5 is correct as this is the default service limit.", "10 is wrong; that is not the default limit for Global Accelerator.", "15 is wrong; the limitations do not pertain to this service.", "20 is wrong as it exceeds the default limit."]
answers = ["5"]
claude_answers = ["10"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c050a244-a298-4757-b448-c830ff87390d"
question = "Which configuration is necessary to use AWS Global Accelerator?"
good_bad_why = "Answers: [1,2]\n"
options = ["At least one accelerator", "At least two endpoints", "One listener per endpoint", "Cross-region replication enabled", "This is a bad question and does not have an objective answer."]
explanation = ["At least one accelerator is correct as this is the basic requirement to start.", "At least two endpoints is incorrect; having a single endpoint is sufficient.", "One listener per endpoint is wrong; you only need one listener for the accelerator itself.", "Cross-region replication enabled is incorrect as it is unrelated to Global Accelerator's setup."]
answers = ["At least one accelerator"]
alternative_answers = ["At least two endpoints", "One listener per endpoint", "At least one accelerator"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "23be3399-734b-4237-9bbe-d0b5672272b7"
question = "What is a key characteristic of the static IP addresses associated with AWS Global Accelerator?"
good_bad_why = "Answers: [1,2]\n"
options = ["They are dynamically assigned", "They change frequently", "They are resilient to failure", "They do not support IPv6", "This is a bad question and does not have an objective answer."]
explanation = ["They are dynamically assigned is wrong because the IPs are static once allocated.", "They change frequently is incorrect as static IPs remain the same.", "They are resilient to failure is correct since Global Accelerator automates routing in case of failures.", "They do not support IPv6 is incorrect as Global Accelerator supports both IPv4 and IPv6."]
answers = ["They are resilient to failure"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6ac85699-181a-43a1-94b8-82f8bb00b638"
question = "Which AWS service is commonly used in conjunction with AWS Global Accelerator to enhance security?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Shield", "AWS Lambda", "Amazon EC2", "Amazon S3", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Shield is correct as it provides protection against DDoS attacks when using Global Accelerator.", "AWS Lambda is wrong as it does not enhance security directly.", "Amazon EC2 is wrong since it is a compute service and does not provide security enhancements on its own.", "Amazon S3 is wrong as it is primarily a storage service and not related to security enhancements for Global Accelerator."]
answers = ["AWS Shield"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "4c7c5567-b8b4-460a-bbf3-e497ef3139ae"
question = "What are two key features of Amazon Route 53? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Domain registration", "Static website hosting", "Traffic flow management", "Dedicated hosting", "This is a bad question and does not have an objective answer."]
explanation = ["Domain registration is a key feature that allows you to register domain names. Traffic flow management provides advanced routing capabilities to manage traffic based on different criteria.", "Static website hosting is a feature of S3, not Route 53. Dedicated hosting is not a feature related to Route 53."]
answers = ["Domain registration", "Traffic flow management"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "522c74af-cff4-456d-92bb-07d4cfb283ae"
question = "Which of the following can you use to improve DNS lookup performance for users globally using Amazon Route 53?"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon CloudFront", "AWS Global Accelerator", "Amazon Route 53 Resolver", "Latency-based routing policies", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon CloudFront is a content delivery network that helps improve performance. AWS Global Accelerator helps optimize network paths. Route 53 Resolver is for on-premises integration. Latency-based routing helps direct users to the closest endpoint but doesn't directly improve DNS lookup performance.", "Correct options include Amazon CloudFront and Latency-based routing policies because they both enhance performance for DNS resolutions."]
answers = ["Amazon CloudFront", "Latency-based routing policies"]
alternative_answers = ["Amazon CloudFront", "AWS Global Accelerator", "Latency-based routing policies"]
claude_answers = ["Amazon Route 53 Resolver", "Amazon CloudFront"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "152bdac1-ce1f-4a52-8172-9d8e434a4d5c"
question = "What is the purpose of Route 53 health checks?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["To check the uptime of an application or endpoint", "To manage IP address allocations", "To facilitate domain migration", "To verify SSL certificate validity", "This is a bad question and does not have an objective answer."]
explanation = ["Route 53 health checks are specifically designed to monitor the health and uptime of application endpoints. They do not manage IP address allocations, facilitate domain migrations, or verify SSL certificate validity.", "The purpose of health checks directly aligns with ensuring the availability of resources."]
answers = ["To check the uptime of an application or endpoint"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "94432c6a-3447-4f36-ab23-b0f7b9cafdbe"
question = "When configuring a latency-based routing policy in Route 53, what is the primary factor considered?"
good_bad_why = "Answers: [1,2]\n"
options = ["Geographic location of the user", "Health of the endpoint", "Latency of the connections", "DNS query type", "This is a bad question and does not have an objective answer."]
explanation = ["The primary factor considered in a latency-based routing policy is the latency of the connections from the DNS resolver to the endpoints. Geographic location and health are also factors but secondary to latency comparisons.", "The focus is on the latency times to serve the endpoints efficiently."]
answers = ["Latency of the connections"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "03c35ca1-6678-48c4-8770-a43e6efa4b44"
question = "If you want to redirect all requests for your website from 'www.example.com' to 'example.com', which Route 53 feature would you use?"
good_bad_why = "Answers: [1,2]\n"
options = ["DNS Records", "Alias Records", "CNAME Records", "Routing Policies", "This is a bad question and does not have an objective answer."]
explanation = ["CNAME records are typically used for aliasing domains, but they cannot be used at the root domain. Alias records can point from one domain to another and are the only type that can be used at the apex of a zone in Route 53.", "Using Alias Records is the appropriate choice for root domain redirection."]
answers = ["Alias Records"]
alternative_answers = ["CNAME Records"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1f3ef42c-47fd-4381-a37d-31cde3da8f3e"
question = "Which record type should you use in Route 53 for service discovery to allow external services to resolve your service's IP addresses?"
good_bad_why = "Answers: [1,2]\n"
options = ["A Record", "CNAME Record", "SRV Record", "MX Record", "This is a bad question and does not have an objective answer."]
explanation = ["A Record maps a domain to an IPv4 address, while CNAME maps domains to other domains. SRV records are best for service-oriented architecture, allowing for service discovery. MX records are used for mail exchange purposes.", "The most suitable record for service discovery, particularly in an external context, is an SRV Record."]
answers = ["SRV Record"]
alternative_answers = ["CNAME Record"]
claude_answers = ["A Record", "SRV Record"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "75236e52-ee16-40b1-b636-b255a358a09c"
question = "What does Amazon Route 53 do when a health check fails?"
good_bad_why = "Answers: [1,2]\n"
options = ["Removes the domain from all DNS entries", "Routes traffic to alternate endpoints", "Increases the TTL for affected records", "Issues a DNS query log", "This is a bad question and does not have an objective answer."]
explanation = ["When a health check fails, Route 53 will stop routing traffic to that endpoint and will route traffic to any healthy endpoints that you have configured.", "This mechanism ensures continuous availability by finding and managing healthy resources."]
answers = ["Routes traffic to alternate endpoints"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3ef03c40-c5eb-44dd-b8cb-8538c1d13069"
question = "Which Amazon Route 53 feature allows you to manage traffic globally based on the geographic location of your users?"
good_bad_why = "Answers: [1,2]\n"
options = ["Geo DNS", "Latency-based routing", "Weighted routing", "Failover routing", "This is a bad question and does not have an objective answer."]
explanation = ["Geo DNS is specifically designed to route traffic based on the geographic location of users, enabling user requests to be routed to the nearest resources. The other options are used for different routing strategies.", "This geo-routing enables more localized access to resources."]
answers = ["Geo DNS"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e16ed951-03cc-40e0-aba2-20238967e119"
question = "What is the maximum number of geolocation records you can have per Route 53 hosted zone?"
good_bad_why = "Answers: [1,2]\n"
options = ["You can specify as many as necessary.", "50", "Max 256 geolocation records", "Max 100 geolocation records", "This is a bad question and does not have an objective answer."]
explanation = ["You can specify up to 50 geolocation records per hosted zone, which indicates the demand for granularity in globally distributed resources. Other figures are incorrect in this context.", "The restriction is in place to maintain manageable configurations within each hosted zone."]
answers = ["Max 100 geolocation records"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "90276421-a44f-4764-aad5-f1b64eb3e067"
question = "Which of the following statements is true regarding Amazon Route 53 and DNSSEC?"
good_bad_why = "Answers: [1,2]\n"
options = ["Route 53 supports DNSSEC for signed hosted zones.", "Route 53 does not support DNSSEC.", "DNSSEC requires a separate dedicated DNS service.", "Only S3 can sign records for Route 53.", "This is a bad question and does not have an objective answer."]
explanation = ["Route 53 does indeed support DNSSEC for signed hosted zones, which helps protect against certain types of attacks on the DNS infrastructure.", "It is incorrect to state that Route 53 does not support DNSSEC, as it provides validation capabilities natively."]
answers = ["Route 53 supports DNSSEC for signed hosted zones."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "076709ba-9581-4260-b8ed-74f6cbd5aa10"
question = "What are the benefits of using AWS Transit Gateway? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Simplifies the network architecture", "Increases latency", "Provides a central hub for VPC connectivity", "Limits the number of connections", "This is a bad question and does not have an objective answer."]
explanation = ["Simplifies the network architecture is correct because Transit Gateway allows for easier management of multiple VPCs and their interconnections.", "Increases latency is wrong because Transit Gateway is designed to reduce latency through optimized routing.", "Provides a central hub for VPC connectivity is correct as it serves as a central point for connecting multiple VPCs and on-premises networks.", "Limits the number of connections is wrong as Transit Gateway can scale to support thousands of connections."]
answers = ["Simplifies the network architecture", "Provides a central hub for VPC connectivity"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "cc7ffa1a-282e-4a98-b750-89e78457c072"
question = "Which of the following resources can be connected to an AWS Transit Gateway? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Direct Connect", "AWS Storage Gateway", "Amazon RDS", "Amazon S3", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Direct Connect can be directly connected to an AWS Transit Gateway, enabling a private connection between on-premises data centers and AWS."]
answers = ["AWS Direct Connect"]
claude_answers = ["AWS Direct Connect", "AWS Storage Gateway"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "2cbd32b2-6aff-473f-ae48-896613991b35"
question = "When using AWS Transit Gateway, what is the maximum number of VPCs you can attach to a single Transit Gateway? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["3", "10", "50", "125", "This is a bad question and does not have an objective answer."]
explanation = ["As of now, you can attach up to 125 VPCs to a single Transit Gateway, accommodating extensive network architecture requirements."]
answers = ["125"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "68da9b9f-cb8e-45de-a9c5-52e21c281763"
question = "What feature of AWS Transit Gateway allows routing traffic between VPCs and on-premises networks? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Stateful inspection", "Transit Gateway Route Tables", "Direct Connect", "Network ACLs", "This is a bad question and does not have an objective answer."]
explanation = ["Transit Gateway Route Tables allow for the routing of traffic between interconnected VPCs and on-premises networks seamlessly."]
answers = ["Transit Gateway Route Tables"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "4df8fc69-0bc6-4216-9fa4-a446c6c2e209"
question = "In AWS Transit Gateway, how is security managed between VPCs that are connected? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Security Groups alone", "Network Access Control Lists (NACLs)", "Transit Gateway Policy", "Transit Gateway Route Tables", "This is a bad question and does not have an objective answer."]
explanation = ["Security Groups alone are not sufficient as they can only be applied at the instance level; while NACLs can influence traffic flow, they are not specific to Transit Gateway traffic management."]
answers = ["Network Access Control Lists (NACLs)"]
alternative_answers = ["Transit Gateway Policy"]
claude_answers = ["Transit Gateway Policy"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a69a697e-3e87-4468-8e3a-421529ead50a"
question = "Which statement is true regarding AWS Transit Gateway Connectivity? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["It cannot connect to AWS VPN", "It requires VPC Peering", "It supports multicast traffic", "It provides inter-region VPC connectivity", "This is a bad question and does not have an objective answer."]
explanation = ["It provides inter-region VPC connectivity is true, allowing different AWS regions to connect through Transit Gateway, enhancing global network infrastructure."]
answers = ["It provides inter-region VPC connectivity"]
claude_answers = ["It supports multicast traffic"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "bae411e6-b55d-410f-b381-7af5ca1383c4"
question = "What routing capabilities does an AWS Transit Gateway provide? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Border Gateway Protocol (BGP)", "Static routing", "Dynamic routing", "Only static routing", "This is a bad question and does not have an objective answer."]
explanation = ["Dynamic routing is supported, allowing for the automatic updating of routes based on network changes, which is beneficial compared to static routing."]
answers = ["Dynamic routing"]
alternative_answers = ["Static routing", "Dynamic routing"]
claude_answers = ["Border Gateway Protocol (BGP)", "Dynamic routing"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "75afbccc-273c-40a9-8001-dd6c127fe4c7"
question = "How does AWS Transit Gateway handle traffic between attached VPCs? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Through a virtual private network (VPN)", "Using a mesh network", "By a single point of failure", "Utilizes the Transit Gateway Route Table", "This is a bad question and does not have an objective answer."]
explanation = ["Utilizes the Transit Gateway Route Table is correct; the Transit Gateway Route Table is crucial for directing traffic efficiently between VPCs."]
answers = ["Utilizes the Transit Gateway Route Table"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "fc98ae9b-0c16-4793-a713-62c62d2314ec"
question = "Which of the following options describes a limitation of AWS Transit Gateway? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["You can only attach one Transit Gateway to a VPC", "Limited to 10 active attachments", "Only supports IPv4 routing", "Cannot connect on-premises networks", "This is a bad question and does not have an objective answer."]
explanation = ["You can only attach one Transit Gateway to a VPC is a limitation, as a VPC can only be associated with a single Transit Gateway at a given time."]
answers = ["You can only attach one Transit Gateway to a VPC"]
claude_answers = ["Limited to 10 active attachments"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "4c5bc431-6736-46d6-8b7d-96e362d1cefd"
question = "What is the pricing model for AWS Transit Gateway? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Pay as you go based on the number of routes only", "Pay as you go based on data transfer and attachments", "Flat monthly fee regardless of usage", "Free up to 50 attachments", "This is a bad question and does not have an objective answer."]
explanation = ["Pay as you go based on data transfer and attachments is the correct model, as the pricing is influenced by the number of connections and the amount of data transferred."]
answers = ["Pay as you go based on data transfer and attachments"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8b2e9522-22f9-4383-8718-1447c67ba37c"
question = "Which of the following components are part of an Amazon VPC? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Internet Gateway", "Elastic Load Balancer", "Virtual Private Gateway", "Amazon CloudFront", "This is a bad question and does not have an objective answer."]
explanation = ["Internet Gateway is a component of an Amazon VPC because it allows communication between instances in the VPC and the internet.", "Elastic Load Balancer is not a component of an Amazon VPC; it is an AWS service that distributes incoming application traffic.", "Virtual Private Gateway is part of an Amazon VPC as it is used to enable communication between the VPC and a remote network via VPN.", "Amazon CloudFront is a content delivery network and not a direct component of an Amazon VPC."]
answers = ["Internet Gateway", "Virtual Private Gateway"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "477a2fcd-af69-4257-8806-d0df8df13c9f"
question = "What is the purpose of a route table in an Amazon VPC?"
good_bad_why = "Answers: [1,2]\n"
options = ["To manage data stored in an Amazon S3 bucket", "To define how traffic is routed within the VPC", "To provide user permissions on resources", "To encrypt data in transit", "This is a bad question and does not have an objective answer."]
explanation = ["A route table defines how network traffic is directed within the VPC and to/from other networks.", "Managing data in an S3 bucket is not the function of a route table.", "User permissions on resources are managed by IAM, not by route tables.", "Encryption of data in transit is managed by protocols, not directly by route tables."]
answers = ["To define how traffic is routed within the VPC"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5e1f6c8d-b56b-4af7-957e-e59fcfac6667"
question = "Which service allows you to extend your on-premises network into a VPC?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Direct Connect", "Amazon Route 53", "Amazon CloudFront", "AWS Lambda", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Direct Connect allows you to establish a dedicated network connection between your data center and your VPC.", "Amazon Route 53 is a DNS service and does not provide network extension capabilities.", "Amazon CloudFront is a CDN service for content delivery, not for extending networks.", "AWS Lambda is a serverless compute service, which does not facilitate network connections."]
answers = ["AWS Direct Connect"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c6b27672-e666-472e-94f4-93e537a24c50"
question = "How many Internet Gateways can be attached to a single VPC?"
good_bad_why = "Answers: [1,2]\n"
options = ["1", "2", "5", "Unlimited", "This is a bad question and does not have an objective answer."]
explanation = ["You can attach only one Internet Gateway to a VPC at a time to allow communication between VPC resources and the internet.", "Two Internet Gateways are not allowed to be attached.", "Five Internet Gateways is incorrect as it's limited to one.", "Unlimited does not apply as you are restricted to one per VPC."]
answers = ["1"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "25f69f20-3ac6-4dd1-ba5d-fd5ad52e7936"
question = "What feature allows you to isolate resources within the same VPC?"
good_bad_why = "Answers: [1,2]\n"
options = ["Subnets", "NAT Gateways", "Internet Gateways", "Route Tables", "This is a bad question and does not have an objective answer."]
explanation = ["Subnets enable you to group instances and isolate resources within a VPC.", "NAT Gateways provide internet access for instances in a private subnet but do not isolate resources.", "Internet Gateways allow connectivity to the internet but do not provide resource isolation.", "Route Tables direct traffic within the VPC but do not isolate resources."]
answers = ["Subnets"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "4fee4556-4699-4d98-8288-100b28b28173"
question = "Which of the following can be used to provide outbound internet access to EC2 instances in a private subnet?"
good_bad_why = "Answers: [1,2]\n"
options = ["Internet Gateway", "NAT Gateway", "VPC Peering", "CloudFormation", "This is a bad question and does not have an objective answer."]
explanation = ["A NAT Gateway is used to allow instances in a private subnet to initiate outbound traffic to the internet.", "Internet Gateways enable inbound/outbound traffic for public subnets but not for private ones.", "VPC Peering connects two VPCs, not to the internet.", "CloudFormation is for resource management and does not provide internet access."]
answers = ["NAT Gateway"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "4cbdf274-5773-4559-9d10-62d045ac9372"
question = "What is the maximum number of VPCs you can create in a single AWS region?"
good_bad_why = "Answers: [1,2]\n"
options = ["1", "5", "30", "100", "This is a bad question and does not have an objective answer."]
explanation = ["As of now, the limit for VPCs per region is 5 by default, though this can be increased by requesting a limit increase.", "1 is incorrect as multiple VPCs can be created.", "30 is beyond the limit.", "100 also exceeds the default limit without a special request."]
answers = ["5"]
claude_answers = ["100"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0843da04-9eb0-4e55-be86-b9516c5a0aff"
question = "Which feature allows multiple VPCs to communicate with each other?"
good_bad_why = "Answers: [1,2]\n"
options = ["Direct Connect", "NAT Gateway", "VPC Peering", "Internet Gateway", "This is a bad question and does not have an objective answer."]
explanation = ["VPC Peering is the feature that allows two VPCs to connect and communicate privately with each other.", "Direct Connect connects on-premises to AWS but does not interconnect VPCs.", "NAT Gateway provides internet access, not inter-VPC connectivity.", "Internet Gateway connects a VPC to the internet, not to another VPC."]
answers = ["VPC Peering"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "2ce85251-e64a-4054-8629-54eaff6b9a49"
question = "What is the purpose of a Virtual Private Gateway in an Amazon VPC?"
good_bad_why = "Answers: [1,2]\n"
options = ["To enable VPN connections to your VPC", "To manage S3 buckets", "To connect to AWS Lambda", "For load balancing", "This is a bad question and does not have an objective answer."]
explanation = ["A Virtual Private Gateway enables you to establish VPN connections between your VPC and your on-premises infrastructure.", "Managing S3 buckets is not within the scope of a Virtual Private Gateway.", "AWS Lambda is a compute service and not related to gateway functions.", "Load balancing is handled by Elastic Load Balancers, not by Virtual Private Gateways."]
answers = ["To enable VPN connections to your VPC"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d40b9cd9-148a-4741-8dd2-46ad345baef7"
question = "Which of the following is true regarding security groups in an Amazon VPC?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["They are stateful", "They are stateless", "They can control outbound traffic only", "They only apply to EC2 instances", "This is a bad question and does not have an objective answer."]
explanation = ["Security groups are stateful, meaning if you allow an outbound request, the response is automatically allowed.", "They do not operate in a stateless manner.", "Security groups control both inbound and outbound traffic, not just one direction.", "While security groups primarily apply to EC2 instances, they can also apply to other resources like RDS and Lambda functions."]
answers = ["They are stateful"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "b4fe67fb-ac22-4eb1-82e7-10a5e0aca5e5"
question = "Which two features are benefits of using AWS Site-to-Site VPN? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Secure communications over the internet", "Direct connections to AWS services", "CloudFormation support for automated deployments", "Ability to establish VPN connections between multiple VPCs", "This is a bad question and does not have an objective answer."]
explanation = ["Secure communications over the internet is correct because AWS Site-to-Site VPN provides a secure tunnel for data transfer.", "Direct connections to AWS services is wrong because Site-to-Site VPN connects your on-premises network to your AWS VPC, not directly to services.", "CloudFormation support for automated deployments is wrong because while CloudFormation can provision VPNs, it's not a specific feature of Site-to-Site VPN itself.", "Ability to establish VPN connections between multiple VPCs is correct as you can set up AWS VPN connections between different VPCs using peering."]
answers = ["Secure communications over the internet", "Ability to establish VPN connections between multiple VPCs"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7333aeb4-988a-42fa-98d6-d4eb62f4fa0a"
question = "What is a prerequisite for configuring a VPN connection between your on-premises network and AWS? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["A static IP address for your on-premises gateway", "An elastic IP address for your VPC", "A dedicated AWS Direct Connect connection", "A VPN Gateway attached to a VPC", "This is a bad question and does not have an objective answer."]
explanation = ["A static IP address for your on-premises gateway is correct because you must have a static public IP for the VPN to establish a connection.", "An elastic IP address for your VPC is wrong because it's not required to establish a VPN connection.", "A dedicated AWS Direct Connect connection is wrong as it's an alternative but not a prerequisite for a VPN connection.", "A VPN Gateway attached to a VPC is not a prerequisite; it can be provisioned after establishing the connection."]
answers = ["A static IP address for your on-premises gateway"]
alternative_answers = ["A VPN Gateway attached to a VPC"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e89bf1c0-8f81-44ba-8646-dfae970580cc"
question = "Which AWS service can be used to monitor the status of your Site-to-Site VPN connection? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudTrail", "AWS CloudWatch", "AWS Config", "AWS Trusted Advisor", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudWatch is correct because it provides metrics and logs for monitoring the VPN connection status.", "AWS CloudTrail is wrong because it focuses on logging API calls, not VPN connections.", "AWS Config is wrong as it monitors resource configurations and compliance rather than VPN connection status.", "AWS Trusted Advisor provides best practices checks but doesn't specifically monitor VPN connections."]
answers = ["AWS CloudWatch"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8112067d-f13b-46ef-9e32-e08cb4f6feaf"
question = "Which of the following correctly describes a Virtual Private Gateway? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["A gateway that connects your AWS VPC to another VPC", "A type of instance used to manage VPN connections", "A managed NAT Gateway service", "The VPN endpoint on the AWS side of a VPN connection", "This is a bad question and does not have an objective answer."]
explanation = ["The VPN endpoint on the AWS side of a VPN connection is correct as a Virtual Private Gateway acts as the termination point for the VPN connection.", "A gateway that connects your AWS VPC to another VPC is wrong; that's a VPC peering connection.", "A type of instance used to manage VPN connections is incorrect as the Virtual Private Gateway is not an instance but a managed service.", "A managed NAT Gateway service is incorrect because NAT Gateway is for translating IP addresses, not for VPN connectivity."]
answers = ["The VPN endpoint on the AWS side of a VPN connection"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "c68b3884-423f-4cc9-b0ae-bad4d0452e51"
question = "What protocol is commonly used for establishing secure Site-to-Site VPN connections on AWS? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["IPsec", "L2TP", "SSL", "PPTP", "This is a bad question and does not have an objective answer."]
explanation = ["IPsec is correct because AWS Site-to-Site VPN uses IPsec to encrypt the data transmitted over the VPN tunnel.", "L2TP is wrong; while it can be used in conjunction with IPsec, it is not the primary protocol for AWS VPN.", "SSL is incorrect because SSL is used for securing application layer connections, not for Site-to-Site VPN.", "PPTP is outdated and not recommended for use in modern VPN configurations."]
answers = ["IPsec"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "eabc807e-b41a-44a4-822f-5a05d998cbdf"
question = "Which of the following statements is true about AWS VPN's ability to handle multiple connections? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["You can have multiple Site-to-Site VPN connections for high availability", "Only one VPN connection is allowed per VPC", "Only a single customer gateway can connect to multiple VPCs", "AWS does not support overlapping CIDR blocks for VPN connections", "This is a bad question and does not have an objective answer."]
explanation = ["You can have multiple Site-to-Site VPN connections for high availability is correct because AWS allows multiple connections to enhance redundancy.", "Only one VPN connection is allowed per VPC is incorrect as multiple connections are supported.", "Only a single customer gateway can connect to multiple VPCs is wrong; multiple customer gateways can connect to one VPC.", "AWS does not support overlapping CIDR blocks for VPN connections is wrong; overlapping CIDR blocks generally cause routing issues."]
answers = ["You can have multiple Site-to-Site VPN connections for high availability"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "93209ec8-cbf8-4d43-9bc5-6e8c7b48d879"
question = "Which AWS feature can automatically route traffic through the VPN connection if it goes down? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Elastic Load Balancer", "Route 53", "AWS Global Accelerator", "Dynamic routing with BGP", "This is a bad question and does not have an objective answer."]
explanation = ["Dynamic routing with BGP is correct because it allows automatic failover and rerouting of traffic based on the current state of the VPN connection.", "Elastic Load Balancer is wrong because it is designed for balancing incoming application traffic, not for VPN failover.", "Route 53 is incorrect; it is for DNS management but does not manage routes for VPN connections.", "AWS Global Accelerator is incorrect as it enhances availability for applications over the Internet, not specifically for VPN traffic."]
answers = ["Dynamic routing with BGP"]
claude_answers = ["Route 53"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "69e08355-75d0-4d74-87a7-559429ce8b48"
question = "What is the main purpose of the Customer Gateway in an AWS Site-to-Site VPN setup? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To create a secure endpoint on the AWS side of the VPN", "To configure the AWS VPC and resources", "To represent the on-premises router or firewall", "To provide DNS services for the VPN traffic", "This is a bad question and does not have an objective answer."]
explanation = ["To represent the on-premises router or firewall is correct because the Customer Gateway is the representation of the device on the user's side of the VPN connection.", "To create a secure endpoint on the AWS side of the VPN is wrong, as this is the function of the Virtual Private Gateway.", "To configure the AWS VPC and resources is incorrect; the VPC configuration is done separately.", "To provide DNS services for the VPN traffic is wrong; DNS services are not a function of the Customer Gateway."]
answers = ["To represent the on-premises router or firewall"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e9c6ef87-51db-4b71-8057-215a48a4d0f6"
question = "Which characterizes an AWS VPN connection's default routing behavior? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["It uses static routing by default", "It automatically supports transit gateways", "It requires manual configurations for dynamic routing", "It provides a single route table per connection", "This is a bad question and does not have an objective answer."]
explanation = ["It uses static routing by default is correct because sites are configured to use static routes unless BGP is enabled.", "It automatically supports transit gateways is wrong because transit gateways require specific configurations.", "It requires manual configurations for dynamic routing is incorrect as BGP can be enabled to support dynamic routing.", "It provides a single route table per connection is wrong; multiple route tables can be associated with a VPC."]
answers = ["It uses static routing by default"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "77fa94ff-e7ad-409f-932d-32adc3721bac"
question = "What is the maximum bandwidth supported by a single AWS Site-to-Site VPN connection? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["1.25 Gbps", "5 Gbps", "50 Mbps", "100 Mbps", "This is a bad question and does not have an objective answer."]
explanation = ["1.25 Gbps is correct as this is the maximum throughput defined for a single AWS Site-to-Site VPN tunnel.", "5 Gbps is wrong; this is the aggregate limit for multiple tunnels, not per single connection.", "50 Mbps and 100 Mbps are incorrect as these are values far less than the actual maximum bandwidth capability."]
answers = ["1.25 Gbps"]
claude_answers = ["50 Mbps"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e96e790d-3e9e-42e3-b91f-f29de60d6e7c"
question = "Which two AWS services can be used to manage user credentials securely? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Identity and Access Management (IAM)", "AWS Secrets Manager", "Amazon RDS", "Amazon CloudFront", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Identity and Access Management (IAM) is correct because it provides secure management of users and their permissions.", "AWS Secrets Manager is correct because it allows you to securely store and manage sensitive information like API keys and database credentials.", "Amazon RDS is wrong because it is a database service and does not manage user credentials.", "Amazon CloudFront is wrong as it is a content delivery network and does not handle user credentials."]
answers = ["AWS Identity and Access Management (IAM)", "AWS Secrets Manager"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "62ea1ff6-580b-47af-9598-1c2c4e917f6d"
question = "What is the primary benefit of using AWS Organizations for managing multiple AWS accounts?"
good_bad_why = "Answers: [1,2]\n"
options = ["It provides a single billing account.", "It simplifies access to shared resources across accounts.", "It allows for centralized policy management.", "It automatically scales accounts based on usage.", "This is a bad question and does not have an objective answer."]
explanation = ["It provides a single billing account is a benefit, but not the primary function of Organizations.", "It simplifies access to shared resources across accounts is beneficial but not the main feature of Organizations.", "It allows for centralized policy management is correct because AWS Organizations enables you to manage policies across multiple accounts.", "It automatically scales accounts based on usage is incorrect as AWS Organizations does not provide this feature."]
answers = ["It allows for centralized policy management."]
alternative_answers = ["It provides a single billing account.", "It allows for centralized policy management.", "It simplifies access to shared resources across accounts."]
claude_answers = ["It provides a single billing account.", "It simplifies access to shared resources across accounts.", "It allows for centralized policy management."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "29d752f6-c1e5-48e5-8d08-b9ee55df33ef"
question = "Which feature of AWS IAM allows you to limit the actions a user can perform based on specific conditions?"
good_bad_why = "Answers: [1,2]\n"
options = ["Groups", "Permissions boundaries", "Resource-based policies", "Identity-based policies", "This is a bad question and does not have an objective answer."]
explanation = ["Groups do not set conditions; they simply aggregate IAM users.", "Permissions boundaries are policies that define the maximum permissions for an IAM entity, but they are not condition-based.", "Resource-based policies can define access control and conditions for specific resources, but they are not specific to users.", "Identity-based policies are correct because they can include conditions that restrict actions based on specified criteria."]
answers = ["Identity-based policies"]
alternative_answers = ["Permissions boundaries"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e57bdea4-9f45-418d-810f-1cfbbcf326ed"
question = "When designing an application that will run on AWS, which design principle should you follow to ensure compliance with governance requirements?"
good_bad_why = "Answers: [1,2]\n"
options = ["Use temporary credentials for application access", "Solely rely on public subnets", "Implement provisioning through AWS CloudFormation", "Avoid using encryption for data at rest", "This is a bad question and does not have an objective answer."]
explanation = ["Use temporary credentials for application access is correct because using temporary credentials enhances security and complies with governance.", "Solely relying on public subnets is incorrect as it exposes resources to the internet without proper controls.", "Implement provisioning through AWS CloudFormation is beneficial, but it is not a primary governance requirement.", "Avoid using encryption for data at rest is against compliance best practices."]
answers = ["Use temporary credentials for application access"]
alternative_answers = ["Use temporary credentials for application access", "Implement provisioning through AWS CloudFormation"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9ae37df6-38cc-4eed-88d6-91bb17a07f5f"
question = "What must you do to enable multi-factor authentication (MFA) for an IAM user?"
good_bad_why = "Answers: [1,2]\n"
options = ["Create a virtual MFA device", "Attach an IAM role with MFA", "Set a strong password policy", "Enable multifactor security for the account", "This is a bad question and does not have an objective answer."]
explanation = ["Create a virtual MFA device is correct because this is the required step to add an MFA authentication method to IAM users.", "Attach an IAM role with MFA does not apply as roles are not directly assigned to users for MFA.", "Set a strong password policy is best practice but not directly related to enabling MFA.", "Enable multifactor security for the account is incorrect terminology as the configuration is specifically per IAM user."]
answers = ["Create a virtual MFA device"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "24e20149-eb63-4d14-9f50-2a7422dd32a0"
question = "Which AWS resource can be used to rotate access keys automatically?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Amazon CloudWatch", "AWS Systems Manager", "AWS Lambda", "AWS CodeBuild", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon CloudWatch does not manage access key rotation.", "AWS Systems Manager can manage resources but does not automatically rotate access keys.", "AWS Lambda can run code in response to events but doesn't manage key rotation directly on its own.", "AWS CodeBuild is incorrect as it is a service for building code and does not have a direct relation to key rotation."]
answers = ["AWS Lambda"]
alternative_answers = ["AWS Lambda", "AWS Systems Manager"]
claude_answers = ["AWS Systems Manager"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "a6d25eb2-aec7-4624-9962-132766e859d0"
question = "Which service should you use to monitor AWS account activity and prevent unauthorized access to resources?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudTrail", "AWS Config", "Amazon GuardDuty", "AWS Security Hub", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail is correct because it records API calls and activities within your AWS account for governance and compliance.", "AWS Config provides resource configuration monitoring but is not primarily focused on user activity.", "Amazon GuardDuty detects anomalies but does not track account activity.", "AWS Security Hub aggregates findings from multiple security services, but it does not monitor AWS account activity directly."]
answers = ["AWS CloudTrail"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1d51e3e9-0355-4e71-a113-c1e01f001d12"
question = "Which of the following actions will help you comply with the AWS Shared Responsibility Model?"
good_bad_why = "Answers: [1,2]\n"
options = ["Implement security controls for your application stack", "AWS is responsible for all security requirements", "Encrypt data at rest by default", "Only use AWS managed services", "This is a bad question and does not have an objective answer."]
explanation = ["Implement security controls for your application stack is correct as you are responsible for securing your applications.", "AWS is responsible for all security requirements is incorrect, as customers have a share in the responsibility.", "Encrypting data at rest by default is a good practice but doesn't cover the entire model.", "Only using AWS managed services limits your options and does not guarantee compliance."]
answers = ["Implement security controls for your application stack"]
alternative_answers = ["Implement security controls for your application stack", "Encrypt data at rest by default"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3b6fbd85-b84c-4fd1-9927-8bd5f0b0e7f9"
question = "What feature of AWS IAM allows you to delegate access to your AWS resources without sharing your security credentials?"
good_bad_why = "Answers: [1,2]\n"
options = ["IAM Roles", "IAM Users", "IAM Groups", "Resource Policies", "This is a bad question and does not have an objective answer."]
explanation = ["IAM Roles is correct because they allow you to grant permissions to services and users to access resources without sharing credentials.", "IAM Users have their own credentials and are not used for delegation.", "IAM Groups are used for managing permissions among several users but do not facilitate credential delegation.", "Resource Policies apply to resources but do not provide a mechanism for credential delegation."]
answers = ["IAM Roles"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5d75cd3f-667a-41fd-9b1c-6f56cbd45e23"
question = "Which monitoring service can help detect unauthorized access to your AWS resources?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Security Hub", "Amazon CloudWatch Logs", "AWS Config", "Amazon GuardDuty", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Security Hub provides a centralized way to monitor security across services but does not directly detect unauthorized access.", "Amazon CloudWatch Logs allows for logging but does not have specific detection capabilities.", "AWS Config monitors resource configurations and compliance but isn't directly for detecting unauthorized access.", "Amazon GuardDuty is correct as it detects suspicious activity and unauthorized access attempts in real-time."]
answers = ["Amazon GuardDuty"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "981656d0-5e9b-4ead-8781-d395d5c579a9"
question = "What are the primary benefits of using AWS Certificate Manager (ACM) for managing certificates? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Automatic renewal of SSL/TLS certificates", "Manual installation and management of certificates", "Integration with Elastic Load Balancing and Amazon CloudFront", "Increased management overhead", "This is a bad question and does not have an objective answer."]
explanation = ["Automatic renewal of SSL/TLS certificates is correct because ACM simplifies certificate management by automatically renewing certificates.", "Manual installation and management of certificates is wrong because ACM automates this process.", "Integration with Elastic Load Balancing and Amazon CloudFront is correct as ACM seamlessly integrates with these services.", "Increased management overhead is wrong, as ACM aims to reduce the management complexity of certificates."]
answers = ["Automatic renewal of SSL/TLS certificates", "Integration with Elastic Load Balancing and Amazon CloudFront"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ea8a5551-dff0-4df1-844a-8c610777b114"
question = "Which of the following types of certificates can AWS Certificate Manager manage? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Self-signed certificates", "Public certificates from third-party certificate authorities", "Private certificates only", "Only ACM-issued certificates", "This is a bad question and does not have an objective answer."]
explanation = ["Self-signed certificates are incorrect as ACM provides managed service mainly for public certificates and ACM-issued certificates.", "Public certificates from third-party certificate authorities is wrong because ACM does not manage third-party certs directly.", "Private certificates only is incorrect as ACM does support public certificates as well.", "Only ACM-issued certificates is correct as ACM is designed to handle certificates that it issues."]
answers = ["Only ACM-issued certificates"]
claude_answers = ["Public certificates from third-party certificate authorities"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "371183d4-b979-4d3d-9cf4-c7cae959d877"
question = "Which API actions are available for AWS Certificate Manager? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["ListCertificates", "UploadCertificate", "DeleteCertificate", "ExportCertificate", "This is a bad question and does not have an objective answer."]
explanation = ["ListCertificates is correct as it is a standard API action available in ACM for listing managed certificates.", "UploadCertificate is incorrect; ACM does not have this direct API action.", "DeleteCertificate is incorrect; while deletion can be done, it isn't a primary or standard listed action.", "ExportCertificate is incorrect; ACM does not allow exporting private keys of its managed certificates."]
answers = ["ListCertificates"]
alternative_answers = ["DeleteCertificate", "ExportCertificate", "ListCertificates"]
claude_answers = ["ExportCertificate", "UploadCertificate", "DeleteCertificate", "ListCertificates"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5207c10a-dcbd-49d6-bff6-3bfeed1377a9"
question = "When requesting a certificate through AWS Certificate Manager, what domain validation methods can be used? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Email validation", "DNS validation", "File upload validation", "IP address validation", "This is a bad question and does not have an objective answer."]
explanation = ["Email validation is correct as it is one method for domain validation.", "DNS validation is also correct because ACM supports validation by adding CNAME records.", "File upload validation is incorrect as this is not a standard method in ACM.", "IP address validation is wrong since ACM needs domain names, not IPs."]
answers = ["Email validation", "DNS validation"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3795088e-6289-4571-ad98-b7d631ee51ea"
question = "What happens to an ACM certificate that has not been renewed when it reaches its expiration date? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["It is automatically renewed and remains functional", "It becomes invalid and cannot be used", "It continues to function until manually deleted", "It is archived and can be restored later", "This is a bad question and does not have an objective answer."]
explanation = ["It is automatically renewed and remains functional is incorrect as a certificate that is not renewed does not continue automatically.", "It becomes invalid and cannot be used is correct; expired certificates cannot be used for secure connections.", "It continues to function until manually deleted is wrong since it won't function after expiration.", "It is archived and can be restored later is incorrect as expiration renders the certificate useless."]
answers = ["It becomes invalid and cannot be used"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "43d23aeb-dc28-4cd7-9a0d-8280bf22e9e9"
question = "Which AWS services can directly use certificates managed by ACM? (Select 2)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Amazon EC2", "Amazon API Gateway", "AWS Lambda", "Amazon S3", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon EC2 is wrong as you cannot directly use ACM certificates with individual EC2 instances.", "Amazon API Gateway is correct as it can integrate directly with ACM.", "AWS Lambda is incorrect because Lambda itself does not utilize certificates directly.", "Amazon S3 is wrong as ACM cannot directly attach certificates to S3 buckets unless using CloudFront."]
answers = ["Amazon API Gateway"]
alternative_answers = ["Amazon API Gateway", "Amazon S3"]
claude_answers = ["Amazon EC2", "Amazon API Gateway"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "f1f09220-4579-492f-bf1f-dc90798806de"
question = "What is the purpose of importing an existing SSL/TLS certificate into AWS Certificate Manager? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To manage it via ACM and benefit from features like renewal", "To make it publicly available", "To ensure that it can be issued by AWS", "To lower the cost associated with certificate management", "This is a bad question and does not have an objective answer."]
explanation = ["To manage it via ACM and benefit from features like renewal is correct, as importing allows ACM to manage the lifecycle of the certificate.", "To make it publicly available is incorrect; it is already an existing cert.", "To ensure that it can be issued by AWS is wrong; it already exists.", "To lower the cost associated with certificate management is incorrect; costs can still apply."]
answers = ["To manage it via ACM and benefit from features like renewal"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d8e29692-0b88-43b6-941e-5871679b1fd3"
question = "What type of certificate can be issued for a wildcard domain in ACM? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Multi-domain certificate only", "Single-domain certificate only", "Wildcard certificate", "Self-signed certificate", "This is a bad question and does not have an objective answer."]
explanation = ["Multi-domain certificate only is incorrect, as ACM can issue wildcard certificates specifically.", "Single-domain certificate only is wrong; wildcard certificates cover multiple subdomains, not just one.", "Wildcard certificate is correct since ACM allows the issuance of wildcard certificates.", "Self-signed certificate is incorrect because ACM does not issue self-signed certificates."]
answers = ["Wildcard certificate"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "86179958-d835-44c5-b602-05fb29e5f1e9"
question = "When integrating ACM with CloudFront, what must you ensure about the certificate? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["The certificate must be imported", "The certificate must be in the same AWS Region as the distribution", "The certificate must be issued by Amazon", "The certificate must be renewed annually", "This is a bad question and does not have an objective answer."]
explanation = ["The certificate must be imported is incorrect; ACM can issue certificates directly without needing imports for CloudFront.", "The certificate must be in the same AWS Region as the distribution is wrong as ACM certificates can be deployed to CloudFront regardless of region.", "The certificate must be issued by Amazon is correct as CloudFront utilizes certificates managed by ACM.", "The certificate must be renewed annually is incorrect since ACM handles renewals."]
answers = ["The certificate must be issued by Amazon"]
claude_answers = ["The certificate must be in the same AWS Region as the distribution"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5433b812-6b45-4d0c-9e26-e7a38dd8215c"
question = "Which command can you use to request a new public certificate through AWS CLI for use with ACM? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["aws acm create-certificate", "aws acm request-certificate", "aws acm add-certificate", "aws acm get-certificate", "This is a bad question and does not have an objective answer."]
explanation = ["aws acm create-certificate is incorrect; no such command exists.", "aws acm request-certificate is correct as it directly initiates the request for a new certificate.", "aws acm add-certificate is incorrect because you cannot add certificates this way.", "aws acm get-certificate is wrong; this command retrieves the certificate but does not request one."]
answers = ["aws acm request-certificate"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b7c27d66-3ecc-4556-b620-8945afdf7e9a"
question = "Which two data sources can Amazon Detective analyze to help determine the root cause of a security issue? (Select 2)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["AWS CloudTrail logs", "Amazon VPC Flow Logs", "Amazon S3 access logs", "Amazon GuardDuty findings", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail logs provide insights into API activity and can help identify who performed actions.", "Amazon VPC Flow Logs capture information about the IP traffic going to and from network interfaces, aiding in understanding network traffic patterns.", "Amazon S3 access logs do not provide context for security issues and are less relevant for root cause analysis in Detective.", "Amazon GuardDuty findings provide alerts on potential threats but do not directly contribute to root cause analysis."]
answers = ["AWS CloudTrail logs", "Amazon VPC Flow Logs"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "cfdaff04-2cb8-4d65-a58c-24294fae2b9a"
question = "What is the primary purpose of Amazon Detective?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["To automate incident response", "To perform threat detection", "To conduct analytics on security data", "To visualize data and understand security issues", "This is a bad question and does not have an objective answer."]
explanation = ["To automate incident response is incorrect; Detective is primarily for data analysis rather than automation.", "To perform threat detection is not accurate; Amazon GuardDuty is designed for that purpose.", "To conduct analytics on security data is part of its capabilities, but visualizing data is more aligned with the primary purpose.", "To visualize data and understand security issues is correct; Detective helps in analyzing and visualizing interactions among AWS resources for security issues."]
answers = ["To visualize data and understand security issues"]
claude_answers = ["To conduct analytics on security data"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "3866bab8-f563-4614-a112-aaa34b25bf36"
question = "When using Amazon Detective, which AWS service records API activity that may assist in identifying unauthorized access?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudTrail", "AWS Config", "AWS Identity and Access Management (IAM)", "Amazon Inspector", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail is correct as it logs all API calls made within the AWS environment, helping to track historical API activities.", "AWS Config monitors the configuration state, but does not log API activity.", "AWS Identity and Access Management (IAM) manages permissions; it does not log API calls.", "Amazon Inspector assesses the security of applications but does not record API activity."]
answers = ["AWS CloudTrail"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6fb5da2c-7c58-498c-ba12-470eb220292d"
question = "After creating an Amazon Detective account, what is the first step to ingest data into Amazon Detective?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Enable Amazon GuardDuty", "Set up Amazon CloudWatch", "Create an AWS Organizations account", "Integrate with AWS Security Hub", "This is a bad question and does not have an objective answer."]
explanation = ["Enabling Amazon GuardDuty is the first step; it generates findings that Detective can use for analysis.", "Setting up Amazon CloudWatch is unrelated to loading data into Detective.", "Creating an AWS Organizations account is not necessary for using Detective.", "Integrating with AWS Security Hub is not required before using Detective."]
answers = ["Enable Amazon GuardDuty"]
claude_answers = ["Integrate with AWS Security Hub"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "1a1c577b-08d5-40c6-8067-c915ee597119"
question = "Which of the following can Amazon Detective NOT analyze?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Lambda execution logs", "Access logs from AWS CloudTrail", "User activity logs from IAM", "Network traffic logs", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Lambda execution logs are incorrect; Detective does not specifically analyze these logs directly.", "Access logs from AWS CloudTrail are key data sources that Detective analyzes.", "User activity logs from IAM are part of the information Detective assesses.", "Network traffic logs like VPC Flow Logs are used for analysis in Detective."]
answers = ["AWS Lambda execution logs"]
claude_answers = ["Network traffic logs"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0db1073d-d847-4583-86ff-d1e9f9dd5e52"
question = "In Amazon Detective, what can you use to assist in the investigation of findings?"
good_bad_why = "Answers: [1,2]\n"
options = ["Graphs and visualizations", "Automation scripts", "Real-time alerts", "Service quotas", "This is a bad question and does not have an objective answer."]
explanation = ["Graphs and visualizations are correct; they provide insights into resource relationships and activity for investigation.", "Automation scripts are not a feature of Detective; it is primarily an analytical tool.", "Real-time alerts are features of services like GuardDuty, not Detective.", "Service quotas are unrelated to the investigation process."]
answers = ["Graphs and visualizations"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "08fa8259-4f2c-47f8-a3f8-edde621abb37"
question = "How does Amazon Detective help improve security posture?"
good_bad_why = "Answers: [1,2]\n"
options = ["By enforcing IAM policies", "By providing recommendations for threat remediation", "By detecting anomalies in security behaviors", "By integrating with AWS Config", "This is a bad question and does not have an objective answer."]
explanation = ["By enforcing IAM policies is inaccurate as Detective does not manage permissions.", "Providing recommendations for threat remediation is more characteristic of services like AWS Security Hub.", "Detecting anomalies in security behaviors is correct; this is a core function of Amazon Detective.", "Integrating with AWS Config is not a primary function of Detective; it focuses on data analytics."]
answers = ["By detecting anomalies in security behaviors"]
alternative_answers = ["By detecting anomalies in security behaviors", "By providing recommendations for threat remediation"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5764bb9f-66ad-4341-8824-514754399197"
question = "Which of the following statements is true about Amazon Detective's compliance with data protection laws?"
good_bad_why = "Answers: [1,2]\n"
options = ["It automatically ensures compliance with GDPR.", "It requires users to configure data encryption.", "It provides tools to assist with compliance reporting.", "It is completely non-compliant by default.", "This is a bad question and does not have an objective answer."]
explanation = ["Automatically ensuring compliance with GDPR is false; it provides tools but requires user efforts.", "Users must configure data encryption separately; Detective itself does not automatically manage encryption.", "Providing tools to assist with compliance reporting is correct as Detective can facilitate compliance efforts.", "Being completely non-compliant is not true; it follows AWS compliance standards but requires user actions."]
answers = ["It provides tools to assist with compliance reporting."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "627ea193-c66f-447d-9b0e-7ab8558af679"
question = "Which metric does Amazon Detective primarily analyze to help determine security incidents?"
good_bad_why = "Answers: [1,2]\n"
options = ["CPU utilization", "Network throughput", "User login attempts", "Unauthorized API calls", "This is a bad question and does not have an objective answer."]
explanation = ["CPU utilization does not provide security insights; it's focused on resource performance.", "Network throughput is a performance metric, not a direct indicator of security incidents.", "User login attempts can relate to security incidents, but are not the primary focus in Detective.", "Unauthorized API calls are crucial as they indicate potential breaches and are central to Detective's analysis."]
answers = ["Unauthorized API calls"]
alternative_answers = ["Unauthorized API calls", "User login attempts"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5efb3dd5-1846-4662-b80f-aad92c1cc9b1"
question = "Which AWS service integrates closely with Amazon Detective to enhance its functionality for security investigations?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Shield", "Amazon GuardDuty", "AWS WAF", "Amazon Macie", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Shield is related to DDoS protection and does not provide relevant data for Detective.", "Amazon GuardDuty integrates closely by generating findings used by Detective for investigations, making it the correct choice.", "AWS WAF protects applications from web attacks but does not provide data for Detective.", "Amazon Macie is focused on data privacy and protection, not direct integration with Detective."]
answers = ["Amazon GuardDuty"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "17820b4b-de93-4a69-8428-83460ee2e967"
question = "Which two AWS Directory Service offerings can be integrated with on-premises Active Directory? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Managed Microsoft AD", "Amazon Cognito", "Simple AD", "AD Connector", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Managed Microsoft AD is correct because it integrates with on-premises AD.", "Amazon Cognito is incorrect because it is used for user authentication and does not directly integrate with on-premises AD.", "Simple AD is incorrect because it is a standalone directory and does not support integration with on-premises AD.", "AD Connector is correct because it allows for a seamless connection with on-premises Active Directory."]
answers = ["AWS Managed Microsoft AD", "AD Connector"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a8d8702c-8cd7-44eb-883e-f832b7f38035"
question = "What is the maximum number of users per AWS Directory Service Simple AD? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["500", "2000", "50", "100", "This is a bad question and does not have an objective answer."]
explanation = ["500 is correct as Simple AD has a limit of 500 users.", "2000 is wrong as that limit exceeds the capability of Simple AD.", "50 is incorrect as it is too low a limit.", "100 is also incorrect as it does not reflect the maximum."]
answers = ["500"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3004cf79-e7f0-4192-a834-8dda3a055198"
question = "Which AWS Directory Service option requires the least operational overhead? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AD Connector", "Simple AD", "AWS Managed Microsoft AD", "Microsoft AD on EC2", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Managed Microsoft AD is correct because it is a fully managed service, reducing operational overhead.", "AD Connector requires some configuration but is less manageable than Managed AD.", "Simple AD does require management like any directory service.", "Microsoft AD on EC2 requires significant operational oversight."]
answers = ["AWS Managed Microsoft AD"]
claude_answers = ["AD Connector"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "efa48fb7-9d57-480d-ac34-3c8f71071183"
question = "Which AWS service can synchronize users from an on-premises Active Directory to AWS Managed Microsoft AD? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Directory Service for Microsoft AD", "AWS IAM", "AWS DMS", "AWS DataSync", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Directory Service for Microsoft AD is correct because it supports synchronization with on-premises Active Directory.", "AWS IAM does not perform synchronization for directory services.", "AWS DMS is for database migration and not related to directory services.", "AWS DataSync is for data transfer and doesn't sync directory users."]
answers = ["AWS Directory Service for Microsoft AD"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e5ed0be2-e188-4d8f-b911-b037ac71d1c2"
question = "Which of the following can be used to access AWS Managed Microsoft AD? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CLI", "Remote Desktop Protocol (RDP)", "SFTP", "SSH", "This is a bad question and does not have an objective answer."]
explanation = ["Remote Desktop Protocol (RDP) is correct as it allows users to access instances that are domain-joined to AWS Managed Microsoft AD.", "AWS CLI is for management and not for accessing AD.", "SFTP is for file transfer, unrelated to directory services.", "SSH is generally used for Linux instances, not directly related to Managed AD access."]
answers = ["Remote Desktop Protocol (RDP)"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d0eff2b3-3f99-4acb-a7e9-513c4219fad7"
question = "In which scenarios should you use AWS Simple AD? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["When you need to connect to on-premises AD", "When you need a basic, low-cost directory for less than 500 users", "When you need full compatibility with Active Directory features", "When you require user management features exclusively for AWS resources", "This is a bad question and does not have an objective answer."]
explanation = ["When you need a basic, low-cost directory for less than 500 users is correct because Simple AD fits that requirement.", "Connecting to on-premises AD requires AD Connector or AWS Managed AD.", "Full compatibility with AD features is not provided by Simple AD.", "User management for AWS resources can be done with various services without using Simple AD."]
answers = ["When you need a basic, low-cost directory for less than 500 users"]
alternative_answers = ["When you need a basic", "low-cost directory for less than 500 users"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "d80c977a-f650-4933-a5d5-d744cb7d1849"
question = "What is a key benefit of using AD Connector? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Reduces the cost of hosting a directory", "Utilizes on-premises directory for AWS resources", "Provides highly available DNS services", "Offers backup and recovery features for AD", "This is a bad question and does not have an objective answer."]
explanation = ["Utilizes on-premises directory for AWS resources is correct as AD Connector allows leveraging existing AD for AWS services.", "Reducing hosting costs isn't the primary purpose of AD Connector.", "High availability of DNS may be a feature, but it's not the key benefit.", "Backup and recovery isn't provided by AD Connector; it's primarily a connection tool."]
answers = ["Utilizes on-premises directory for AWS resources"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "05a121bf-eb94-4923-93ae-0cc896ff93fe"
question = "What authentication method is supported by AWS Directory Service for Microsoft AD? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Basic authentication", "Kerberos authentication", "Digest authentication", "Token-based authentication", "This is a bad question and does not have an objective answer."]
explanation = ["Kerberos authentication is correct as it's a standard for AWS Managed Microsoft AD.", "Basic and Digest authentication are not used in AD setups, and Token-based authentication is irrelevant to AD's core methods."]
answers = ["Kerberos authentication"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "77c32b0a-725c-4b84-884f-575ad860b13a"
question = "Which of the following is true about AWS Directory Service? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["It can be used only in the US regions.", "It supports multi-region active directory setups.", "It provides a command line interface for user management.", "It can integrate with existing Active Directory environments.", "This is a bad question and does not have an objective answer."]
explanation = ["It can integrate with existing Active Directory environments is correct as Directory Service provides integration options.", "It's available in multiple regions beyond the US.", "There's no CLI specifically for user management in Directory Service.", "Multi-region setups for active directory are complex and not straightforward."]
answers = ["It can integrate with existing Active Directory environments."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "4923a6a1-bdfc-4198-89dc-6993243447cf"
question = "Which feature is NOT provided by AWS Directory Service? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["User authentication", "Group policy management", "Multi-factor authentication directly", "Managed backups", "This is a bad question and does not have an objective answer."]
explanation = ["Multi-factor authentication directly is correct as AWS Directory Service does not provide this natively.", "User authentication is a core feature of Directory Service.", "Group policy management and Managed backups are both functionalities offered by AWS Directory Service."]
answers = ["Multi-factor authentication directly"]
claude_answers = ["Managed backups"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "830a842f-c43a-4da7-96b0-2cad79e935bb"
question = "What are two key benefits of using AWS Firewall Manager? (Select 2)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Centralized management of firewall rules", "Increased latency for applications", "Simplified compliance auditing", "Higher operational costs", "This is a bad question and does not have an objective answer."]
explanation = ["Centralized management of firewall rules is correct because it allows you to manage multiple accounts in one place.", "Increased latency for applications is wrong because AWS Firewall Manager is designed to enhance security without adding significant latency.", "Simplified compliance auditing is correct as it aids in ensuring compliance across multiple accounts.", "Higher operational costs is wrong as AWS Firewall Manager aims to reduce management overhead and costs."]
answers = ["Centralized management of firewall rules", "Simplified compliance auditing"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "cddfc26e-08d9-4101-8511-aaab7df274c7"
question = "Which types of resources can AWS Firewall Manager manage? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Only AWS WAF rules", "AWS WAF rules and AWS Shield protections", "Just AWS Shield Advanced", "AWS System Manager parameters", "This is a bad question and does not have an objective answer."]
explanation = ["Only AWS WAF rules is wrong because AWS Firewall Manager manages both WAF and Shield resources.", "AWS WAF rules and AWS Shield protections is correct because it supports multiple resource types.", "Just AWS Shield Advanced is incorrect as it only refers to one type of resource, not both.", "AWS System Manager parameters is incorrect as it does not pertain to Firewall Manager."]
answers = ["AWS WAF rules and AWS Shield protections"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5f7c5d37-22b6-4099-ad7a-73a8f54c1610"
question = "What is the primary purpose of AWS Firewall Manager? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To improve application performance", "To centrally configure and manage firewall rules across accounts", "To handle data backups automatically", "To provide cost analysis for AWS services", "This is a bad question and does not have an objective answer."]
explanation = ["To improve application performance is wrong as the primary purpose of Firewall Manager is security management.", "To centrally configure and manage firewall rules across accounts is correct as this is its main function.", "To handle data backups automatically is incorrect since that is not related to Firewall Manager functionalities.", "To provide cost analysis for AWS services is incorrect as this is beyond Firewall Manager's scope."]
answers = ["To centrally configure and manage firewall rules across accounts"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "577fca11-1c64-4294-8f7e-4798a526d46c"
question = "When configuring AWS Firewall Manager, what can you specify under policy rules? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["IP Set conditions", "Security group IDs", "WebACLs", "Instance types", "This is a bad question and does not have an objective answer."]
explanation = ["IP Set conditions is correct because you can define conditions for IP sets in policies.", "Security group IDs is incorrect as Firewall Manager does not primarily manage security groups.", "WebACLs is correct because creating and managing Web Access Control Lists is part of Firewall Manager's capabilities.", "Instance types is wrong since it is not relevant in the context of Firewall Manager rules."]
answers = ["IP Set conditions", "WebACLs"]
claude_answers = ["Security group IDs", "WebACLs"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e3655f0d-ce77-4a64-9169-152991159471"
question = "AWS Firewall Manager integrates with which AWS services? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon EC2", "AWS Lambda", "Amazon CloudWatch", "AWS Organizations", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon EC2 is wrong because Firewall Manager does not specifically integrate only with EC2.", "AWS Lambda is incorrect as it is not directly related to Firewall Manager's functions.", "Amazon CloudWatch is incorrect as it is used for monitoring, not directly for managing firewalls.", "AWS Organizations is correct because Firewall Manager operates across multiple accounts within an organization."]
answers = ["AWS Organizations"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1839d29c-5053-44ef-adcd-e0ee198dd50d"
question = "Which best describes how AWS Firewall Manager applies a policy configuration? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Policies are applied to single accounts only", "Policies are applied on a per-region basis", "Policies are applied across all accounts in an organization", "Policies must be manually applied to each resource individually", "This is a bad question and does not have an objective answer."]
explanation = ["Policies are applied to single accounts only is wrong because they can be applied across multiple accounts.", "Policies are applied on a per-region basis is incorrect as they are mainly organization-wide.", "Policies are applied across all accounts in an organization is correct as that reflects functionality.", "Policies must be manually applied to each resource individually is incorrect as Firewall Manager automates this process."]
answers = ["Policies are applied across all accounts in an organization"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ec490fad-c045-421f-a073-a3a02bb00b42"
question = "Which AWS service must be set up in advance to use AWS Firewall Manager for WAF? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Config", "AWS Organizations", "Amazon GuardDuty", "AWS Shield Advanced", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Config is wrong as it is not a requirement for using WAF with Firewall Manager.", "AWS Organizations is correct because Firewall Manager requires an organization setup to manage multiple accounts.", "Amazon GuardDuty is not a prerequisite since it focuses on threat detection.", "AWS Shield Advanced is correct because it should be enabled if you want to manage Shield protections with Firewall Manager."]
answers = ["AWS Organizations", "AWS Shield Advanced"]
claude_answers = ["AWS Config", "AWS Organizations"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5ce7c68c-66c2-43d1-943c-a18a42e27970"
question = "What is a prerequisite for creating AWS Firewall Manager policies? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["An AWS Support plan", "Root account access", "Existing WAF WebACLs", "No prerequisites required", "This is a bad question and does not have an objective answer."]
explanation = ["An AWS Support plan is incorrect as policies can be created without any specific support plan.", "Root account access is not necessary, as policies can be created using IAM permissions.", "Existing WAF WebACLs is correct because you need to have these set up before creating related Firewall Manager policies.", "No prerequisites required is wrong since there are necessary configurations required."]
answers = ["Existing WAF WebACLs"]
alternative_answers = ["An AWS Support plan"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ebf26ba5-7e83-45ce-a291-744e618fdffa"
question = "Which type of alerts can AWS Firewall Manager generate? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Policy violation alerts", "Resource usage alerts", "AWS Shield DDoS attack alerts", "Data leakage alerts", "This is a bad question and does not have an objective answer."]
explanation = ["Policy violation alerts is correct as Firewall Manager monitors adherence to policies.", "Resource usage alerts is incorrect as that is more related to cost management.", "AWS Shield DDoS attack alerts is also correct as it integrates closely with Shield to report attacks.", "Data leakage alerts is not applicable as Firewall Manager focuses on firewall policies, not data monitoring."]
answers = ["Policy violation alerts", "AWS Shield DDoS attack alerts"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e5622e40-0df3-4b49-a714-58b3a0fe8623"
question = "How does AWS Firewall Manager simplify compliance management for organizations? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["By providing real-time compliance dashboards", "By eliminating compliance requirements altogether", "By automating security group interactions", "By allowing manual compliance checks only", "This is a bad question and does not have an objective answer."]
explanation = ["By providing real-time compliance dashboards is correct as Firewall Manager consolidates compliance status across accounts.", "By eliminating compliance requirements altogether is incorrect since Firewall Manager helps manage, not remove, such requirements.", "By automating security group interactions is incorrect as maintaining security groups is not Firewall Manager's focus.", "By allowing manual compliance checks only is incorrect since it offers automation features."]
answers = ["By providing real-time compliance dashboards"]
claude_answers = ["By automating security group interactions"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1981121e-17ee-4771-a977-a999ea6e4ed4"
question = "What are the primary functions of Amazon GuardDuty? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Continuous threat detection", "Data backup and recovery", "User identity management", "Intrusion detection and prevention", "This is a bad question and does not have an objective answer."]
explanation = ["Data backup and recovery is incorrect because GuardDuty does not handle backup operations.", "User identity management is incorrect as GuardDuty focuses on monitoring and threat detection, not managing identities."]
answers = ["Continuous threat detection", "Intrusion detection and prevention"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c47698b9-aedd-4741-a1ec-04c8ae17d242"
question = "Which of the following sources can Amazon GuardDuty analyze for potential security threats? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["VPC Flow Logs", "CloudTrail Logs", "S3 bucket policies", "EC2 instance metadata", "This is a bad question and does not have an objective answer."]
explanation = ["S3 bucket policies are not a direct source that GuardDuty analyzes for threats.", "EC2 instance metadata is not monitored by GuardDuty but can be accessed by the instances themselves."]
answers = ["VPC Flow Logs", "CloudTrail Logs"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "31abafb6-e81a-4087-a263-1c67f3f7efc4"
question = "How does Amazon GuardDuty generate findings for potential threats?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Using machine learning algorithms", "Parsing CloudFormation templates", "Running Lambda functions in response", "Storing logs in S3", "This is a bad question and does not have an objective answer."]
explanation = ["Parsing CloudFormation templates is incorrect because GuardDuty does not analyze infrastructure as code for threats.", "Running Lambda functions is not a method for generating findings; GuardDuty uses built-in intelligence instead."]
answers = ["Using machine learning algorithms"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "e434279a-31e8-4a9a-9352-b70d3e305cb1"
question = "Which of the following AWS services can be integrated directly with Amazon GuardDuty to take action on findings? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudTrail", "Amazon SNS", "AWS Data Pipeline", "Amazon EC2", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Data Pipeline does not integrate directly for response actions related to GuardDuty findings.", "Amazon EC2 is not a service used for taking action on findings but can be a resource being monitored."]
answers = ["AWS CloudTrail", "Amazon SNS"]
claude_answers = ["Amazon EC2", "Amazon SNS"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "806742b5-7ea0-45db-ab4a-d84da7d3e7cc"
question = "What is the significance of GuardDuty's Threat Intelligence Feeds?"
good_bad_why = "Answers: [1,2]\n"
options = ["They provide the latest vulnerabilities", "They enhance detection capabilities based on known malicious IPs and domains", "They are used for application performance monitoring", "They configure security groups for Amazon EC2", "This is a bad question and does not have an objective answer."]
explanation = ["Application performance monitoring is not relevant to GuardDuty's functionality.", "Configuring security groups is outside the scope of what GuardDuty does."]
answers = ["They enhance detection capabilities based on known malicious IPs and domains"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c050f430-ad60-4b8e-8386-5cd2dd4af750"
question = "Which API action is used to enable or disable Amazon GuardDuty?"
good_bad_why = "Answers: [1,2]\n"
options = ["UpdateDetector", "CreateDetector", "DeleteDetector", "ListDetectors", "This is a bad question and does not have an objective answer."]
explanation = ["CreateDetector is not the right answer because it is used to create a detector, not enable or disable it.", "DeleteDetector is incorrect as it removes the detector rather than enabling or disabling it."]
answers = ["UpdateDetector"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "433aff0e-ed01-4a31-b232-e485df27a7f3"
question = "What is a possible outcome if a GuardDuty finding is marked as 'Resolved'?"
good_bad_why = "Answers: [1,2]\n"
options = ["The finding is deleted from the history", "The finding is considered reviewed and no longer actionable", "The finding escalates to the AWS Support team", "The finding generates an automated remediation action", "This is a bad question and does not have an objective answer."]
explanation = ["The finding does not escalate to the AWS Support team upon being marked resolved.", "Automated remediation actions are not part of marking findings resolved; they need to be managed separately."]
answers = ["The finding is considered reviewed and no longer actionable"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "dc761742-2fe5-4a50-a3a4-7630d91dff6e"
question = "Which of the following best describes GuardDuty's anomaly detection capabilities?"
good_bad_why = "Answers: [1,2]\n"
options = ["It uses predefined rules to determine threats", "It learns normal patterns of account and workload behavior", "It requires manual updates for threat patterns", "It specifically scans S3 bucket contents for anomalies", "This is a bad question and does not have an objective answer."]
explanation = ["GuardDuty does not only rely on predefined rules; it analyzes behavior patterns.", "It does not specifically scan S3 buckets but analyzes different log types for anomalies."]
answers = ["It learns normal patterns of account and workload behavior"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "912533da-93a0-41a3-b284-ee9f67739f2b"
question = "When does GuardDuty automatically begin monitoring your AWS account?"
good_bad_why = "Answers: [1,2]\n"
options = ["Immediately after account creation", "Only after the first finding is generated", "After AWS CloudTrail is enabled", "After configuring dedicated IAM roles", "This is a bad question and does not have an objective answer."]
explanation = ["GuardDuty does not wait for the first finding.", "Dedicated IAM roles are not a prerequisite for GuardDuty's automatic monitoring."]
answers = ["Immediately after account creation"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a5e12632-920d-40c1-84e5-8292ab536ff6"
question = "Which format does Amazon GuardDuty use to represent its findings?"
good_bad_why = "Answers: [1,2]\n"
options = ["JSON", "CSV", "XML", "Plain text", "This is a bad question and does not have an objective answer."]
explanation = ["CSV is not the correct format for GuardDuty findings.", "Plain text does not accurately represent structured data from GuardDuty."]
answers = ["JSON"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "dc968a70-ff2a-40fe-909c-73048493a0d3"
question = "What is the purpose of IAM roles in AWS? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["To grant permissions to AWS resources", "To store IAM user credentials securely", "To delegate access to resources without sharing security credentials", "To provide a graphical interface for managing permissions", "This is a bad question and does not have an objective answer."]
explanation = ["To grant permissions to AWS resources is correct because IAM roles allow specific permissions to be assigned to AWS resources.", "To store IAM user credentials securely is wrong because IAM does not use roles for credential storage.", "To delegate access to resources without sharing security credentials is correct because IAM roles enable secure, temporary access to resources.", "To provide a graphical interface for managing permissions is wrong because IAM roles do not provide graphical interfaces; they apply permissions programmatically."]
answers = ["To grant permissions to AWS resources", "To delegate access to resources without sharing security credentials"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5b6bf302-fd55-400c-af0a-da7f8868ffb5"
question = "Which of the following statements about IAM policies is true? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["IAM policies can only be attached to users.", "Policies are written in JSON format.", "IAM policies can be created only through the AWS Management Console.", "IAM policies can apply only to EC2 instances.", "This is a bad question and does not have an objective answer."]
explanation = ["IAM policies can only be attached to users is incorrect because they can be attached to users, groups, and roles.", "Policies are written in JSON format is correct because AWS IAM policies are defined using JSON syntax.", "IAM policies can be created only through the AWS Management Console is wrong as they can also be created using the AWS CLI and SDKs.", "IAM policies can apply only to EC2 instances is incorrect because they can apply to various AWS services."]
answers = ["Policies are written in JSON format."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3b12f6bf-c351-4770-9a8d-fe10a5403ab2"
question = "What is an IAM user? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["An AWS account with administrative access to all services", "An entity that can make AWS service requests", "A temporary role that is assumed by a user", "A system-generated account for managing IAM", "This is a bad question and does not have an objective answer."]
explanation = ["An AWS account with administrative access to all services is incorrect as it refers to the root account.", "An entity that can make AWS service requests is correct because an IAM user is specifically designed for this purpose.", "A temporary role that is assumed by a user is wrong because a user and a role are distinct IAM entities.", "A system-generated account for managing IAM is incorrect as IAM users are created by other users."]
answers = ["An entity that can make AWS service requests"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6fa322bf-d851-42aa-b743-0a03e6cdc8f1"
question = "What is the purpose of an IAM policy's effect attribute? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To define which resources the policy applies to", "To specify the permissions to grant or deny", "To indicate the type of user the policy applies to", "To establish the policy's priority level", "This is a bad question and does not have an objective answer."]
explanation = ["To define which resources the policy applies to is incorrect as this is determined by the resource attribute.", "To specify the permissions to grant or deny is correct because the effect attribute explicitly states whether to allow or deny actions.", "To indicate the type of user the policy applies to is wrong as IAM policies can apply to various entities.", "To establish the policy's priority level is incorrect as IAM policy execution does not involve priority levels."]
answers = ["To specify the permissions to grant or deny"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ee9e8413-6dab-4c42-81f2-5d31f9ce8b7e"
question = "Which AWS service can help you analyze IAM roles to ensure they follow best practices? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudTrail", "AWS Config", "AWS CloudFormation", "AWS IAM Access Analyzer", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail is incorrect as it monitors account activity but does not analyze roles.", "AWS Config is wrong since it tracks configuration changes but is not specific to IAM roles' best practices.", "AWS CloudFormation is not correct as it is used to provision resources, not for analyzing IAM roles.", "AWS IAM Access Analyzer is correct because it allows users to identify resources shared with external entities and analyze roles for best practice compliance."]
answers = ["AWS IAM Access Analyzer"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "adfcf927-5f54-48a1-a258-8a4482f97bb3"
question = "What is the maximum number of inline policies an IAM user can have? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["10", "20", "5", "No limit", "This is a bad question and does not have an objective answer."]
explanation = ["10 is incorrect as the limit is higher.", "20 is wrong; the correct limit is not this number.", "5 is incorrect; IAM users can have more than five inline policies.", "No limit is correct as users can have an unlimited number of inline policies associated with their IAM user."]
answers = ["No limit"]
alternative_answers = ["10"]
claude_answers = ["20", "No limit"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "731e87a3-f3ad-4fbd-8b9f-293a7e99ac25"
question = "In the context of IAM, what does policy evaluation logic determine? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Whether a user can access specific IAM features only", "The total number of IAM roles an account can create", "If a request to access an AWS resource is allowed or denied", "The time it takes for a user to log into the AWS Management Console", "This is a bad question and does not have an objective answer."]
explanation = ["Whether a user can access specific IAM features only is incorrect; policy evaluation is broader and applies to more than just IAM features.", "The total number of IAM roles an account can create is not related to policy evaluation logic.", "If a request to access an AWS resource is allowed or denied is correct because policy evaluation logic checks permissions against policies.", "The time it takes for a user to log into the AWS Management Console is not determined by policy evaluation."]
answers = ["If a request to access an AWS resource is allowed or denied"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "44fafdf7-f50f-4e1b-9fd5-1e66c648cdd0"
question = "Which of the following is a benefit of using IAM roles in AWS? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["They reduce the number of IAM users in an account", "They allow users to manage their own credentials", "They automate deployment of AWS resources", "They provide temporary credentials for users accessing AWS resources", "This is a bad question and does not have an objective answer."]
explanation = ["They reduce the number of IAM users in an account is incorrect as roles can coexist with users; roles do not eliminate the need for users.", "They allow users to manage their own credentials is wrong because roles do not require user-managed credentials.", "They automate deployment of AWS resources is not correct; roles don't perform automation for deployments.", "They provide temporary credentials for users accessing AWS resources is correct as this is a primary function of IAM roles."]
answers = ["They provide temporary credentials for users accessing AWS resources"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c5de1c0e-da84-4464-9363-43f3fa02a433"
question = "What is the primary function of AWS Identity and Access Management (IAM) Access Analyzer?"
good_bad_why = "Answers: [1,2]\n"
options = ["To grant permissions to AWS resources", "To analyze IAM policies and identify permissions that allow access to resources", "To monitor AWS service usage", "To provide multi-factor authentication features", "This is a bad question and does not have an objective answer."]
explanation = ["Answer 1 is wrong because IAM Access Analyzer does not grant permissions directly.", "Answer 2 is correct because it specifically describes what the Access Analyzer does.", "Answer 3 is wrong because monitoring AWS service usage is not a focus of Access Analyzer.", "Answer 4 is wrong because multi-factor authentication is a different aspect of IAM."]
answers = ["To analyze IAM policies and identify permissions that allow access to resources"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "123fa0ac-cef4-43c7-8092-8ce315ee2e6a"
question = "When you create an IAM Access Analyzer, what type of resources can it analyze for public and cross-account access?"
good_bad_why = "Answers: [1,2]\n"
options = ["Only S3 buckets", "Only IAM roles", "All AWS resources", "Only EC2 instances", "This is a bad question and does not have an objective answer."]
explanation = ["Answer 1 is wrong because Access Analyzer can analyze various resources, not just S3 buckets.", "Answer 2 is wrong because it can analyze more than just IAM roles.", "Answer 3 is correct as the Analyzer can analyze multiple resource types across AWS.", "Answer 4 is wrong since it does not limit analysis to only EC2 instances."]
answers = ["All AWS resources"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8f178874-175c-48c5-baff-fb0339f73a8a"
question = "Which service in AWS helps in visually understanding resource access through access policies?"
good_bad_why = "Answers: [1,2]\n"
options = ["IAM Access Analyzer", "AWS CloudTrail", "AWS Config", "Amazon Inspector", "This is a bad question and does not have an objective answer."]
explanation = ["Answer 1 is correct because IAM Access Analyzer provides a detailed analysis of resource access.", "Answer 2 is wrong as AWS CloudTrail focuses on logging and monitoring API calls, not access visualization.", "Answer 3 is wrong because AWS Config monitors configuration changes and compliance, not access.", "Answer 4 is incorrect since Amazon Inspector is a security assessment service."]
answers = ["IAM Access Analyzer"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "375f40fb-3c0d-4640-b8fb-522a9670c8ce"
question = "What happens when IAM Access Analyzer finds a potential resource sharing issue?"
good_bad_why = "Answers: [1,2]\n"
options = ["It automatically revokes access", "It generates a public access report", "It provides findings that can be reviewed", "It sends out alerts to the IAM users", "This is a bad question and does not have an objective answer."]
explanation = ["Answer 1 is wrong because Access Analyzer does not take automatic actions on findings.", "Answer 2 is not accurate as it does not generate public access reports automatically.", "Answer 3 is correct; it provides findings that can be reviewed in the AWS Management Console.", "Answer 4 is incorrect; it does not send alerts directly to users."]
answers = ["It provides findings that can be reviewed"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c48cfaf2-80b5-4269-86b1-23b053e1882f"
question = "How does IAM Access Analyzer determine whether a resource is shared with an external entity?"
good_bad_why = "Answers: [1,2]\n"
options = ["By evaluating its resource policies", "Through user sign-in activity", "By checking IAM user permissions", "By monitoring API calls to the resource", "This is a bad question and does not have an objective answer."]
explanation = ["Answer 1 is correct because Access Analyzer assesses resource policies to identify external sharing.", "Answer 2 is wrong as user sign-in activity does not directly relate to resource sharing determination.", "Answer 3 is wrong; the analysis focuses on resource policies, not user permissions.", "Answer 4 is incorrect as monitoring API calls is not the method for this analysis."]
answers = ["By evaluating its resource policies"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "89ebf306-46dd-4f81-9381-7fbc2d37c141"
question = "What format do the findings of IAM Access Analyzer present their insights?"
good_bad_why = "Answers: [1,2]\n"
options = ["Graphical dashboards", "PDF reports", "Console view with detailed lists", "Email notifications", "This is a bad question and does not have an objective answer."]
explanation = ["Answer 1 is wrong; although visual aids may be present, the primary format is a console view.", "Answer 2 is incorrect as findings are not provided as PDF reports.", "Answer 3 is correct as findings are detailed in the AWS Management Console view.", "Answer 4 is incorrect because email notifications are not part of the findings delivery method."]
answers = ["Console view with detailed lists"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e37c3981-6eb1-42fe-85b9-aaaf29e654ea"
question = "Which of the following can IAM Access Analyzer directly integrate with for better resource management?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Lambda", "AWS CloudFormation", "AWS Identity Federation", "AWS Organizations", "This is a bad question and does not have an objective answer."]
explanation = ["Answer 1 is incorrect because Access Analyzer is not directly integrated with AWS Lambda.", "Answer 2 is incorrect since Access Analyzer itself does not integrate with CloudFormation directly.", "Answer 3 is wrong as Identity Federation is about user management, not resource analysis.", "Answer 4 is correct as Access Analyzer can work in conjunction with AWS Organizations for cross-account visibility."]
answers = ["AWS Organizations"]
alternative_answers = ["AWS Organizations", "AWS CloudFormation"]
claude_answers = ["AWS CloudFormation"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "177f6cfa-f7bc-45e0-9dda-5dea3e1887f2"
question = "What is a common use case for IAM Access Analyzer?"
good_bad_why = "Answers: [1,2]\n"
options = ["Detecting unauthorized access to resources", "Enforcing password policies for users", "Analyzing cost usage across services", "Creating IAM roles for applications", "This is a bad question and does not have an objective answer."]
explanation = ["Answer 1 is correct as it can help in detecting potential unauthorized access through policies.", "Answer 2 is incorrect as IAM does that through different features, not Access Analyzer.", "Answer 3 is wrong because cost analysis is not within its capabilities.", "Answer 4 is incorrect since creating IAM roles is not the primary function of Access Analyzer."]
answers = ["Detecting unauthorized access to resources"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "094e13da-4da5-4fec-9c54-be2fc2d55ea2"
question = "After resolving an access issue identified by IAM Access Analyzer, what should a user do?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Re-run the analyzer to confirm the issue is fixed", "Leave it as is since the analyzer automatically updates", "Wait for the next scheduled evaluation", "Manually revoke all access permissions", "This is a bad question and does not have an objective answer."]
explanation = ["Answer 1 is correct; it's a good practice to re-run the analyzer after making changes.", "Answer 2 is incorrect as the analyzer does not automatically confirm fixes.", "Answer 3 is wrong because the user should not wait; running it immediately is more efficient.", "Answer 4 is incorrect; the user should only revoke permissions that need to be removed."]
answers = ["Re-run the analyzer to confirm the issue is fixed"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "a89600b9-c031-49a4-8336-d29913ee9816"
question = "Which of the following are benefits of using Amazon Inspector? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Automated Security Assessments", "Manual Vulnerability Scanning", "Integration with CI/CD pipelines", "Supports only EC2 instances", "This is a bad question and does not have an objective answer."]
explanation = ["Automated Security Assessments is correct because Amazon Inspector automates the assessment of applications deployed on AWS.", "Manual Vulnerability Scanning is wrong because Amazon Inspector is primarily automated.", "Integration with CI/CD pipelines is correct since Amazon Inspector can integrate into CI/CD workflows to enhance security.", "Supports only EC2 instances is wrong because Amazon Inspector supports a range of workloads beyond just EC2 instances."]
answers = ["Automated Security Assessments", "Integration with CI/CD pipelines"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1945456f-f328-4c7b-b8c7-61224f5d05c7"
question = "What types of assessments can you conduct using Amazon Inspector?"
good_bad_why = "Answers: [1,2]\n"
options = ["Network reachability assessments", "Web application assessments", "Host assessments", "Database performance assessments", "This is a bad question and does not have an objective answer."]
explanation = ["Network reachability assessments is correct as Amazon Inspector provides insights into network communication paths.", "Web application assessments is correct because Amazon Inspector can assess web applications for vulnerabilities.", "Host assessments is correct as it is a core function of Amazon Inspector to analyze the security of hosts.", "Database performance assessments is wrong because Amazon Inspector does not specifically analyze database performance."]
answers = ["Network reachability assessments", "Web application assessments", "Host assessments"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "883a83fe-1418-4634-a22a-15e810ee6aa4"
question = "Which AWS service does Amazon Inspector rely on for accessing the metadata of EC2 instances?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["AWS Systems Manager", "AWS CloudTrail", "AWS IAM", "Amazon CloudWatch", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Systems Manager is correct because it provides Amazon Inspector access to EC2 instance metadata through the SSM agent.", "AWS CloudTrail is wrong as it focuses on tracking API calls, not instance metadata.", "AWS IAM is wrong because it handles permissions but does not provide instance metadata.", "Amazon CloudWatch is wrong as it is mainly for monitoring and does not directly relate to instance metadata."]
answers = ["AWS Systems Manager"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "375bad96-1820-4241-83f0-a1bfd591300f"
question = "What is the primary purpose of Amazon Inspector assessments?"
good_bad_why = "Answers: [1,2]\n"
options = ["To optimize AWS resource pricing", "To identify potential security vulnerabilities", "To configure network settings", "To manage IAM roles", "This is a bad question and does not have an objective answer."]
explanation = ["To identify potential security vulnerabilities is correct as that is the main aim of Amazon Inspector.", "To optimize AWS resource pricing is wrong since that is not a function of Amazon Inspector.", "To configure network settings is incorrect as Amazon Inspector does not deal with network configuration.", "To manage IAM roles is wrong because IAM role management is outside the scope of Amazon Inspector."]
answers = ["To identify potential security vulnerabilities"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "60ef83ca-44a5-4e53-8c7d-f4aaf01954cc"
question = "How can you trigger an Amazon Inspector assessment run?"
good_bad_why = "Answers: [1,2]\n"
options = ["By using the AWS Management Console", "By creating a CloudFormation stack", "By scheduling Lambda functions", "By configuring CloudTrail logging", "This is a bad question and does not have an objective answer."]
explanation = ["By using the AWS Management Console is correct; users can initiate assessments through the console.", "By creating a CloudFormation stack is wrong as it is not a direct way to trigger assessments.", "By scheduling Lambda functions is incorrect as Lambda is not directly used for triggering assessments.", "By configuring CloudTrail logging is wrong since CloudTrail monitors API calls, not assessment triggers."]
answers = ["By using the AWS Management Console"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "852d5ceb-2048-4c7f-b73b-6d2214be33e2"
question = "What does Amazon Inspector primarily use to evaluate the security of an application?"
good_bad_why = "Answers: [1,2]\n"
options = ["Common vulnerabilities and exposures (CVE) databases", "AWS service limits", "Network ACL configurations", "CloudFormation scripts", "This is a bad question and does not have an objective answer."]
explanation = ["Common vulnerabilities and exposures (CVE) databases is correct because it assesses against known vulnerabilities listed in CVE.", "AWS service limits is incorrect as that pertains to service usage, not security assessments.", "Network ACL configurations is wrong because Amazon Inspector assesses application vulnerabilities, not just network settings.", "CloudFormation scripts is incorrect as it does not assess based on scripts but on vulnerabilities and exposures."]
answers = ["Common vulnerabilities and exposures (CVE) databases"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3882683c-4706-4b86-95a8-0d046d6b47a3"
question = "Which of the following Assessment targets can Amazon Inspector work with?"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon EC2 instances", "RDS databases", "Lambda functions", "S3 buckets", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon EC2 instances is correct; Amazon Inspector is designed to assess security on these instances.", "RDS databases is wrong; Amazon Inspector does not assess RDS databases directly.", "Lambda functions is incorrect as Amazon Inspector does not apply to serverless architectures at this level.", "S3 buckets is incorrect because Amazon Inspector is primarily focused on EC2 instances."]
answers = ["Amazon EC2 instances"]
alternative_answers = ["Amazon EC2 instances", "Lambda functions"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "331087ec-5a9f-4bf7-8431-c9ce386e9539"
question = "What information does the Amazon Inspector report provide after an assessment?"
good_bad_why = "Answers: [1,2]\n"
options = ["Cost analysis of resources", "Summary of vulnerabilities and recommended fixes", "User access policies", "Performance metrics for applications", "This is a bad question and does not have an objective answer."]
explanation = ["Summary of vulnerabilities and recommended fixes is correct; it summarizes the vulnerabilities found and provides guidance on remediation.", "Cost analysis of resources is incorrect as this is not a focus of the inspector assessments.", "User access policies is wrong as it does not pertain to the findings of an assessment.", "Performance metrics for applications is incorrect as it is focused on security vulnerabilities, not performance evaluation."]
answers = ["Summary of vulnerabilities and recommended fixes"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ab0d6163-4c82-4253-aa05-c4772838ff21"
question = "Amazon Inspector integrates with which of the following AWS services for deeper security insights?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["AWS Config", "Amazon GuardDuty", "AWS Certificate Manager", "Amazon RDS", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Config is wrong; it monitors configurations, not security assessments directly.", "Amazon GuardDuty is correct as it provides threat detection enhancing the security insights of Inspector.", "AWS Certificate Manager is incorrect as it pertains to managing SSL/TLS certificates, not assessments.", "Amazon RDS is wrong because while it is a database service, it is not integrated for deeper insights with Inspector."]
answers = ["Amazon GuardDuty"]
alternative_answers = ["AWS Config", "Amazon GuardDuty"]
claude_answers = ["AWS Config", "Amazon GuardDuty"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "b2ceebf5-04de-4776-9d7e-8c10899ee40a"
question = "Which best describes the role of Amazon Inspector in the DevOps process?"
good_bad_why = "Answers: [1,2]\n"
options = ["Integrates security assessments in the CI/CD process", "Replaces the need for manual code reviews", "Ensures data encryption at rest", "Is used exclusively for production environments", "This is a bad question and does not have an objective answer."]
explanation = ["Integrates security assessments in the CI/CD process is correct as integrating security in the pipeline is a major benefit.", "Replaces the need for manual code reviews is incorrect since Inspector complements, not replaces, manual reviews.", "Ensures data encryption at rest is wrong; it does not provide encryption features but assesses vulnerabilities.", "Is used exclusively for production environments is incorrect; it can also be used in staging or development environments."]
answers = ["Integrates security assessments in the CI/CD process"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d3631f67-740e-4a8c-b9b3-fc36171c5ffc"
question = "Which statements correctly describe AWS Key Management Service (AWS KMS)? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS KMS can create and manage cryptographic keys.", "AWS KMS supports symmetric and asymmetric key encryption.", "AWS KMS only allows for customer-managed keys.", "AWS KMS does not support integration with AWS CloudTrail.", "This is a bad question and does not have an objective answer."]
explanation = ["AWS KMS can create and manage cryptographic keys is correct because it is a core function of the service.", "AWS KMS supports symmetric and asymmetric key encryption is correct because it provides both types of encryption methods.", "AWS KMS only allows for customer-managed keys is wrong because it also supports AWS-managed keys.", "AWS KMS does not support integration with AWS CloudTrail is wrong because it fully supports monitoring with CloudTrail."]
answers = ["AWS KMS can create and manage cryptographic keys.", "AWS KMS supports symmetric and asymmetric key encryption."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "79412219-a66a-4128-b06c-6c0af27c45e5"
question = "What does AWS KMS use to provide auditing capabilities? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Config", "AWS CloudTrail", "AWS CloudWatch", "Amazon S3", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Config is used for resource compliance, not KMS auditing.", "AWS CloudTrail is correct because it records API calls for AWS KMS and tracks who used which keys.", "AWS CloudWatch is used for monitoring metrics, not specific KMS auditing.", "Amazon S3 is a storage service and not used for auditing KMS."]
answers = ["AWS CloudTrail"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "af8261d6-dfae-4fa7-8616-10e172d1b2b1"
question = "Which KMS key types allow you to control your own keys and their lifecycle? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS-managed keys", "Customer-managed keys", "Customer-provided keys", "Import keys", "This is a bad question and does not have an objective answer."]
explanation = ["AWS-managed keys are managed by AWS and do not give you control over the lifecycle.", "Customer-managed keys are correct as they allow full control of the keys and their lifecycle.", "Customer-provided keys are not applicable to KMS management.", "Import keys are used for bringing your keys into KMS but not managing their lifecycle."]
answers = ["Customer-managed keys"]
alternative_answers = ["Customer-managed keys", "Customer-provided keys"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "288bfdbe-d081-41c6-852c-3b59d71b9c02"
question = "What is the primary purpose of a data key generated by AWS KMS? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To encrypt data directly in KMS", "To encrypt data in your applications", "To manage key policies", "To create audit logs", "This is a bad question and does not have an objective answer."]
explanation = ["To encrypt data directly in KMS is misrepresentative; data keys are not used to encrypt directly in KMS.", "To encrypt data in your applications is correct because data keys can be used to encrypt data before storing it.", "To manage key policies is incorrect; this is handled separately through KMS configuration.", "To create audit logs is not the purpose of data keys; audit logs are created by AWS CloudTrail."]
answers = ["To encrypt data in your applications"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ca7b4c61-fbe9-4a3f-8cb4-5382371a75a4"
question = "Which of the following statements about key policies in AWS KMS is true? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Key policies can only be managed by the root user.", "Key policies are used to grant permissions on KMS keys.", "Key policies cannot be changed after creation.", "Key policies do not support IAM roles.", "This is a bad question and does not have an objective answer."]
explanation = ["Key policies can only be managed by the root user is incorrect; they can be managed by those with sufficient IAM permissions.", "Key policies are used to grant permissions on KMS keys is correct as they define access for users and roles.", "Key policies cannot be changed after creation is wrong; they can be updated at any time.", "Key policies do not support IAM roles is incorrect; they can collaborate with IAM roles for permission management."]
answers = ["Key policies are used to grant permissions on KMS keys."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "f49e6738-c81e-4952-8531-8e811a1096ea"
question = "What actions are required to use a KMS key for encrypting data at rest in Amazon S3? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Specify the KMS key ARN in the S3 bucket policy.", "Enable the S3 instance to use the KMS key.", "Set the S3 bucket to use server-side encryption with the KMS key.", "Create an IAM role for S3 to access the KMS key.", "This is a bad question and does not have an objective answer."]
explanation = ["Specify the KMS key ARN in the S3 bucket policy is incorrect; you do not specify the ARN in the bucket policy solely for this purpose.", "Enable the S3 instance to use the KMS key is incorrect; S3 does not have an instance concept like EC2.", "Set the S3 bucket to use server-side encryption with the KMS key is correct because S3 can utilize KMS for encryption.", "Create an IAM role for S3 to access the KMS key is correct as you may need roles with permissions to handle KMS keys."]
answers = ["Set the S3 bucket to use server-side encryption with the KMS key.", "Create an IAM role for S3 to access the KMS key."]
claude_answers = ["Specify the KMS key ARN in the S3 bucket policy.", "Set the S3 bucket to use server-side encryption with the KMS key."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "67c92b80-8b48-4c96-8871-ff55af097122"
question = "What happens if a KMS key is deleted in AWS KMS? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["The data encrypted with the key becomes permanently unreadable.", "All access to the key is revoked immediately.", "The key can be restored from backups.", "The key move to a suspended state for 30 days.", "This is a bad question and does not have an objective answer."]
explanation = ["The data encrypted with the key becomes permanently unreadable is correct; if a key is deleted, any data encrypted with it is unrecoverable.", "All access to the key is revoked immediately is misleading; keys are soft deleted before permanent deletion.", "The key can be restored from backups is incorrect; AWS KMS does not support key recovery from backups.", "The key moves to a suspended state for 30 days is incorrect; there is a pending deletion period but not a suspended state."]
answers = ["The data encrypted with the key becomes permanently unreadable."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "88f8f7a6-d8ef-4b29-b589-c06e1ff53e95"
question = "What is the maximum key size for a symmetric encryption key in AWS KMS? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["128 bits", "256 bits", "512 bits", "2048 bits", "This is a bad question and does not have an objective answer."]
explanation = ["128 bits is incorrect; AWS KMS supports larger key sizes.", "256 bits is correct as the maximum key size for symmetric keys in AWS KMS.", "512 bits is incorrect; this exceeds the supported maximum size.", "2048 bits is wrong; that size is applicable to asymmetric keys, not symmetric."]
answers = ["256 bits"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1ddbbd43-4ad7-4689-84b4-1e4028d3922b"
question = "Which service integrates with AWS KMS to allow you to encrypt data before it is sent to the key management service? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Amazon EBS", "Amazon RDS", "Amazon S3", "Amazon SES", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon EBS can use KMS for encryption, but integration focuses on data at rest.", "Amazon RDS can be integrated, but it does encryption via KMS, not pre-encryption.", "Amazon S3 is correct; S3 can encrypt data before sending for key management via KMS.", "Amazon SES is incorrect; there are no direct encryption integrations with SES."]
answers = ["Amazon S3"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "83c40aac-0b34-42b6-a3cd-cc2c45ee14ff"
question = "Which of the following best describes the process of key rotation in AWS KMS? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Keys are rotated every 12 months by default.", "Automatic key rotation is mandatory for all keys.", "Key rotation can be automated through KMS settings.", "Key rotation is only applicable to customer-managed keys.", "This is a bad question and does not have an objective answer."]
explanation = ["Keys are rotated every 12 months by default is correct because this is standard for KMS managed keys.", "Automatic key rotation is mandatory for all keys is incorrect; it's optional for customer-managed keys.", "Key rotation can be automated through KMS settings is correct as KMS provides this automation option.", "Key rotation is only applicable to customer-managed keys is wrong; AWS-managed keys also rotate but automatically."]
answers = ["Keys are rotated every 12 months by default."]
alternative_answers = ["Key rotation can be automated through KMS settings."]
claude_answers = ["Key rotation can be automated through KMS settings."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5a60f59b-a5b9-4ae1-8b81-c7f0664d5870"
question = "Which of the following are valid use cases for AWS Secrets Manager? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Storing code for applications", "Managing API keys", "Rotating database credentials", "Hosting application configuration files", "This is a bad question and does not have an objective answer."]
explanation = ["Storing code for applications is wrong because AWS Secrets Manager is not designed for storing application source code directly.", "Managing API keys is correct because AWS Secrets Manager can securely store and manage API keys for various services.", "Rotating database credentials is correct because AWS Secrets Manager provides automatic rotation of database credentials.", "Hosting application configuration files is wrong because AWS Secrets Manager is not meant for general file storage."]
answers = ["Managing API keys", "Rotating database credentials"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f1bc56b0-c92b-498e-b3b0-301ed2f1b924"
question = "What feature does AWS Secrets Manager offer to manage the lifecycle of secrets?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Automated backup", "Version control", "Secret rotation", "Data encryption at rest", "This is a bad question and does not have an objective answer."]
explanation = ["Automated backup is wrong because while AWS provides backup options, it's not specific to Secrets Manager features.", "Version control is wrong because AWS Secrets Manager does not have built-in version control for secrets.", "Secret rotation is correct because AWS Secrets Manager allows automatic rotation of secrets based on a defined schedule.", "Data encryption at rest is correct because Secrets Manager encrypts secrets automatically using AWS KMS."]
answers = ["Secret rotation", "Data encryption at rest"]
alternative_answers = ["Version control", "Secret rotation"]
claude_answers = ["Secret rotation", "Version control"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "56ced800-c1f6-4d66-a99c-a50927ea242d"
question = "Which of the following statements about AWS Secrets Manager are true? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Secrets Manager charges based on storage size", "Secrets Manager can encrypt secrets using KMS", "Secrets Manager can only manage database passwords", "Secrets Manager supports cross-region replication", "This is a bad question and does not have an objective answer."]
explanation = ["Secrets Manager charges based on storage size is wrong because AWS Secrets Manager charges are based on the number of secrets and API calls made, not just storage.", "Secrets Manager can encrypt secrets using KMS is correct because it uses AWS KMS for encryption of secrets.", "Secrets Manager can only manage database passwords is wrong because it can manage various types of secrets including API keys and OAuth tokens.", "Secrets Manager supports cross-region replication is wrong; while secrets are stored globally, Secrets Manager does not support automatic cross-region replication."]
answers = ["Secrets Manager can encrypt secrets using KMS", "Secrets Manager supports cross-region replication"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a64531ec-e38c-40ca-8a2e-6943c01c854b"
question = "How can a developer obtain the secret value stored in AWS Secrets Manager in a secure manner?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Directly access the S3 bucket where secrets are stored", "Use the AWS SDK or CLI to retrieve the secret", "Access it through the AWS Management Console only", "Use EC2 metadata to retrieve the secret", "This is a bad question and does not have an objective answer."]
explanation = ["Directly access the S3 bucket where secrets are stored is wrong because secrets are not stored in S3, but within Secrets Manager.", "Use the AWS SDK or CLI to retrieve the secret is correct as it allows secure and programmatic access to secrets.", "Access it through the AWS Management Console only is wrong, as it does not provide programmatic access for applications needing the secrets.", "Use EC2 metadata to retrieve the secret is wrong because EC2 metadata cannot directly access secrets stored in Secrets Manager."]
answers = ["Use the AWS SDK or CLI to retrieve the secret"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "a234a196-9262-4b4b-a2e5-fa08330e4f02"
question = "Which of the following permissions are needed to manage secrets in AWS Secrets Manager? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["s3:GetObject", "secretsmanager:PutSecretValue", "iam:PassRole", "lambda:InvokeFunction", "This is a bad question and does not have an objective answer."]
explanation = ["s3:GetObject is wrong because S3 permissions are unrelated to Secrets Manager.", "secretsmanager:PutSecretValue is correct because this permission allows the user to create or update secret values.", "iam:PassRole is wrong as it pertains to IAM roles and is not directly related to Secrets Manager.", "lambda:InvokeFunction is wrong because this permission is related to Lambda functions and does not manage Secrets Manager secrets."]
answers = ["secretsmanager:PutSecretValue"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "70d9fe0e-13d8-49af-9d09-f153e9b03c54"
question = "What is the default behavior of AWS Secrets Manager regarding versioning of secrets?"
good_bad_why = "Answers: [1,2]\n"
options = ["Only the latest version is kept", "All versions are retained indefinitely", "A maximum of 10 versions are retained", "Versioning is not supported", "This is a bad question and does not have an objective answer."]
explanation = ["Only the latest version is kept is wrong because AWS Secrets Manager retains multiple versions of a secret during its lifecycle.", "All versions are retained indefinitely is correct as AWS Secrets Manager retains all versions until the secret is deleted.", "A maximum of 10 versions are retained is wrong because this is not a limitation of Secrets Manager.", "Versioning is not supported is incorrect since Secrets Manager does support versioning of secrets."]
answers = ["All versions are retained indefinitely"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "4166704b-70cb-40e2-a636-15849fe8e42e"
question = "Which protocol is generally used for communication with AWS Secrets Manager?"
good_bad_why = "Answers: [1,2]\n"
options = ["UDP", "HTTP/HTTPS", "FTP", "MQTT", "This is a bad question and does not have an objective answer."]
explanation = ["UDP is wrong because Secrets Manager does not use UDP for communication.", "HTTP/HTTPS is correct since APIs for Secrets Manager are accessed over HTTPS.", "FTP is wrong because it is not used for accessing Secrets Manager secrets.", "MQTT is wrong since MQTT is a messaging protocol not related to Secrets Manager."]
answers = ["HTTP/HTTPS"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9c1e24a6-7644-4723-83da-10d5d742f8b6"
question = "How does AWS Secrets Manager help in meeting security compliance requirements? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["By providing a static API key for access to all secrets", "By enabling encryption with customer-managed keys", "By storing secrets in plaintext for easy access", "By only allowing access through IAM roles", "This is a bad question and does not have an objective answer."]
explanation = ["By providing a static API key for access to all secrets is incorrect as this could pose a security risk.", "By enabling encryption with customer-managed keys is correct because it allows organizations to maintain control over their encryption keys.", "By storing secrets in plaintext for easy access is wrong as plaintext storage is insecure and not a feature of Secrets Manager.", "By only allowing access through IAM roles is wrong because Secrets Manager can also allow actions via IAM user policies."]
answers = ["By enabling encryption with customer-managed keys"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "163a50e4-35d1-40c7-9fcb-34314cdc3d44"
question = "What happens to a secret in AWS Secrets Manager when it is deleted?"
good_bad_why = "Answers: [1,2]\n"
options = ["It is permanently deleted immediately", "It enters a recovery mode for 30 days", "It is archived indefinitely", "It triggers a Lambda function", "This is a bad question and does not have an objective answer."]
explanation = ["It is permanently deleted immediately is wrong because deleted secrets enter a recovery option.", "It enters a recovery mode for 30 days is correct as you can restore the secret within this period.", "It is archived indefinitely is wrong as there is no such archiving process in Secrets Manager.", "It triggers a Lambda function is wrong since deletion of a secret does not automatically invoke a Lambda function."]
answers = ["It enters a recovery mode for 30 days"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "8d6c1029-27b6-4461-a564-ed9ed16c5ab7"
question = "When configuring automatic secret rotation in AWS Secrets Manager, what is an essential component?"
good_bad_why = "Answers: [1,2]\n"
options = ["Use a Lambda function", "Specify a custom encryption algorithm", "Choose a specific S3 bucket for storage", "Set a minimum version number", "This is a bad question and does not have an objective answer."]
explanation = ["Use a Lambda function is correct because automatic rotation requires a Lambda function to handle the actual rotation process.", "Specify a custom encryption algorithm is wrong because Secrets Manager uses KMS for encryption without requiring a custom algorithm.", "Choose a specific S3 bucket for storage is wrong as secrets are not stored in S3.", "Set a minimum version number is wrong; versioning is handled automatically by Secrets Manager."]
answers = ["Use a Lambda function"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a3860d9c-4c20-4709-923b-d659fbd0d38b"
question = "What are the primary benefits of using AWS Security Hub in your AWS environment? (Select 2)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Centralized security visibility", "Increased storage capacity", "Automated compliance checks", "Enhanced computing performance", "This is a bad question and does not have an objective answer."]
explanation = ["Increased storage capacity is wrong because AWS Security Hub does not manage data storage directly.", "Enhanced computing performance is wrong because AWS Security Hub focuses on security features rather than compute optimizations."]
answers = ["Centralized security visibility", "Automated compliance checks"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "a7aa526d-6499-4059-9a90-b7c54569d163"
question = "Which AWS services can send security findings to AWS Security Hub? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon GuardDuty", "Amazon S3", "AWS Config", "AWS Lambda", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon S3 is wrong because it is a storage service and does not generate security findings.", "AWS Lambda is wrong because it is a compute service that doesn't send findings directly to Security Hub."]
answers = ["Amazon GuardDuty", "AWS Config"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7a8b407d-d4d7-424b-9f0d-47121255d1f7"
question = "How does AWS Security Hub help organizations comply with industry standards? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["It automatically applies patches to all resources.", "It provides a summary of security alerts and compliance status.", "It encrypts all data at rest.", "It monitors network traffic in real-time.", "This is a bad question and does not have an objective answer."]
explanation = ["It encrypts all data at rest is wrong because Security Hub does not directly manage data encryption.", "It monitors network traffic in real-time is wrong as Security Hub aggregates findings from other services but does not monitor traffic itself."]
answers = ["It provides a summary of security alerts and compliance status."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "493593aa-a5d7-4f10-a295-e6dced0c49ef"
question = "Which of the following features does AWS Security Hub offer to help improve security posture? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Integration with third-party security tools", "Automated backup of security data", "Automatic resizing of instances", "Building custom security measures", "This is a bad question and does not have an objective answer."]
explanation = ["Automated backup of security data is wrong because AWS Security Hub is not designed for backup services.", "Automatic resizing of instances is not a feature provided by AWS Security Hub."]
answers = ["Integration with third-party security tools"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "c692483f-1cef-4881-bf0f-8d44107bb425"
question = "When configuring AWS Security Hub, what is a necessary step to aggregate findings from multiple accounts? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Enable AWS Organizations integration", "Attach IAM policies to Security Hub", "Set up multi-account management", "Activate Amazon CloudWatch Events", "This is a bad question and does not have an objective answer."]
explanation = ["Attach IAM policies to Security Hub is wrong because IAM policies apply to access management, not finding aggregation.", "Activate Amazon CloudWatch Events is wrong; while CloudWatch may integrate, it's not a required step for aggregation."]
answers = ["Enable AWS Organizations integration", "Set up multi-account management"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "43934b1a-8bcd-4e9c-82c0-44261f691402"
question = "Which of the following is a prerequisite for enabling AWS Security Hub? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Enable AWS Config", "Have an IAM role with sufficient permissions", "Deploy Amazon GuardDuty", "Use AWS CloudTrail logging", "This is a bad question and does not have an objective answer."]
explanation = ["Enable AWS Config is wrong because although it's beneficial, it's not a strict prerequisite for Security Hub.", "Deploy Amazon GuardDuty is not required, as Security Hub can aggregate findings from various sources."]
answers = ["Have an IAM role with sufficient permissions"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1d43a9e8-02cc-4892-8689-14e8a254d451"
question = "What is a primary function of the AWS Security Hub's Insights feature? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["To automatically remediate security issues", "To summarize security trends and findings over time", "To increase instance performance", "To improve network traffic flow", "This is a bad question and does not have an objective answer."]
explanation = ["To automatically remediate security issues is incorrect because the Insights feature focuses on reporting, not remediation.", "To improve network traffic flow is irrelevant as Security Hub does not manage networking directly."]
answers = ["To summarize security trends and findings over time"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "dc458154-5aca-4485-92d8-149c2ea3be61"
question = "Which compliance frameworks does AWS Security Hub support out of the box? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["HIPAA", "ISO 9001", "CIS AWS Foundations Benchmark", "GDPR", "This is a bad question and does not have an objective answer."]
explanation = ["ISO 9001 is wrong because it is a quality management standard, not directly related to security.", "GDPR is relevant, but Security Hub provides specific support for security benchmarks."]
answers = ["CIS AWS Foundations Benchmark"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1e65259c-7dd9-4f05-8064-2a8c2fac62e6"
question = "What is the purpose of AWS Security Hub's auto-remediation feature? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To detect anomalies in data patterns", "To automatically apply fixes to security findings", "To back up security findings", "To analyze user permissions", "This is a bad question and does not have an objective answer."]
explanation = ["To detect anomalies in data patterns is incorrect, as Security Hub does not analyze data patterns directly.", "To back up security findings is not a function of Security Hub, it focuses on aggregation and visibility."]
answers = ["To automatically apply fixes to security findings"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0935edb9-0149-4c8c-83de-fcdb6320fd4e"
question = "What are the two main tiers of AWS Shield services? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Shield Standard", "AWS Shield Advanced", "AWS Shield Pro", "AWS Shield Enterprise", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Shield Pro is incorrect because it does not exist as a tier.", "AWS Shield Enterprise is incorrect because the correct naming convention is Shield Advanced."]
answers = ["AWS Shield Standard", "AWS Shield Advanced"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "0368a001-210d-4429-9c4a-78b77dadbefb"
question = "What is the primary function of AWS Shield?"
good_bad_why = "Answers: [1,2]\n"
options = ["To optimize cloud resource costs", "To protect against Distributed Denial of Service (DDoS) attacks", "To manage deployment automation", "To monitor instance health", "This is a bad question and does not have an objective answer."]
explanation = ["Optimizing cloud resource costs is not a function of AWS Shield.", "Managing deployment automation is the role of AWS CloudFormation, not Shield."]
answers = ["To protect against Distributed Denial of Service (DDoS) attacks"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "09bd717e-6409-42de-b0b4-ce664c3c83e3"
question = "AWS Shield automatically integrates with which of the following AWS services? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon CloudFront", "AWS Lambda", "Amazon S3", "Amazon Route 53", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Lambda does not directly integrate with AWS Shield as it is not a networking service.", "Amazon S3 does not directly integrate with AWS Shield; it is a storage service."]
answers = ["Amazon CloudFront", "Amazon Route 53"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "84ca964a-7b07-4bab-966e-eaad676a975d"
question = "Which of the following AWS Shield features can help you understand ongoing attacks?"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon CloudWatch integration", "AWS WAF rules", "Attack diagnostics", "CloudTrail logging", "This is a bad question and does not have an objective answer."]
explanation = ["AWS WAF rules do not provide attack diagnostics; they help to filter traffic before it reaches your services.", "CloudTrail logging tracks account activity rather than ongoing attacks."]
answers = ["Amazon CloudWatch integration", "Attack diagnostics"]
alternative_answers = ["Amazon CloudWatch integration", "Attack diagnostics", "CloudTrail logging"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "cf0f5321-bc9c-4993-bb14-10bba5364c6f"
question = "What type of traffic is AWS Shield designed to protect against?"
good_bad_why = "Answers: [1,2]\n"
options = ["Malicious web traffic", "Data exfiltration", "Man-in-the-middle attacks", "Distributed Denial of Service (DDoS) attacks", "This is a bad question and does not have an objective answer."]
explanation = ["Malicious web traffic can refer to a variety of issues, not all of which are related to DDoS.", "Data exfiltration is not specifically a DDoS attack."]
answers = ["Distributed Denial of Service (DDoS) attacks"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "994ebedc-5428-4bdb-9b11-13b18da84714"
question = "Which AWS service can be used in conjunction with AWS Shield to provide additional security measures?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS IAM", "AWS Config", "AWS WAF", "Amazon EC2", "This is a bad question and does not have an objective answer."]
explanation = ["AWS IAM is for identity and access management but does not add DDoS protection.", "AWS Config deals with compliance and doesn't specifically enhance DDoS protection."]
answers = ["AWS WAF"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3432bc4b-a665-4607-8fcb-897a0ffb6300"
question = "Which benefit is specifically associated with AWS Shield Advanced?"
good_bad_why = "Answers: [1,2]\n"
options = ["Enhanced global coverage", "Improved traffic encryption", "24/7 access to DDoS experts", "Reduced latency in data transfers", "This is a bad question and does not have an objective answer."]
explanation = ["Enhanced global coverage is not unique to Shield Advanced; it applies to AWS services as a whole.", "Improved traffic encryption is not a feature of AWS Shield."]
answers = ["24/7 access to DDoS experts"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "667c31e3-0199-42f6-84f2-0ce2472aa911"
question = "When using AWS Shield, what is the role of AWS CloudFront in DDoS protection?"
good_bad_why = "Answers: [1,2]\n"
options = ["It provides geo-blocking functionality", "It performs user authentication", "It serves as the first line of defense against DDoS attacks", "It manages encryption keys", "This is a bad question and does not have an objective answer."]
explanation = ["User authentication is managed by AWS IAM, not CloudFront.", "Geo-blocking is a feature of AWS WAF and not directly related to CloudFront's role."]
answers = ["It serves as the first line of defense against DDoS attacks"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ebb60c60-13ef-40e8-9813-c1d21789742e"
question = "What is the function of the DDoS Response Team (DRT) in AWS Shield Advanced?"
good_bad_why = "Answers: [1,2]\n"
options = ["To provide disaster recovery solutions", "To assist in customizing your security posture", "To offer 24/7 incident response support", "To manage cost allocation for Shield services", "This is a bad question and does not have an objective answer."]
explanation = ["Providing disaster recovery solutions is not a function of the DRT.", "Cost allocation management is not within the purview of the DRT."]
answers = ["To offer 24/7 incident response support"]
alternative_answers = ["To assist in customizing your security posture", "To offer 24/7 incident response support"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "3aa086a8-35cf-4f8f-a122-e74b6692b6a2"
question = "Which two features of AWS WAF can help protect your web application from SQL injection attacks? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Web ACLs", "Managed rule groups", "CloudFront distributions", "IP sets", "This is a bad question and does not have an objective answer."]
explanation = ["Web ACLs do not specifically protect against SQL injection attacks.", "Managed rule groups are pre-configured sets of rules that can help block SQL injection attacks.", "CloudFront distributions are not a feature of AWS WAF but can use WAF in conjunction.", "IP sets are used for specifying a list of IP addresses but do not directly protect against SQL injection attacks."]
answers = ["Managed rule groups", "Web ACLs"]
claude_answers = ["Managed rule groups", "IP sets"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "635744ea-cd81-4e38-b3ac-6859d74fede7"
question = "What is the primary role of AWS WAF? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To manage DNS routing for web applications", "To protect applications from web exploits", "To ensure high availability of web applications", "To secure data at rest", "This is a bad question and does not have an objective answer."]
explanation = ["Managing DNS routing is done by services like Route 53.", "AWS WAF's primary role is to protect applications from web exploits.", "High availability is ensured by services like Elastic Load Balancing.", "Securing data at rest is a different concern addressed by services like AWS KMS."]
answers = ["To protect applications from web exploits"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "68430050-07dd-43fb-8cb1-b97c3eb781c5"
question = "Which AWS service can you use to visualize and monitor AWS WAF metrics? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudTrail", "AWS CloudWatch", "AWS Inspector", "AWS Config", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail is used for tracking API calls.", "AWS CloudWatch is the correct choice as it can visualize and monitor metrics from AWS WAF.", "AWS Inspector is for security assessments.", "AWS Config is for resource configuration monitoring."]
answers = ["AWS CloudWatch"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e55f96e6-1c08-4c24-8cd7-eb8fcf2aa370"
question = "When creating a web ACL in AWS WAF, what is the first step you must perform? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Add rules to the web ACL", "Choose the AWS resource to associate with the web ACL", "Define the default action for the web ACL", "Specify IP sets", "This is a bad question and does not have an objective answer."]
explanation = ["Adding rules can be done after the web ACL is created.", "Choosing the resource is typically done right after creating the web ACL.", "Defining the default action is important but should occur after choosing the resource.", "Specifying IP sets is part of rule creation specifics."]
answers = ["Choose the AWS resource to associate with the web ACL"]
claude_answers = ["Define the default action for the web ACL"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a7456d52-d355-4ea2-a43e-3b198dd01819"
question = "Which of the following can AWS WAF directly block? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Malicious SSL certificates", "HTTP requests based on rules", "User-agent strings", "All types of web traffic", "This is a bad question and does not have an objective answer."]
explanation = ["AWS WAF does not directly block SSL certificates.", "HTTP requests can be blocked based on defined rules, making this the correct choice.", "User-agent strings can be part of a rule but are not directly blocked themselves.", "AWS WAF does not block all web traffic but only the traffic that matches its rules."]
answers = ["HTTP requests based on rules"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "f2d37462-653b-4e9f-a67a-132ab55c24ec"
question = "Which AWS WAF feature allows you to manage rules and conditions dynamically from the application? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["IP set", "Web ACL", "Rate-based rule", "Rule group", "This is a bad question and does not have an objective answer."]
explanation = ["IP sets are static in terms of lists of IPs.", "Web ACLs define overall access rules but are not dynamic on their own.", "Rate-based rules are more specific for controlling request rates, not for dynamic management.", "Rule groups are collections of rules but do not allow for dynamic management directly."]
answers = ["IP set"]
claude_answers = ["Rule group"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e16ad2fe-dcaa-4df2-a966-7bde6bf87f69"
question = "How does an AWS WAF rate-based rule function? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["It blocks all traffic from a specific IP address for a set period of time", "It allows a set number of requests from an IP address in a five-minute period", "It automatically updates to include new threat vectors", "It exclusively filters out malicious payloads", "This is a bad question and does not have an objective answer."]
explanation = ["The first option refers to IP blocking, not rate limiting.", "The correct answer is that rate-based rules allow a set number of requests from an IP address in a five-minute period.", "Rate-based rules do not automatically update for new threats, that would need manual adjustment.", "Rate-based rules focus on request counts rather than payload contents."]
answers = ["It allows a set number of requests from an IP address in a five-minute period"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "fd4826c8-ce53-4f39-8ded-0d6184b41fbd"
question = "What can you use to protect against Cross-Site Scripting (XSS) attacks in AWS WAF? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Geo match conditions", "Custom request headers", "String match conditions", "IP reputation lists", "This is a bad question and does not have an objective answer."]
explanation = ["Geo match conditions do not protect against XSS but rather restrict based on location.", "Custom request headers do not inherently prevent XSS.", "String match conditions can be used to block patterns typical of XSS attacks, making this the correct answer.", "IP reputation lists are about blocking IPs, not specific attack patterns."]
answers = ["String match conditions"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "758512ba-2e6b-44f5-b3ee-17e9de196b91"
question = "Which of the following AWS services can integrate with AWS WAF to provide additional security? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon RDS", "AWS Lambda", "Amazon API Gateway", "AWS Elastic Beanstalk", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon RDS is for database services and not directly integrated.", "AWS Lambda can interact with WAF but does not directly integrate for WAF's primary functions.", "Amazon API Gateway can integrate with AWS WAF to secure APIs, making this the correct answer.", "AWS Elastic Beanstalk can use WAF for applications but isn't an integration point."]
answers = ["Amazon API Gateway"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a3dcc4ed-200c-4f45-a596-68fc700838a5"
question = "What happens if a request matches the default action in an AWS WAF web ACL? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["The request is blocked", "The request is allowed", "The request is logged", "The request is rerouted", "This is a bad question and does not have an objective answer."]
explanation = ["If the default action is set to block, then the request will be blocked, however that is not the only possibility.", "If the default action allows, then requests will be permitted through the web ACL.", "Requests are logged only if you have configured logging separately.", "Requests are not rerouted; they are either blocked or allowed."]
answers = ["The request is allowed"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "42548558-c952-495c-a9ee-0c48206053af"
question = "Which of the following AWS services can be used to automate backups of your Amazon EBS volumes? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Backup", "Amazon S3", "AWS Lambda", "Amazon RDS", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon S3 is wrong because it is primarily a storage service that does not manage backups directly.", "AWS Lambda is wrong because it is a serverless compute service that can be used to execute backup workflows but does not provide backup functionality on its own.", "Amazon RDS is wrong because it is a managed database service that allows backups but does not automate EBS volume backups."]
answers = ["AWS Backup"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "81961c4d-729e-4248-a3fb-c65e9f5b2726"
question = "What are the primary benefits of using AWS Backup? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Centralized backup management", "Immediate recovery of all backups", "Compliance with regulatory requirements", "Automatic snapshot creation every hour", "This is a bad question and does not have an objective answer."]
explanation = ["Immediate recovery of all backups is wrong because although AWS Backup provides recovery options, it may not be immediate based on the backup strategy.", "Automatic snapshot creation every hour is wrong because AWS Backup allows for scheduled backups, but it does not automate hourly snapshots by default. It can be configured but is not inherent."]
answers = ["Centralized backup management", "Compliance with regulatory requirements"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d6de2d98-71d8-47bd-b885-0f1026c3d37d"
question = "Which backup targets can AWS Backup support in addition to Amazon EBS volumes? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon DynamoDB", "Amazon CloudFront", "Amazon Redshift", "Amazon S3", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon CloudFront is wrong because it is a Content Delivery Network service and does not offer backup capabilities through AWS Backup.", "Amazon Redshift is wrong because, while it is a managed data warehouse service, it is not currently directly supported by AWS Backup for automated backups."]
answers = ["Amazon DynamoDB", "Amazon S3"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "53ca6eba-04fb-4c73-b627-b384b3d6f52d"
question = "Which feature of AWS Backup allows you to initiate backup and restore operations automatically based on predefined criteria? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Backup plans", "Backup vaults", "Resource assignments", "Lifecycle policies", "This is a bad question and does not have an objective answer."]
explanation = ["Backup vaults are wrong because they store backups but do not control the scheduling of backup and restore operations.", "Resource assignments are wrong because they associate resources with backup plans but don't control operations.", "Lifecycle policies are wrong because they control retention but do not initiate backups or restores."]
answers = ["Backup plans"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "48147318-cda6-4805-b759-c1b90a1b38d8"
question = "When using AWS Backup to recover data, which of the following statements is true? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["You can only restore the entire backup.", "Restores can be done to an existing resource only.", "You can restore data to a new resource if necessary.", "You cannot recover data from AWS Backup without the original data.", "This is a bad question and does not have an objective answer."]
explanation = ["You can only restore the entire backup is wrong because AWS Backup allows for selectivity in recovery based on the backup structure.", "Restores can be done to an existing resource only is wrong because you can restore to a new resource if you choose.", "You cannot recover data from AWS Backup without the original data is wrong because AWS Backup enables recovery from backups without needing the original data."]
answers = ["You can restore data to a new resource if necessary."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a026dd6f-2dee-4878-b416-c45a939d51c0"
question = "In AWS Backup, what is a backup vault? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["A physical location where backups are stored", "A logical container where your backups are grouped", "A network security feature to protect backups", "A service to monitor backup success rates", "This is a bad question and does not have an objective answer."]
explanation = ["A physical location where backups are stored is wrong because AWS Backup does not refer to a physical location in this context.", "A network security feature to protect backups is wrong because vaults perform logical separation, not security functions.", "A service to monitor backup success rates is wrong because monitoring is provided through other AWS services but isn't the sole function of backup vaults."]
answers = ["A logical container where your backups are grouped"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "969cbccf-1b1c-441c-817b-2105b7bb829c"
question = "Which of the following actions can be automated using AWS Backup? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Creating backups on a schedule", "Deleting backups automatically after a set period", "Restoring backups to any AWS region instantly", "Monitoring the success of backups in real time", "This is a bad question and does not have an objective answer."]
explanation = ["Restoring backups to any AWS region instantly is wrong because while REST APIs may allow regional storage, AWS Backup focuses on specific configurations.", "Monitoring the success of backups in real-time is wrong because this functionality is not a primary feature of AWS Backup but can be achieved through Amazon CloudWatch."]
answers = ["Creating backups on a schedule", "Deleting backups automatically after a set period"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ea706ac0-3ad2-4b72-a728-5c9f0ad7ab55"
question = "What is the primary purpose of lifecycle policies in AWS Backup? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["To define retention periods for backups", "To automatically initiate backups", "To specify encryption settings for backups", "To restore backups after a failure", "This is a bad question and does not have an objective answer."]
explanation = ["To automatically initiate backups is wrong because this is handled by backup plans.", "To specify encryption settings for backups is wrong because encryption is set at the resource level, not through lifecycle policies.", "To restore backups after a failure is wrong because restoration is a separate function from lifecycle policies."]
answers = ["To define retention periods for backups"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7839f8a3-55ce-4647-99fd-d5c3a5848666"
question = "What kind of resources can you assign to a backup plan in AWS Backup? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS IAM roles", "AWS resources with backup capability", "AWS Lambda functions", "Amazon EC2 instances", "This is a bad question and does not have an objective answer."]
explanation = ["AWS IAM roles are wrong because IAM roles are for permissions and not backupable resources themselves.", "AWS Lambda functions are wrong because Lambda functions do not represent backupable resources.", "Only resources that can be backed up will be included in your backup plans."]
answers = ["AWS resources with backup capability", "Amazon EC2 instances"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c1d7010d-bccc-4dc4-9009-bec576c1b6b7"
question = "If you want to ensure data compliance, what feature of AWS Backup should you consider using? (Select 1)"
good_bad_why = "Answers: [1,2]\n"
options = ["Backup vaults", "Resource permissions", "Backup plans", "Monitoring metrics", "This is a bad question and does not have an objective answer."]
explanation = ["Backup vaults are wrong because they simply store backups and do not provide compliance features.", "Resource permissions are wrong because permissions do not ensure compliance on their own.", "Monitoring metrics are wrong because they help with insight but do not directly ensure compliance."]
answers = ["Backup plans"]
alternative_answers = ["Backup vaults"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "046e40a6-4760-4a60-8a8f-8f64fc785be2"
question = "Which two factors can influence the performance of an Amazon EBS volume? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Volume type", "Instance type", "Number of EBS volumes", "Availability Zone", "This is a bad question and does not have an objective answer."]
explanation = ["Volume type is correct because different volume types (e.g., gp2, io1) offer different performance characteristics.", "Instance type is correct because certain instance types have limits on the number of EBS volumes or IOPS they can support.", "Number of EBS volumes is wrong because this does not directly influence the performance of an individual volume.", "Availability Zone is wrong because this does not inherently affect performance but rather the operational redundancy."]
answers = ["Volume type", "Instance type"]
claude_answers = ["Volume type", "Availability Zone"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "082223f9-0bf8-4ee5-8716-9cc2ca8faeeb"
question = "What is the maximum size of an individual Amazon EBS volume for gp2 and gp3 types?"
good_bad_why = "Answers: [1,2]\n"
options = ["1 TB", "16 TB", "64 TB", "32 TB", "This is a bad question and does not have an objective answer."]
explanation = ["1 TB is wrong because the maximum size for these volume types is larger.", "16 TB is wrong as it is still under the actual limit.", "64 TB is correct as it is the maximum size for gp2 and gp3 volume types.", "32 TB is wrong as it does not reflect the maximum capacity."]
answers = ["64 TB"]
claude_answers = ["16 TB", "This is a bad question and does not have an objective answer.]\n\nThe maximum size of an individual Amazon EBS volume for both the gp2 and gp3 volume types is 16 TB."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e9e03ab2-d895-456f-9d51-b2d26cb1e46e"
question = "Which Amazon EBS volume type is best suited for high-performance database workloads?"
good_bad_why = "Answers: [1,2]\n"
options = ["gp2", "io1", "st1", "sc1", "This is a bad question and does not have an objective answer."]
explanation = ["gp2 is wrong because it is a general-purpose SSD, not specifically for high performance.", "io1 is correct as this type allows for provisioned IOPS, making it ideal for database workloads.", "st1 is wrong because it is optimized for throughput, not IOPS.", "sc1 is wrong as it is a cold HDD suitable for infrequently accessed data."]
answers = ["io1"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "14c100de-7caf-47ad-9fb7-bcfdacba58fb"
question = "What feature of Amazon EBS enables you to take point-in-time snapshots of your volumes?"
good_bad_why = "Answers: [1,2]\n"
options = ["Volume cloning", "Snapshots", "Creating images", "Consistency groups", "This is a bad question and does not have an objective answer."]
explanation = ["Volume cloning is wrong because while it creates copies of volumes, it does not specifically relate to point-in-time backups.", "Snapshots is correct as they are point-in-time backups of your EBS volumes.", "Creating images is wrong as it pertains to entire instance images, not just EBS volumes.", "Consistency groups are wrong because they do not apply specifically to EBS snapshots."]
answers = ["Snapshots"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a658053a-499d-4621-98da-aebfddad1740"
question = "What is the primary benefit of using Amazon EBS snapshots?"
good_bad_why = "Answers: [1,2]\n"
options = ["Automatic backups", "Data encryption", "Cost savings", "Data redundancy", "This is a bad question and does not have an objective answer."]
explanation = ["Automatic backups is wrong because snapshots require manual initiation or scheduling.", "Data encryption is a feature but not the main benefit of snapshots.", "Cost savings is somewhat true but isn't the primary benefit.", "Data redundancy is correct because snapshots provide a way to maintain redundant copies stored in S3."]
answers = ["Data redundancy"]
alternative_answers = ["Automatic backups", "Data redundancy"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "633d0ec8-64bf-4a30-9384-d6cd31680d58"
question = "When restoring an Amazon EBS snapshot, which of the following statements is true?"
good_bad_why = "Answers: [1,2]\n"
options = ["Restoration is always instant", "You can only restore to the same Availability Zone", "You can create a volume from a snapshot in any Availability Zone", "Snapshots can only be restored to their original instance", "This is a bad question and does not have an objective answer."]
explanation = ["Restoration is always instant is wrong because some time is involved in restoring from a snapshot.", "You can only restore to the same Availability Zone is incorrect as snapshots can be restored in different zones.", "You can create a volume from a snapshot in any Availability Zone is correct as snapshots are stored in S3 and are accessible in any zone.", "Snapshots can only be restored to their original instance is wrong; you can attach restored volumes to different instances."]
answers = ["You can create a volume from a snapshot in any Availability Zone"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "63881d9f-2abe-406c-b087-e7a5c04b9c40"
question = "How can you increase the performance of a gp2 volume?"
good_bad_why = "Answers: [1,2]\n"
options = ["Change volume type to io1", "Increase the volume size", "Use a larger instance type", "Attach the volume to multiple instances", "This is a bad question and does not have an objective answer."]
explanation = ["Change volume type to io1 is a valid option but not an adjustment to gp2 specifically.", "Increase the volume size is correct; enlarging a gp2 volume increases its baseline IOPS.", "Use a larger instance type is relevant but does not directly increase the performance of the volume itself.", "Attach the volume to multiple instances is wrong and not possible as EBS volumes can only be attached to one instance at a time."]
answers = ["Increase the volume size"]
alternative_answers = ["Change volume type to io1", "Increase the volume size"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "e04030d9-52f1-414e-bed9-41dc2af41e9f"
question = "Which of the following is NOT a benefit of using Amazon EBS optimized instances?"
good_bad_why = "Answers: [1,2]\n"
options = ["Reduced latency", "Dedicated throughput", "Lower cost for storage", "Improved performance consistency", "This is a bad question and does not have an objective answer."]
explanation = ["Reduced latency is a benefit of using EBS optimized instances.", "Dedicated throughput is a benefit as it provides dedicated bandwidth to EBS.", "Lower cost for storage is wrong as EBS optimized instances do not directly lower EBS pricing.", "Improved performance consistency is also a benefit, as dedicated throughput mitigates shared resource issues."]
answers = ["Lower cost for storage"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a9e405ff-c4d8-49fa-bff9-bcccad89200f"
question = "What data protection feature is offered by EBS that allows for encryption of data at rest?"
good_bad_why = "Answers: [1,2]\n"
options = ["Data snapshots", "Amazon EBS encryption", "Multi-AZ replication", "Data mirroring", "This is a bad question and does not have an objective answer."]
explanation = ["Data snapshots is incorrect because while they can be encrypted, this is not the primary feature.", "Amazon EBS encryption is correct as it provides encryption capabilities for data at rest.", "Multi-AZ replication is not directly an EBS feature but rather relates to RDS and database high availability.", "Data mirroring is incorrect as it is not a defined feature of EBS."]
answers = ["Amazon EBS encryption"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d0dc4eb2-9a20-4ed3-8211-49b0eb44fa7f"
question = "Which command can you use to create a snapshot of an EBS volume using AWS CLI?"
good_bad_why = "Answers: [1,2]\n"
options = ["aws ec2 create-snapshot", "aws ec2 create-volume", "aws ec2 describe-snapshots", "aws ec2 delete-snapshot", "This is a bad question and does not have an objective answer."]
explanation = ["aws ec2 create-snapshot is correct as it is the command used to create snapshots.", "aws ec2 create-volume is incorrect because it is used to create a new volume, not a snapshot.", "aws ec2 describe-snapshots is used to list snapshots, not create them.", "aws ec2 delete-snapshot is for deleting existing snapshots, not creating them."]
answers = ["aws ec2 create-snapshot"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "4d3fe627-5b7a-429b-90f5-162a9e0c4215"
question = "What is a primary benefit of using Amazon EFS over traditional network file systems?"
good_bad_why = "Answers: [1,2]\n"
options = ["High availability and durability", "Manual scaling capabilities", "Complex setup and management", "File storage with a fixed capacity", "This is a bad question and does not have an objective answer."]
explanation = ["High availability and durability is correct because Amazon EFS offers high availability and automatic replication across multiple availability zones.", "Manual scaling capabilities is incorrect as Amazon EFS automatically scales based on the amount of data stored.", "Complex setup and management is incorrect since Amazon EFS is designed for easy setup and management.", "File storage with a fixed capacity is incorrect as Amazon EFS provides virtually unlimited storage."]
answers = ["High availability and durability"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d85f7b89-99aa-4675-9b17-0dc79eb5a809"
question = "When mounting an Amazon EFS file system on an EC2 instance, which Network File System (NFS) version is used by default?"
good_bad_why = "Answers: [1,2]\n"
options = ["NFSv3", "NFSv4.1", "NFSv2", "NFSv4.0", "This is a bad question and does not have an objective answer."]
explanation = ["NFSv3 is incorrect because Amazon EFS supports NFSv4.1 by default, which provides features such as improved performance and security.", "NFSv4.1 is correct as this is the default version used by Amazon EFS.", "NFSv2 is incorrect as it is an outdated version that is not supported by Amazon EFS.", "NFSv4.0 is incorrect; while it is a supported version, the default is NFSv4.1."]
answers = ["NFSv4.1"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "9516fb39-271f-4046-a24c-660016425fd0"
question = "Which Amazon EFS performance mode is best suited for workloads that require low latencies?"
good_bad_why = "Answers: [1,2]\n"
options = ["General Purpose", "Max I/O", "Provisioned Throughput", "Bursting Throughput", "This is a bad question and does not have an objective answer."]
explanation = ["General Purpose is correct as it is optimized for low-latency file operations.", "Max I/O is incorrect because it is designed for high throughput and not low latency.", "Provisioned Throughput is incorrect as it allows for high throughput, but does not specifically target low latencies.", "Bursting Throughput is incorrect as it allows for spikes in performance but is not optimized for low-latency workloads."]
answers = ["General Purpose"]
claude_answers = ["Max I/O"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f3e98285-2817-4549-ad6e-7f6a4534b3eb"
question = "What option can be employed to ensure that data stored in Amazon EFS is encrypted at rest?"
good_bad_why = "Answers: [1,2]\n"
options = ["Enable encryption under the file system settings", "Use AWS Identity and Access Management (IAM) policies", "Using EC2 instance encryption", "No special requirements, all data is encrypted", "This is a bad question and does not have an objective answer."]
explanation = ["Enable encryption under the file system settings is correct as Amazon EFS allows for encryption at rest by enabling this setting during file system creation.", "Use AWS Identity and Access Management (IAM) policies is incorrect as IAM does not manage data encryption.", "Using EC2 instance encryption is incorrect because it does not apply to EFS directly.", "No special requirements, all data is encrypted is incorrect because EFS requires the encryption option to be enabled during setup."]
answers = ["Enable encryption under the file system settings"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "6a2c571d-611b-4a79-8f75-f5db2023c067"
question = "Which feature of Amazon EFS allows multiple EC2 instances to access the same data simultaneously?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Mount targets", "Lustre file system", "Provisioned IOPS", "Replication", "This is a bad question and does not have an objective answer."]
explanation = ["Mount targets is correct as they allow multiple EC2 instances in multiple Availability Zones to access the EFS file system at the same time.", "Lustre file system is incorrect as it is a different service from EFS.", "Provisioned IOPS is incorrect because it is related to performance optimization, not simultaneous access.", "Replication is incorrect; while it helps with durability, it does not directly relate to concurrent access."]
answers = ["Mount targets"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "3d62f928-fe32-4982-989c-0332ac1cb430"
question = "What is a common method to achieve high availability for an Amazon EFS file system?"
good_bad_why = "Answers: [1,2]\n"
options = ["Deploying EFS in a single availability zone", "Leveraging cross-region replication", "Creating a file system with multiple mount targets in different availability zones", "Using instance types with high availability", "This is a bad question and does not have an objective answer."]
explanation = ["Deploying EFS in a single availability zone is incorrect because it does not provide high availability due to the risk of zone failure.", "Leveraging cross-region replication is incorrect as EFS does not support cross-region replication.", "Creating a file system with multiple mount targets in different availability zones is correct; this ensures high availability across zones.", "Using instance types with high availability is incorrect as it does not directly correlate to EFS availability."]
answers = ["Creating a file system with multiple mount targets in different availability zones"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f1a960ec-b2e9-4501-a22f-1b8c5b107e37"
question = "Which of the following statements is true regarding the Amazon EFS backup and restore process?"
good_bad_why = "Answers: [1,2]\n"
options = ["EFS has built-in backup and restore capabilities", "You need to use AWS Backup to manage your EFS backups", "EFS data cannot be restored to a different region", "Only attached EC2 instances can back up EFS data", "This is a bad question and does not have an objective answer."]
explanation = ["EFS has built-in backup and restore capabilities is incorrect; EFS does not provide built-in backup features.", "You need to use AWS Backup to manage your EFS backups is correct as AWS Backup provides the means to automate backups of EFS file systems.", "EFS data cannot be restored to a different region is incorrect as you can back up to S3 and restore from another region.", "Only attached EC2 instances can back up EFS data is incorrect because backups can be taken regardless of EC2 attachment."]
answers = ["You need to use AWS Backup to manage your EFS backups"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a54e195a-ec35-4727-9741-ae41794b5306"
question = "How does Amazon EFS handle file locking?"
good_bad_why = "Answers: [1,2]\n"
options = ["Through NFS locking mechanisms", "Amazon EFS does not support file locking", "Application-based locking mechanisms only", "Using IAM roles for file access control", "This is a bad question and does not have an objective answer."]
explanation = ["Through NFS locking mechanisms is correct; Amazon EFS supports file locking through the NFS protocol.", "Amazon EFS does not support file locking is incorrect; it does support file locking via NFS.", "Application-based locking mechanisms only is incorrect because the NFS protocol handles this at a lower level.", "Using IAM roles for file access control is incorrect as IAM does not manage NFS locking."]
answers = ["Through NFS locking mechanisms"]
alternative_answers = ["Amazon EFS does not support file locking", "Application-based locking mechanisms only", "Through NFS locking mechanisms"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "86b636e2-3ce6-427c-8d84-37c3736b76b8"
question = "What are the two types of storage solutions provided by Amazon FSx? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Amazon FSx for Windows File Server", "Amazon FSx for Lustre", "Amazon FSx for NFS", "Amazon FSx for HDFS", "This is a bad question and does not have an objective answer."]
explanation = ["Amazon FSx for Windows File Server is a managed Windows file system that is compatible with SMB, making it suitable for Windows-based applications.", "Amazon FSx for Lustre provides a high-performance file system designed for workloads like machine learning and high-performance computing, but FSx does not have a solution specifically named 'NFS'.", "Amazon FSx for HDFS is not a recognized offering from AWS; therefore, it is also incorrect."]
answers = ["Amazon FSx for Windows File Server", "Amazon FSx for Lustre"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "dd52bc91-0104-4b5e-ae18-d09a0d5aa49c"
question = "Which feature of Amazon FSx allows you to optimize your file system for specific workloads?"
good_bad_why = "Answers: [1,2]\n"
options = ["Data deduplication", "Backup and restore", "Throughput capacity", "Automatic scaling", "This is a bad question and does not have an objective answer."]
explanation = ["Data deduplication is not a feature offered by FSx specifically.", "Backup and restore is a functionality offered, but it does not optimize for workloads directly.", "Throughput capacity allows you to select how fast the file system can serve data and thus can optimize performance for workloads, making it correct.", "Automatic scaling is not a feature of FSx but pertains more to services like EC2."]
answers = ["Throughput capacity"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ba679b93-9575-479f-9056-5b9510386a00"
question = "When configuring Amazon FSx for Windows File Server, what storage protocol does it support primarily?"
good_bad_why = "Answers: [1,2]\n"
options = ["NFS", "SMB", "FTP", "HTTP", "This is a bad question and does not have an objective answer."]
explanation = ["NFS is not primarily supported by FSx for Windows File Server; it supports SMB.", "SMB is indeed the primary protocol supported by Amazon FSx for Windows File Server.", "FTP is a file transfer protocol and not a supported protocol for FSx.", "HTTP is also not a supported protocol for FSx file systems."]
answers = ["SMB"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b54763fa-6e33-44c3-ae9b-7379cbc2238e"
question = "What is one benefit of using Amazon FSx for Lustre with Amazon S3?"
good_bad_why = "Answers: [1,2]\n"
options = ["Automatic data encryption", "Integration with AWS Glue", "Persistent storage for Jupyter notebooks", "Fast access to S3 data", "This is a bad question and does not have an objective answer."]
explanation = ["Automatic data encryption is a feature of FSx but is not specifically a benefit tied to using Lustre with S3.", "Integration with AWS Glue is not a primary benefit of FSx for Lustre.", "Although you can run Jupyter notebooks on EC2 with persistent storage, it is not a core benefit of FSx.", "Fast access to S3 data is a significant benefit as FSx for Lustre provides seamless integration to access and process S3 data quickly."]
answers = ["Fast access to S3 data"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "29cdf64b-55fa-4337-8e04-3452363be2b1"
question = "In which scenarios would you consider using Amazon FSx for Windows File Server instead of Amazon EFS?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["You need a shared file system accessed primarily by Windows applications.", "You require high throughput for big data analytics.", "You need a serverless architecture.", "You want multi-region replication.", "This is a bad question and does not have an objective answer."]
explanation = ["Using FSx is appropriate when dealing with Windows applications that need a fully managed file system compatible with SMB.", "High throughput for big data analytics is better suited for FSx for Lustre.", "A serverless architecture would more commonly use Amazon EFS.", "Multi-region replication is not a feature designed for FSx, yet EFS supports cross-region replication."]
answers = ["You need a shared file system accessed primarily by Windows applications."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "312510b9-df52-4c3e-bb1b-b96112f7fea0"
question = "Which security feature does Amazon FSx for Windows File Server provide?"
good_bad_why = "Answers: [1,2]\n"
options = ["IAM policies only", "Active Directory integration", "Blocking all traffic by default", "VPC peering", "This is a bad question and does not have an objective answer."]
explanation = ["IAM policies can control access, but they are not the sole security feature.", "Active Directory integration is a key security feature that allows users to authenticate with their AD credentials.", "Blocking all traffic is not how Amazon FSx operates by default; rather, it works within the security framework of the VPC.", "VPC peering is an option but not a direct security feature specific to FSx."]
answers = ["Active Directory integration"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c5bbeee3-fe30-48ef-a9ee-0dcf626315a0"
question = "What monitoring tools can you use with Amazon FSx for performance optimization?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS CloudTrail", "Amazon CloudWatch", "Amazon Inspector", "AWS X-Ray", "This is a bad question and does not have an objective answer."]
explanation = ["AWS CloudTrail is primarily for logging API calls and not specific to performance monitoring.", "Amazon CloudWatch is essential for monitoring disk usage, throughput, and other metrics for FSx.", "Amazon Inspector focuses on security compliance and vulnerability assessments, not performance.", "AWS X-Ray is used for analyzing and debugging distributed applications, not directly for FSx performance."]
answers = ["Amazon CloudWatch"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "f1103f17-a348-49a8-9cdf-a3ea35a443da"
question = "What feature does Amazon FSx for Windows File Server provide for backup management?"
good_bad_why = "Answers: [1,2]\n"
options = ["Cross-region replication", "Snapshot scheduling", "Multi-cloud backups", "Data encryption at rest", "This is a bad question and does not have an objective answer."]
explanation = ["Cross-region replication is a feature of S3 and EFS but not FSx for Windows.", "Snapshot scheduling allows users to create backups at specified intervals, which is a primary feature.", "Multi-cloud backups are not offered explicitly by FSx.", "Data encryption at rest is a good security feature but does not pertain specifically to backup management."]
answers = ["Snapshot scheduling"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "aae1d652-027e-461f-83a7-ab5ae7c69736"
question = "What is the maximum file size supported by Amazon FSx for Windows File Server?"
good_bad_why = "Answers: [1,2]\n"
options = ["1 TB", "16 TB", "256 TB", "64 TB", "This is a bad question and does not have an objective answer."]
explanation = ["1 TB is incorrect as the limit for FSx for Windows is larger.", "16 TB is also a limitation for certain file systems; it is not the maximum for FSx.", "256 TB is not accurate as FSx for Windows supports files up to 64 TB.", "64 TB is the correct maximum file size supported for a single file in FSx for Windows File Server."]
answers = ["64 TB"]
claude_answers = ["16 TB"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "009bf81a-ace0-4898-81fa-63413ccbeacd"
question = "Which of the following storage classes in Amazon S3 is best suited for data that is rarely accessed but must be retained for future use? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["S3 Standard", "S3 Intelligent-Tiering", "S3 Glacier", "S3 One Zone-IA", "This is a bad question and does not have an objective answer."]
explanation = ["S3 Standard is wrong because it is designed for frequently accessed data.", "S3 Intelligent-Tiering is wrong because it is optimized for data with changing access patterns.", "S3 Glacier is correct as it is specifically designed for archival storage and infrequently accessed data.", "S3 One Zone-IA is wrong because it is for infrequent access but offers no redundancy across multiple availability zones."]
answers = ["S3 Glacier"]
alternative_answers = ["S3 Glacier", "S3 One Zone-IA"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "66fb0f05-e207-44e7-804a-87f2cc56166b"
question = "What is the maximum object size supported by Amazon S3? "
good_bad_why = "Answers: [1,2]\n"
options = ["5 TB", "10 TB", "15 TB", "1 PB", "This is a bad question and does not have an objective answer."]
explanation = ["5 TB is correct; S3 supports objects up to 5 TB in size.", "10 TB is wrong because it exceeds the maximum object size.", "15 TB is wrong; the maximum limit is 5 TB.", "1 PB is wrong since it is well above the supported limit."]
answers = ["5 TB"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "dc35dd3b-f1a4-4cb5-987e-52bbd35556be"
question = "Which Amazon S3 feature allows you to define rules that automate the moving of objects between different storage classes? "
good_bad_why = "Answers: [1,2]\n"
options = ["S3 Object Lock", "S3 Lifecycle Policies", "S3 Access Control Lists", "S3 Cross-Region Replication", "This is a bad question and does not have an objective answer."]
explanation = ["S3 Object Lock is wrong because it is used for data protection and retention.", "S3 Lifecycle Policies is correct; it allows you to automate the transition of objects.", "S3 Access Control Lists is wrong as it manages user access, not storage management.", "S3 Cross-Region Replication is wrong as it replicates objects across regions for redundancy, not for transitions."]
answers = ["S3 Lifecycle Policies"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "1f296c56-ac60-491e-8245-c9382b0eb361"
question = "Which of the following S3 storage classes provide automatic tiering? "
good_bad_why = "Answers: [1,2]\n"
options = ["S3 Standard", "S3 One Zone-IA", "S3 Intelligent-Tiering", "S3 Glacier", "This is a bad question and does not have an objective answer."]
explanation = ["S3 Standard is wrong; it does not provide automatic tiering.", "S3 One Zone-IA is incorrect as it does not automatically transition data.", "S3 Intelligent-Tiering is correct because it automatically moves data between two access tiers.", "S3 Glacier is wrong; although it's a low-cost storage option, it does not provide automatic tiering."]
answers = ["S3 Intelligent-Tiering"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "b17356f1-4213-4b2e-bb0a-c3839b655091"
question = "What is the purpose of the Bucket Policy in Amazon S3? "
good_bad_why = "Answers: [1,2]\n"
options = ["To control versioning settings", "To define bucket lifecycle configurations", "To set permissions on the S3 bucket and its objects", "To restrict data transfer rates", "This is a bad question and does not have an objective answer."]
explanation = ["To control versioning settings is incorrect as that relates to object versioning.", "To define bucket lifecycle configurations is wrong because those are specified separately.", "To set permissions on the S3 bucket and its objects is correct; bucket policies manage access.", "To restrict data transfer rates is wrong; S3 does not provide that capability through bucket policies."]
answers = ["To set permissions on the S3 bucket and its objects"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7ea9ce83-c378-4fc8-af68-1ceab1a7d163"
question = "What API call would you make to retrieve the metadata of an object stored in Amazon S3? "
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["GetObject", "HeadObject", "ListObjects", "PutObject", "This is a bad question and does not have an objective answer."]
explanation = ["GetObject is incorrect; it retrieves the object along with its metadata, not just the metadata.", "HeadObject is correct; it retrieves metadata without the response body.", "ListObjects does not retrieve metadata for a specific object.", "PutObject is wrong; it is used for uploading objects to S3."]
answers = ["HeadObject"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "7ff08926-2041-4a4b-b48d-1e0e86b58155"
question = "Which of the following statements are true regarding S3 Cross-Region Replication? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["It replicates all new objects created in the source bucket", "It requires versioning to be enabled on source and destination buckets", "It replicates existing objects in the source bucket", "It is automatically enabled upon bucket creation", "This is a bad question and does not have an objective answer."]
explanation = ["It replicates all new objects created in the source bucket is correct; it only replicates new objects.", "It requires versioning to be enabled on source and destination buckets is also correct.", "It replicates existing objects in the source bucket is wrong; it only applies to new objects.", "It is automatically enabled upon bucket creation is incorrect; it must be configured explicitly."]
answers = ["It replicates all new objects created in the source bucket", "It requires versioning to be enabled on source and destination buckets"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7f5e2bac-1e46-4d56-a2cc-83679fe42ea2"
question = "What is the primary benefit of using Amazon S3 Transfer Acceleration? "
good_bad_why = "Answers: [1,2]\n"
options = ["Increased durability of data", "Reduced latency in upload speeds", "Automatic data replication", "Lower storage costs", "This is a bad question and does not have an objective answer."]
explanation = ["Increased durability of data is incorrect; durability is inherent in S3 regardless of transfer options.", "Reduced latency in upload speeds is correct; it speeds up file transfers.", "Automatic data replication is wrong; that is not related to transfer acceleration.", "Lower storage costs is incorrect; transfer acceleration focuses on speed, not cost reduction."]
answers = ["Reduced latency in upload speeds"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "5589fd8d-8441-4d2d-9a34-46ee9337f6f7"
question = "Which feature of Amazon S3 enables you to recover an object that was accidentally deleted? "
good_bad_why = "Answers: [1,2]\n"
options = ["Versioning", "Replication", "Lifecycle Policies", "Object Lock", "This is a bad question and does not have an objective answer."]
explanation = ["Versioning is correct; it allows you to recover deleted or overwritten objects.", "Replication is wrong as it creates copies in another bucket but doesn't help recover from deletions directly.", "Lifecycle Policies is incorrect; they manage object transitions, not recover deletions.", "Object Lock is intended to prevent deletion but doesn't help with recovering deleted objects."]
answers = ["Versioning"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "37d77819-af6f-4e9d-802e-1c2b09b50d87"
question = "In Amazon S3, which encryption method allows you to manage your own keys? "
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3)", "Client-Side Encryption", "Server-Side Encryption with Customer-Provided Keys (SSE-C)", "Server-Side Encryption with AWS Key Management Service (SSE-KMS)", "This is a bad question and does not have an objective answer."]
explanation = ["Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3) is incorrect; you cannot manage keys here.", "Client-Side Encryption is wrong; while you manage keys, it's done before data reaches S3.", "Server-Side Encryption with Customer-Provided Keys (SSE-C) is correct; you can provide your encryption keys.", "Server-Side Encryption with AWS Key Management Service (SSE-KMS) allows some key management, but AWS manages them as well."]
answers = ["Server-Side Encryption with Customer-Provided Keys (SSE-C)"]
alternative_answers = ["Server-Side Encryption with Customer-Provided Keys (SSE-C)", "Client-Side Encryption"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "f924dcdc-04ea-4a66-9a6d-8e0eab0752fb"
question = "Which two features are available in Amazon S3 Glacier? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["Data retrieval policies", "Automatic replication to multiple regions", "Vault locking", "Lifecycle policies", "This is a bad question and does not have an objective answer."]
explanation = ["Automatic replication to multiple regions is wrong because Amazon S3 Glacier does not natively support cross-region replication.", "Vault locking is correct as it allows you to enforce compliance controls on your vault.", "Data retrieval policies are correct and help to manage costs associated with retrieval requests.", "Lifecycle policies are correct as they enable automatic migration of data to Glacier."]
answers = ["Data retrieval policies", "Lifecycle policies"]
alternative_answers = ["Vault locking", "Lifecycle policies"]
claude_answers = ["Vault locking", "Lifecycle policies"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7aacd757-c195-4860-8938-bef0a203b096"
question = "What is the primary storage class used for archiving data in Amazon S3 Glacier?"
good_bad_why = "Answers: [1,2]\n"
options = ["S3 Standard", "S3 Intelligent-Tiering", "S3 Glacier", "S3 One Zone-IA", "This is a bad question and does not have an objective answer."]
explanation = ["S3 Standard is incorrect because it is meant for frequently accessed data.", "S3 Intelligent-Tiering is for automatic data tiering and is not intended for long-term archive.", "S3 Glacier is correct as it is specifically designed for archiving data.", "S3 One Zone-IA is also incorrect as it is for infrequently accessed data that is stored in a single availability zone."]
answers = ["S3 Glacier"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ed78de34-454c-43f5-b272-0cc46fdef0ed"
question = "Which retrieval option from Amazon S3 Glacier is best for accessing large data sets quickly?"
good_bad_why = "Answers: [1,2]\n"
options = ["Expedited retrieval", "Standard retrieval", "Bulk retrieval", "Archive retrieval", "This is a bad question and does not have an objective answer."]
explanation = ["Standard retrieval is incorrect as it is intended for regular retrieval times of a few hours.", "Bulk retrieval is incorrect as it is designed for retrieving large amounts of data in a cost-effective manner but can take up to 12 hours.", "Expedited retrieval is correct because it allows access to large datasets in minutes.", "Archive retrieval is not a valid option as it does not exist in S3 Glacier."]
answers = ["Expedited retrieval"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ae87e328-99b9-43e5-bb31-94f90fed85b3"
question = "What is the maximum size of an individual object that can be archived in Amazon S3 Glacier?"
good_bad_why = "Answers: [1,2]\n"
options = ["5 TB", "10 GB", "1 GB", "100 MB", "This is a bad question and does not have an objective answer."]
explanation = ["10 GB is incorrect as it is too small; Amazon S3 Glacier supports archiving objects up to 5 TB.", "1 GB is incorrect because it is well below the maximum limit.", "5 TB is correct as it is the maximum size for an individual object stored in S3 Glacier.", "100 MB is also incorrect because it is far less than the maximum capacity."]
answers = ["5 TB"]
claude_answers = ["40 TB"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c688d1f3-ab1e-45d9-af6d-3775436b700c"
question = "Which Amazon S3 Glacier feature allows you to control the retrieval request rate?"
good_bad_why = "Answers: [1,2]\n"
options = ["Data lifecycle management", "Retrieval policies", "Vault lock", "Tiered pricing", "This is a bad question and does not have an objective answer."]
explanation = ["Data lifecycle management is incorrect as it is used for transitioning data between storage classes.", "Retrieval policies are correct as they allow you to set limits on how frequently you can retrieve data to manage costs.", "Vault lock does not control retrieval rates; it secures vault content.", "Tiered pricing refers to cost structure and is not a direct means to control retrieval request rates."]
answers = ["Retrieval policies"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ff6b1010-30e7-438b-83e6-498423393301"
question = "What is the minimum time for data retrieval using Bulk retrieval option in Amazon S3 Glacier?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Minutes", "Hours", "Hours to a day", "Days", "This is a bad question and does not have an objective answer."]
explanation = ["Minutes is incorrect as bulk retrieval is not designed for quick access.", "Hours is also incorrect as it can take longer than that.", "Hours to a day is correct as it can take between 5 to 12 hours for retrieval using the Bulk option.", "Days is incorrect since it would typically not go beyond 12 hours for bulk retrieval."]
answers = ["Hours to a day"]
alternative_answers = ["Hours"]
fakebot_answers = []
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "b1af6e71-f399-4966-88e9-6ddf276887c2"
question = "In Amazon S3 Glacier, what is the purpose of a vault?"
good_bad_why = "Answers: [1,2]\n"
options = ["To store data temporarily", "To manage access control", "To group archives", "To backup data", "This is a bad question and does not have an objective answer."]
explanation = ["To store data temporarily is incorrect as vaults are not temporary but more permanent storage.", "To manage access control is a part of vault functionalities but not the primary purpose.", "To group archives is correct as vaults serve to contain and organize multiple archives.", "To backup data is misleading; while fodder can be archived, vaults are not specifically for backups."]
answers = ["To group archives"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "efc67315-ec24-4f9c-adae-85be5136466e"
question = "What Amazon S3 Glacier feature helps manage costs for data retrieval?"
good_bad_why = "Answers: [1,2]\n"
options = ["Storage metrics", "Automatic data retrieval", "Retrieval policies", "Cross-region replication", "This is a bad question and does not have an objective answer."]
explanation = ["Storage metrics do not manage retrieval costs directly; they only provide insights.", "Automatic data retrieval does not exist in S3 Glacier.", "Retrieval policies are correct as they help to set limits and manage retrieval costs.", "Cross-region replication is not an applicable feature in S3 Glacier."]
answers = ["Retrieval policies"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "ac887257-a0d6-4a31-a0a1-f221416219e2"
question = "Which retrieval method is NOT available in Amazon S3 Glacier?"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["Expedited retrieval", "Standard retrieval", "Random access retrieval", "Bulk retrieval", "This is a bad question and does not have an objective answer."]
explanation = ["Expedited retrieval is incorrect as it is a valid option available for quick access.", "Standard retrieval is also available for typical data access but is not the fastest.", "Bulk retrieval is a valid option for cost-effective access to large data sets.", "Random access retrieval is incorrect because it is not an available retrieval method in Amazon S3 Glacier."]
answers = ["Random access retrieval"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "1fc7d47e-5b74-4327-a165-44aaa9ebe561"
question = "What are two types of AWS Storage Gateway configurations? (Select 2)"
good_bad_why = "Answers: [1,2]\n"
options = ["File Gateway", "Database Gateway", "Volume Gateway", "Network Gateway", "This is a bad question and does not have an objective answer."]
explanation = ["File Gateway is correct because it provides a way to store files in S3-based storage.", "Database Gateway is wrong as no such configuration exists in AWS Storage Gateway.", "Volume Gateway is correct because it allows block storage to be used with Amazon S3 and offers backup and recovery options.", "Network Gateway is wrong as it doesn't exist in the AWS Storage Gateway offerings."]
answers = ["File Gateway", "Volume Gateway"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "a4f992b4-310d-4496-ba54-bb2e129c47f9"
question = "Which services can AWS Storage Gateway integrate with? (Select 1)"
good_bad_why = "**** Bot returned None, maybe API failed ****"
options = ["AWS Lambda", "Amazon RDS", "Amazon CloudFront", "Amazon S3", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Lambda is not directly integrated with Storage Gateway, it can interact but is not a core integration.", "Amazon RDS is also not integrated directly, though data can be backed up through other means.", "Amazon CloudFront is not a direct integration of Storage Gateway services.", "Amazon S3 is correct because it serves as a storage backend for both File Gateway and Tape Gateway for storing data."]
answers = ["Amazon S3"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "**** Bot returned None, maybe API failed ****"]

[[questions]]
id = "e891a1ea-b894-48dc-9cd6-81bcb9db3856"
question = "Which storage class does AWS Storage Gateway use for storing files in Amazon S3?"
good_bad_why = "Answers: [1,2]\n"
options = ["S3 Standard", "S3 Intelligent-Tiering", "S3 Glacier", "S3 One Zone-IA", "This is a bad question and does not have an objective answer."]
explanation = ["S3 Standard is not the only option but is commonly used for active data.", "S3 Intelligent-Tiering is beneficial for data with unknown access patterns but is not specifically for Storage Gateway.", "S3 Glacier is primarily used for archival storage and not for files stored through Storage Gateway.", "S3 One Zone-IA is a lower cost option for infrequent access but it is not the standard class for Gateway to use."]
answers = ["S3 Standard"]
alternative_answers = ["S3 Glacier", "S3 Standard", "S3 Intelligent-Tiering"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7fa8de7e-aaf9-42a9-939c-fd4a6dff4f03"
question = "What is the primary function of the AWS Storage Gateway Tape Gateway?"
good_bad_why = "Answers: [1,2]\n"
options = ["Backup on-premises data", "Migrate data to S3", "Store virtual tapes", "Serve files over NFS", "This is a bad question and does not have an objective answer."]
explanation = ["Backup on-premises data is not specific enough to Tape Gateway which deals with tapes instead.", "Migrate data to S3 is correct as the Tape Gateway helps migrate data from virtual tapes to S3 for long-term archiving.", "Store virtual tapes is correct because Tape Gateway facilitates the storage of virtual tapes in S3.", "Serve files over NFS pertains to File Gateway, not Tape Gateway."]
answers = ["Store virtual tapes"]
alternative_answers = ["Store virtual tapes", "Backup on-premises data"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "89ec616c-ff93-4183-9946-aaa79e440f51"
question = "What protocol does the AWS Storage Gateway use to interact with clients for the File Gateway?"
good_bad_why = "Answers: [1,2]\n"
options = ["NFS", "FCP", "SMB", "iSCSI", "This is a bad question and does not have an objective answer."]
explanation = ["NFS is correct because File Gateway allows file storage access through Network File System.", "FCP is incorrect as it doesn't relate to Storage Gateway protocols.", "SMB is correct because File Gateway also allows file access through Server Message Block protocol.", "iSCSI is incorrect because it's primarily used in Volume Gateway and not used in File Gateway."]
answers = ["NFS", "SMB"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "d7b382cb-8a59-4942-8947-93d321719859"
question = "Which of the following accurately describes the caching mechanism in AWS Storage Gateway?"
good_bad_why = "Answers: [1,2]\n"
options = ["All data is cached locally.", "Data is cached only when uploaded to S3.", "The gateway caches frequently accessed data locally.", "There is no caching mechanism in Storage Gateway.", "This is a bad question and does not have an objective answer."]
explanation = ["All data is cached locally is incorrect; the caching mechanism focuses on data access patterns rather than all data.", "Data is cached only when uploaded to S3 is incorrect, as caching focuses on retrieval speed and access patterns.", "The gateway caches frequently accessed data locally is correct; this speeds up access to popular data.", "There is no caching mechanism in Storage Gateway is incorrect; caching is a core feature."]
answers = ["The gateway caches frequently accessed data locally."]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "c8195f0e-9be2-424d-9e9a-d0beee142999"
question = "What is a limitation of using AWS Storage Gateway Tape Gateway?"
good_bad_why = "Answers: [1,2]\n"
options = ["Only supports AWS S3", "Cannot retrieve data from backup", "Limited to 10 virtual tapes", "Requires on-premises hardware", "This is a bad question and does not have an objective answer."]
explanation = ["Only supports AWS S3 is incorrect, as it can facilitate on-site tape emulation.", "Cannot retrieve data from backup is incorrect; you can retrieve data from tapes stored in S3.", "Limited to 10 virtual tapes is incorrect; an account can provision more tape drives as per need.", "Requires on-premises hardware is correct; Tape Gateway requires infrastructure to run locally."]
answers = ["Requires on-premises hardware"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "205a5702-26bb-4cde-9a32-7c81055fb742"
question = "How can you interact with AWS Storage Gateway in terms of management and monitoring?"
good_bad_why = "Answers: [1,2]\n"
options = ["AWS Management Console", "AWS SDKs only", "AWS Command Line Interface", "All of the above", "This is a bad question and does not have an objective answer."]
explanation = ["AWS Management Console is a correct option as it allows for intuitive monitoring.", "AWS SDKs only is incorrect as it does not exclude the console and CLI.", "AWS Command Line Interface is correct; it can manage many AWS services, including Storage Gateway.", "All of the above is correct since all three methods can interact with Storage Gateway."]
answers = ["All of the above"]
alternative_answers = ["AWS SDKs only", "AWS Command Line Interface", "AWS Management Console", "All of the above"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "85a70915-3bb2-4c9a-b445-df11227d1831"
question = "What type of gateway would you use if you need to quickly store and retrieve frequently accessed data?"
good_bad_why = "Answers: [1,2]\n"
options = ["Volume Gateway", "File Gateway", "Tape Gateway", "Snapshot Gateway", "This is a bad question and does not have an objective answer."]
explanation = ["Volume Gateway is more suited for block storage use cases, not specifically for frequent access.", "File Gateway is correct as it allows for fast access to files stored in S3 for frequently accessed use cases.", "Tape Gateway is incorrect as it is used for archival purposes and is not designed for frequent access.", "Snapshot Gateway does not exist as a term in AWS Storage Gateway."]
answers = ["File Gateway"]
fakebot_answers = []
good_bad = ["bad", "Answers: [1,2]\n"]

[[questions]]
id = "7f7b79b9-2220-435e-9fb8-b58214a6f374"
question = "What happens to the local cache on a Storage Gateway when data is uploaded to the cloud?"
good_bad_why = "Answers: [1,2]\n"
options = ["It is deleted immediately", "It is retained indefinitely", "It is retained until the local disk is full", "It is periodically flushed", "This is a bad question and does not have an objective answer."]
explanation = ["It is deleted immediately is incorrect; the cache remains in use for quicker future access.", "It is retained indefinitely is incorrect; storage management practices govern retention.", "It is retained until the local disk is full is correct; the cache will store as much data as possible until it runs out of space.", "It is periodically flushed is incorrect; flushing is not standard for data management in Storage Gateway."]
answers = ["It is retained until the local disk is full"]
claude_answers = ["It is periodically flushed"]
fakebot_answers = ["1,2"]
good_bad = ["bad", "Answers: [1,2]\n"]
